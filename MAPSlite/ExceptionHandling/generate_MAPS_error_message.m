function msg = generate_MAPS_error_message(funcName,errCode,errArgs)
% This function contains all documented MAPS error messages.
% It is a configuration file which relates exceptions encountered in all
% MAPS functions (which have specific codes attached to them) to error
% messages written in plain English.
%
% INPUTS:
%   -> funcName: string name of the function where the error was found
%   -> errCode: string code for the error that was encountered
%   -> errArgs: cell array of additional message arguments (can be empty)
%
% OUTPUTS:
%   -> msg: string error message
%
% DETAILS:
%   -> This file contains a sub-function with the above naming convention
%      for each documented MAPS function.
%   -> All of the sub-functions take an errCode and a (potentially empty)
%      cell array of additional message arguments as input.
%   -> Each of the sub-functions relates a particular error (identified by
%      a specific code that is unique in that MAPS function) to an error
%      message.
%   -> The construction of that error message can be supplemented with
%      additional information contained in errArgs (which can be an
%      empty cell array if no additional arguments exist for the error).
%
% NOTES:
%   -> See the MAPS user guide for a description of error handling in MAPS.
%
% This version: 19/12/2013
% Author(s): Francesca Monti, Konstantinos Theodoridis, Matt Waldron, Kate
% Reinold

%% CHECK INPUTS
if nargin < 3
    error(['MAPS:',mfilename,':BadNargin'],[mfilename,' was not ',...
        'passed the right number of inputs: it requires 3 inputs, ',...
        'but only received ',num2str(nargin)])
elseif ~ischar(funcName)
    error(['MAPS:',mfilename,':BadInput1'],['1st input passed to ',...
        mfilename,' must be a string representing a MAPS function name'])
elseif ~ischar(errCode)
    error(['MAPS:',mfilename,':BadInput2'],['2nd input passed to ',...
        mfilename,' must be a string representing a MAPS error code'])
elseif ~iscell(errArgs)
    error(['MAPS:',mfilename,':BadInput3'],['3rd input passed to ',...
        mfilename,' must be a cell array containing additional ',...
        'message arguments'])
end

%% ATTEMPT CALL THE RELEVANT SUBFUNCTION
try
    msg = eval(['get_',funcName,'_error(errCode,errArgs);']);
catch MessageConstructionE
    ErrorMessageE = MException(...
        ['MAPS:',mfilename,':MessageConstructionFailure'],...
        ['MAPS ',mfilename,' configuration file was unable ',...
        'to construct the exception message for ''',funcName,''' ',...
        'for the following reason:']);
    ErrorMessageE = addCause(ErrorMessageE,MessageConstructionE);
    throw(ErrorMessageE);
end

end

%% ADD CAUSE FROM LIST TO AN EXCEPTION
function msg = get_add_causes_from_list_to_an_exception_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['add_causes_from_list_to_an_exception was not passed ',...
            'the right number of inputs: it requires 4 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'add_causes_from_list_to_an_exception must be an ',...
            'exception to add the causes to'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'add_causes_from_list_to_an_exception must be a string ',...
            'representing the name of the exception identifier for ',...
            'the causes'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'add_causes_from_list_to_an_exception must be a two-',...
            'dimensional cell string array of possible exception ',...
            'cause arguments'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'add_causes_from_list_to_an_exception must be a column ',...
            'vector of logicals describing which arguments from the ',...
            'list to add as causes'];        
    case 'InconsistentCauseDims'
        msg = ['4th & 5th inputs passed to ',...
            'add_causes_from_list_to_an_exception must have the same ',...
            'nummber of rows, reflecting number of possible causes'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ANALYSE FIX RESPONSE MDE OUTPUT
function msg = get_analyse_fix_response_MDE_output_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['analyse_fix_response_MDE_output was not passed the ',...
            'right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to analyse_fix_response_MDE_output ',...
            'must be a MAPS LSS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to analyse_fix_response_MDE_output ',...
            'must be a structure of MDE outputs'];
end
end

%% APPEND REGRESSION TEST DATA
function msg = get_append_regression_test_data_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['append_regression_test_data was not passed the right ',...
            'number of inputs: it requires 6 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to append_regression_test_data must ',...
            'be a string representing the name of the test directory'];
    case 'BadInput2'
        msg = ['2nd input passed to append_regression_test_data must ',...
            'be a string representing the name of the function with ',...
            'the automated test cases to be appended'];
    case 'BadInput3'
        msg = ['3rd input passed to append_regression_test_data must ',...
            'be a row cell array of input data for the new test case'];
    case 'BadInput4'
        msg = ['4th input passed to append_regression_test_data must ',...
            'be a row cell array of expected output data for the new ',...
            'test case'];
    case 'BadInput5'
        msg = ['5th input passed to append_regression_test_data must ',...
            'be a positive numeric scalar representing the tolerance ',...
            'within which the new test case will be assumed a success'];
    case 'BadInput6'
        msg = ['6th input passed to append_regression_test_data must ',...
            'be a string providing a description of the new test ',...
            'case, which is used to help quickly diagnose problems ',...
            'and as a form of auto-documentation'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% APPEND STRINGS
function msg = get_append_strings_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['append_strings was not passed the right number of ',...
            'inputs: it requires 2 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to append_strings must be a two-',...
            'dimensional cell array of strings to append'];
    case 'BadInput2'
        msg = ['2nd input passed to append_strings must be a string ',...
            'to append to the set of strings passed in as 1st input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% APPEND STRINGS AND CREATE COMMA SEPARATED LIST
function msg = get_append_strings_and_create_comma_separated_list_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['append_strings_and_create_comma_separated_list was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% APPLY AXES OPTIONS
function msg = get_apply_axes_options_error(errCode, errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['apply_axes_options was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to apply_axes_options ',...
            'must be a structure containing property names and values ',...
            'to be set on an axes handle.'];
    case 'BadInput2'
        msg = ['2nd input passed to apply_axes_options ',...
            'must be a valid axes handle.'];
    case 'BadAxesOptionValue'
        msg = ['Error applying axes property ''' errArgs{1} ,...
            '''. Check that the property name is correctly spelled ',...
            'and valid for an axes object, and that the value''s ',...
            'datatype is correct.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% APPLY LINE OPTIONS
function msg = get_apply_line_options_error(errCode, errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['apply_line_options was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to apply_line_options ',...
            'must be a structure containing property names and values ',...
            'to be set on a collection of line series handles. Each ',...
            'value must be a column cell array of the same length as ',...
            'the 2nd input.'];
    case 'BadInput2'
        msg = ['2nd input passed to apply_line_options ',...
            'must be a column vector of valid line series handles.'];
    case 'BadLineSeriesOptionValues'
        msg = ['Each field value in the lineOptions structure must be ',...
            'a column cell array with the same length as the number ',...
            'of line series handles in the second input. There was a ',...
            'problem with the value for field name: ', errArgs{1}];
    case 'BadLineSeriesOptionValue'
        msg = ['Error applying line series property ''' errArgs{1} ''' ',... 
            'to line series index ' num2str(errArgs{2}) '. Check that',...
            ' the property name is correctly spelled and valid for a ',...
            'line series object, and that the value''s datatype is correct.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% APPLY SORTED COLOUR MAP
function msg = get_apply_sorted_colour_map_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['apply_sorted_colour_map was not passed the right '...
            'number of inputs. It requires 2 but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['The first input received by apply_sorted_colour_map '...
            'must be a real positive number indicating the number of '...
            'bars in the decomposition.'];
    case 'BadInput2'
        msg = ['The second input received by apply_sorted_colour_map '...
            'must be an axis handle to which to apply the colour maps.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% APPLY VERTICAL LINE TO FIGURE
function msg = get_apply_vertical_line_to_figure_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['apply_vertical_line_to_figure was not passed the right '...
            'number of inputs. It requires 4 but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['The first input received by apply_vertical_line_to_figure '...
            'must be a numeric row vector containing the x axis labels '...
            'of the figure.'];
    case 'BadInput2'
        msg = ['The second input received by apply_vertical_line_to_figure '...
            'must be a real positive scalar indicating the position of '...
            'the requested vertical line.'];
    case 'BadInput3'
        msg = ['The third input received by apply_vertical_line_to_figure '...
            'must be a logical scalar indicating whether to place the '...
            'vertical line midway between the second input line position '...
            'and the position above (indicated by true), or exactly on '...
            'the input position (false).']; 
    case 'BadInput4'
        msg = ['The fourth input received by apply_vertical_line_to_figure '...
            'must be an axis handle to which to apply the vertical line.'];  
    case 'BadLinePosition'
        msg = ['The line position provided to apply_vertical_line_to_'...
            'figure was not part of the x axis values provided.'];
    case 'BadMidPoint'
        msg = ['The third input to apply_vertical_line_to_figure requested'...
            ' that the vertical line be positioned between the input line '...
            'position and the position above. This is not possible because'...
            ' the input line position is the final point on the x axis '...
            'provided.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end    

%% APPROXIMATE MARGINAL DATA DENSITY USING HARMONIC MEAN
function msg = ...
    get_approximate_marginal_data_density_using_harmonic_mean_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['approximate_marginal_data_density_using_harmonic_mean ',...
            'was not passed the right number of inputs: it requires 2 ',...
            'or 3 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'approximate_marginal_data_density_using_harmonic_mean ',...
            'must be a finite real two- or three-dimensional numeric ',...
            'matrix of parameter draws'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'approximate_marginal_data_density_using_harmonic_mean ',...
            'must be a finite real two- or three-dimensional numeric ',...
            'matrix of unnormalised log posterior values from the ',...
            'simulation which must have a single row'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'approximate_marginal_data_density_using_harmonic_mean ',...
            'must be a positive real integer for the number of ',...
            'probability values at which to compute the approximation']; 
    case 'InconsistentChainDims'
        msg = ['1st and 2nd inputs passed to ',...
            'approximate_marginal_data_density_using_harmonic_mean ',...
            'must be finite real three-dimensional numeric matrices ',...
            'of parameter draws and log posterior values with 2nd ',...
            'and 3rd diemensions of the same size representing the ',...
            'number of draws and chains respectively'];
    case 'BadCovarMat'
        msg = ['The covariance matrix computed from the input ',...
            'parameter chains is not positive definite, so MAPS ',...
            'cannot proceed with the computation of the marginal data ',...
            'density. The most likely cause of this is that the ',...
            'number of draws in the simulation was not sufficient to ',...
            'generate a well-behaved covariance matrix. In testing ',...
            'for positive definiteness, MAPS used the MATLAB chol ',...
            'function which returned the following error:']; 
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ARE DATA THE SAME
function msg = get_are_data_the_same_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['are_data_the_same was not passed the right number of ',...
            'inputs: it requires 2 or 3 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to are_data_the_same must ',...
            'be a numeric scalar representing a tolerance for the ',...
            'comparison of the two pieces of data within which the ',...
            'two data are treated as being numerically identical'];
    case 'UnhandledClass'
        msg = ['MAPS could not complete the assessment of whether or ',...
            'not the two data are the same because it encountered the ',...
            'following data class that its data comparison function ',...
            'does not handle: ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ARE EQUATIONS FORWARD LOOKING
function msg = get_are_equations_forward_looking_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['are_equations_forward_looking was not passed the ',...
            'right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to are_equations_forward_looking ',...
            'must be a column cell string array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ARE EQUATIONS THE SAME
function msg = get_are_equations_the_same_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['are_equations_the_same was not passed the right ',...
            'number of inputs: it requires 2 or 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to are_equations_the_same must be an ',...
            'equation string (either explicit or implicitly equal 0)'];
    case 'BadInput2'
        msg = ['2nd input passed to are_equations_the_same must be an ',...
            'equation string (either explicit or implicitly equal 0)'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to are_equations_the_same ',...
            'must be a numeric scalar representing a tolerance for ',...
            'the numerical comparison of the two equations'];
    case 'InevaluableEquations'
        msg = ['MAPS could not numerically evaluate one or both of ',...
            'the equation strings input. That implies that one (or ',...
            'both) of the equations is (are) invalid in MAPS or that ',...
            'the 2nd equation input contains terms additional to the ',...
            '1st equation input.  On attempted numerical evaluation, ',...
            'MATLAB returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ARE ROWS IN STRING ARRAY UNIQUE
function msg = get_are_rows_in_string_array_unique_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['are_rows_in_string_array_unique was not passed the ',...
            'right number of inputs: it requires 1 input, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to are_rows_in_string_array_unique ',...
            'must be a two-dimensional cell string array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% BLOCK ORDER SYSTEM OF EQUATIONS
function msg = get_block_order_system_of_equations_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['block_order_system_of_equations was not passed the ',...
            'right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to block_order_system_of_equations ',...
            'must be a column cell string array of equations'];
    case 'BadInput2'
        msg = ['2nd input passed to block_order_system_of_equations ',...
            'must be a column cell string array of endogenous ',...
            'variables (representing an output assignment set)'];
    case 'EqVarNumberMismatch'
        msg = ['The algorithm to block order the system of equations ',...
            'requires that the number of variables and number of ',...
            'equations be equal so that the system is exactly identified'];
    case 'BadAssignVarIncEntries'
        msg = ['The algorithm to block order the system of equations ',...
            'requires that the endogenous variables represent an ',...
            'output assignment set such that the incidence matrix ',...
            'contains a diagonal of non-zero entries'];
    case 'NonRecursiveEqSystem'
        msg = ['The system of equations is not recursive. The ',...
            'following equations constitute one or more non-recursive ',...
            'blocks:'];
    case 'NonRecursiveEqSystem:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% BUILD IMPULSE RESPONSE IDENTIFIERS
function msg = get_build_impulse_response_identifiers_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['build_impulse_response_identifiers was not passed ',...
            'the right number of inputs: it requires 2 inputs but ',...
            'received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% BUILD NEW DATA
function msg = get_build_new_data_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs received by build_new_data ',...
            'is not right: we expected 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by build_new_data is not as ',...
            'expected: it must be a matrix containing finite numerics'];
    case 'BadInput2'
        msg = ['2nd input received by build_new_data is not as ',...
            'expected: it must be a matrix containing finite numerics'];
    case 'BadInput3'
        msg = ['3rd input received by build_new_data is not as ',...
            'expected: it must be a matrix containing finite numerics'];
    case 'BadInput4'
        msg = ['4th input received by build_new_data is not as ',...
            'expected: it must be a structure with fields '...
            '''anticipated'' and ''unanticipated'''];
    case 'BadShockFields'
        msg = ['The structure ''Shocks'' must contain fields called '...
            '''anticipated'' and/or ''unanticipated'''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% BUILD TWO COLUMN CELL ARRAY OF STRING PAIRS
function msg = get_build_two_column_cell_array_of_string_pairs_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['build_two_column_cell_array_of_string_pairs was not ',...
            'passed the right number of inputs: it requires at least ',...
            '2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'build_two_column_cell_array_of_string_pairs must be a ',...
            'column cell string array'];    
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'build_two_column_cell_array_of_string_pairs must be a ',...
            'column cell string array']; 
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'build_two_column_cell_array_of_string_pairs must be a ',...
            'logical scalar dictating whether or not the output cell ',...
            'of string pairs should be alphabetically sorted or not'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'build_two_column_cell_array_of_string_pairs must be a ',...
            'logical scalar dictating whether or not the output cell ',...
            'of string pairs should be alphabetically sorted by the ',...
            'second of first column (assuming that the alphabetical ',...
            'sort optional input has been set to true)'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CALCULATE EXPECTATIONS
function msg = get_calculate_expectations_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['calculate_expectations was not passed the right ',...
            'number of inputs: it requires 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to calculate_expectations must be a ',...
            'MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to calculate_expectations must be a ',...
            'MAPS formatted forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to calculate_expectations must be a ',...
            'positive numeric scalar representing the hoizon over ',...
            'which expectations should be calculated'];
    case 'BadModelClass'
        msg = ['MAPS model input to calculate_expectations must be of ',...
            'the linear state space class'];
    case 'BadModelSubClass'
        msg = ['MAPS linear state space model input to ',...
            'calculate_expectations must be forward looking'];
    case 'BadRunData'
        msg = ['MAPS could not run the expectations calculation macro ',...
            'because of the following problems with the forecast run ',...
            'dataset input:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CELL ARRAY VLOOKUP
function msg = get_cell_array_vlookup_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['cell_array_vlookup was not passed the right number of ',...
            'inputs: it requires ate least 3 inputs, but receieved ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to cell_array_vlookup must be a row ',...
            'cell string array of strings to lookup'];
    case 'BadInput2'
        msg = ['2nd input passed to cell_array_vlookup must be a two-',...
            'dimensional cell string array of strings to match on a ',...
            'row-wise basis'];
    case 'BadInput3'
        msg = ['3rd varargin input passed to cell_array_vlookup must ',...
            'be a cell array of column cell arrays'];
    case 'Input1InconsistentInput2'
        msg = ['The number of columns in the cell array of strings to ',...
            'find (1st input) must equal the number of columns in the ',...
            'cell array of strings to match (2nd input)'];
    case 'DimsMatchCellInconsistentLookupCell'
        msg = ['The number of rows in each of the vectors in which to ',...
            'lookup data must equal the number of rows in the cell ',...
            'array of strings to match'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHART DECOMPOSITION WITH FORECAST LINE
function msg = get_chart_decomposition_with_forecast_line_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['chart_decomposition_with_forecast_line was not pass the '...
            'right number of inputs: it requires at least 4 but received '...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by chart_decomposition_with_forecast_line '...
            'must be a string denoting the title of the chart.'];
    case 'BadInput2'
        msg = ['2nd input received by chart_decomposition_with_forecast_line '...
            'must be column cell array of strings denoting labels for the bars.'];
    case 'BadInput3'
        msg = ['3rd input received by chart_decomposition_with_forecast_line '...
            'must be a two dimensional matrix (nBars x T) containing the data '...
            'to be plotted.'];
    case 'BadInput4'
        msg = ['4th input received by chart_decomposition_with_forecast_line '...
            'must be a real positive integer denoting the length of the '...
            'forecast horizon.'];
    case 'BadInput5'
        msg = ['Optional 5th input received by chart_decomposition_with_'...
            'forecast_line must be a 1 x T vector including date values '...
            'for the x axis.'];
    case 'BadInput6'
        msg = ['Optional 6th input received by chart_decomposition_with_'...
            'forecast_line must be string indicating how the dates on the '...
            'x axis should be formatted, e.g. QQ-YY.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHART FAN FROM SAMPLE OF DATA
function msg = get_chart_fan_from_sample_of_data_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['chart_fan_from_sample_of_data was not passed the ',...
            'right number of inputs: it requires at least 2 inputs ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by chart_fan_from_sample_of_data ',...
            'must be a string to use as the chart title (it can be ',...
            'an empty string)'];
    case 'BadInput2'
        msg = ['2nd input received by chart_fan_from_sample_of_data ',...
            'must be a finite real three dimensional numeric of ',...
            'sampled data'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'chart_fan_from_sample_of_data must be a finite, real ',...
            'numeric row vector of data to add as a line to the fan ',...
            'chart and it must have the same number of columns as the ',...
            'sample of data input or it must be empty'];
    case 'BadInput4'
        msg = ['Optional 4th input received by ',...
            'chart_fan_from_sample_of_data must be a numeric column ',...
            'vector of RGB triplets (i.e. a 3 x 1 vector containing ',...
            'numerics in the (0,1) range)'];
    case 'BadInput5'    
        msg = ['Optional 5th input received by ',...
            'chart_fan_from_sample_of_data must be a positive real ',...
            'numeric scalar taking a value no greater than 50 and ',...
            'repesenting the percentage point increment in the fan chart'];
    case 'BadInput6'
        msg = ['Optional 6th input received by ',...
            'chart_fan_from_sample_of_data must be a positive real ',...
            'numeric row vector containing date values for the x axis.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHART SERIES COMPONENT
function msg = get_ChartSeriesComponent_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The constructor method for ChartSeriesComponent requires '...
            'one input, but only received ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['The first input passed to the constructor method for '...
            'ChartSeriesComponent must be a column vector of figure '...
            'handles.'];
    case 'BadFigHandle'
        msg = ['One or more of the figure handles provided in the first '...
            'input to the constructor method for ChartSeriesComponent was'...
            ' not a valid figure handle.'];
    case 'AddToBadNargin'
        msg = ['The AddTo method for ChartSeriesComponent requires one '...
            'input (beyond the Chart Series component itself). It only '...
            'received ',errArgs{1}];
    case 'AddToBadInput1'
        msg = ['The first input passed to the AddTo method for '...
            'ChartSeriesComponent must be of the ReportBuilder class '...
            '(the report to which to add the chart component).'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHART PERCENTILES AS FAN
function msg = get_chart_percentiles_as_fan_error(errCode,errArgs)          %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['chart_percentiles_as_fan was not passed the right ',...
            'number of inputs: it requires at least 2 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by chart_percentiles_as_fan must be '...
            'a string to use as the chart title (it can be an empty ',...
            'string)'];
    case 'BadInput2'
        msg = ['2nd input received by chart_percentiles_as_fan must be '...
            'a finite real three dimensional numeric of area lines to ',...
            'chart with a single row (dimensions should be ',...
            '1*nObservations*nPercentiles)'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'chart_percentiles_as_fan must be a numeric column vector ',...
            'of RGB triplets (i.e. a 3 x 1 vector containing numerics ',...
            'in the (0,1) range)'];
    case 'BadInput4'
        msg = ['Optional 4th input received by ',...
            'chart_percentiles_as_fan must be a row vector of labels ',...
            'to display on the x-axis and must have the same number ',...
            'of elements as the number of observations in the area ',...
            'lines input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHART SIMULATION DISTRIBUTION KERNEL
function msg = get_chart_simulation_distribution_kernel_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['chart_simulation_distribution_kernel was not passed the right ',...
            'number of inputs: it requires at least 4 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by chart_simulation_distribution_kernel'...
            ' must be a string to use as the chart title.'];
    case 'BadInput2'
        msg = ['2nd input received by chart_simulation_distribution_kernel'...
            ' must be a column vector of parameter draw scalars.'];
    case 'BadInput3'
        msg = ['3rd input received by chart_simulation_distribution_kernel'...
            ' must be a matrix with two columns representing points on'...
            ' the kernel density curve.'];
    case 'BadInput4'
        msg = ['4th input received by chart_simulation_distribution_kernel'...
            ' must be a scalar representing the kernel density mode.'];
    case 'BadInput5'
        msg = ['5th input received by chart_simulation_distribution_kernel'...
            ' must be a matrix with two columns, representing'...
            ' x,y pairs of values on the prior distribution curve.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK DECOMP ADD ON FILE SYNTAX
function msg = get_check_decomp_add_on_file_syntax_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_decomp_add_on_file_syntax was not passed the ',...
            'right number of inputs: it requires 5 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_decomp_add_on_file_syntax ',...
            'must be a structure of parsed decomp add-on file content'];
    case 'BadInput2'
        msg = ['2nd input received by check_decomp_add_on_file_syntax ',...
            'must be a structure of line numbers corresponding to the ',...
            'parsed decomp add-on file content'];
    case 'BadInput3'
        msg = ['3rd input received by check_decomp_add_on_file_syntax ',...
            'must be a structure of keywords corresponding to the ',...
            'parsed decomp add-on file content'];
    case 'BadInput4'
        msg = ['4th input received by check_decomp_add_on_file_syntax ',...
            'must be an exception to add syntax error causes to'];
    case 'BadInput5'
        msg = ['5th input received by check_decomp_add_on_file_syntax ',...
            'must be a MAPS linear state space model structure'];
    case 'MetadataOverlap'
        msg = ['Metadata in the decomposition add-on file should not ',...
            'overlap with related metadata in the model (regardless of ',...
            'case) to which the decompositions are being added (to ',...
            'avoid conflicts in the creation of the add-on and ',...
            'execution of decomps):'];
    case 'MetadataOverlap:Instance'
        msg = [errArgs{1},' found under ''',errArgs{2},''' should not ',...
            'overlap with ', errArgs{3},' in the model. MAPS found ',...
            'the following exceptions'];
    case 'MetadataOverlap:Instance:Instance'
        msg = ['''',errArgs{1},''' on line number ',errArgs{2}];
    case 'NewModelVariableDefSyntaxErrors'
        msg = ['Definitions for new model variables to be used in ',...
            'decompositions must be valid expressions containing ',...
            'only model variables, shocks, parameters, steady state ',...
            '& parameter transformations (all from the model in which ',...
            'the decomposition add-on is being attached to) and valid ',...
            'mathematical operators, symbols & numbers. MAPS found ',...
            'the following exceptions under ''',errArgs{1},''':'];
    case 'NewModelEquationSyntaxErrors'
        msg = ['New model equations for decompositions must be valid ',...
            'equations containing only model variables, shocks, ',...
            'parameters, steady state & parameter transformations ',...
            '(all from the model in which the decomposition add-on is ',...
            'being attached to), new model variables defined for ',...
            'decompositions and valid mathematical operators, symbols ',...
            '& numbers. MAPS found the following exceptions under ''',...
            errArgs{1},''':'];
    case 'BadDecompGroups'
        msg = ['Decomposition group definition strings must be of ',...
            'the following form: ''[component1;component2;etc]'' ',...
            'where component1 etc are the shocks and model variables ',...
            'to group together in a decomposition appended with the ',...
            'relevant time subscripts (''{t}'' for shocks & ',...
            '''{t-1}'', ''{t}'' or ''{t+1}'' for model variables) ',...
            'or the shock-based decomposition ',...
            'component convention of ''sum(shock1)'' etc. MAPS found ',...
            'the following syntax errors under ',errArgs{1},':'];
    case 'BadDecompGroups:Instance'
        msg = ['''',errArgs{1},''' on line number ',errArgs{2},' is ',...
            'invalid for the following reason(s):'];
    case 'BadNestedDecomps'
        msg = ['Nested decomposition definition strings must be of ',...
            'the following form: ',...
            '''var{t}|methodStr[<nestedInstr1>;<nestedInstr2>]'' ',...
            'where var{t} is the variable to decompose, methodStr is ',...
            'the method to decompose it by & nestedInstr1 etc are ',...
            'instructions to substitute out a variable using another ',...
            'method (eg equation) up to an arbitrary level of ',...
            'nesting. MAPS found the following syntax errors under ',...
            errArgs{1},':'];
    case 'BadNestedDecomps:Instance'
        msg = ['''',errArgs{1},''' on line number ',errArgs{2},' is ',...
            'invalid for the following reason(s):'];
    case 'BadUseOfGroupingInNestedDecom'
        msg = ['Nested decomposition instructions must not include ',...
            'grouping instructions'];
    case 'BadGroupedDecomps'
        msg = ['Grouped decomposition definition strings must be of ',...
            'the following form: ',...
            '''var{t}|methodStr:[<groupInstr1>;<groupInstr1>]'' ',...
            'where var{t} is the variable to decompose, methodStr is ',...
            'the method to decompose it by & groupInstr1 etc are ',...
            'groups to apply. MAPS found the following syntax errors ',...
            'under ',errArgs{1},':'];
    case 'BadGroupedDecomps:Instance'
        msg = ['''',errArgs{1},''' on line number ',errArgs{2},' is ',...
            'invalid for the following reason(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK EQUATION IS VALID
function msg = get_check_equation_is_valid_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_equation_is_valid was not passed thr right ',...
            'number of inputs: it requires 1 input but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_equation_is_valid must be ',...
            'a string representing an equation'];
    case 'BadInput2'
        msg = ['Optional 2nd input received by ',...
            'check_equation_is_valid must be a boolean scalar ',...
            'describing whether the equation string input is explicit ',...
            '(true) or implicit (false)'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'check_equation_is_valid must be an exception'];
    case 'InvalidEquation'
        msg = ['The input equation is not a valid equation for the ',...
            'following reason(s):'];
    case 'WrongNumberOfEqualSignsExplicit'
        msg = ['The equation should contain one and only one ',...
            '''='' symbol, but it contains ',errArgs{1},' equal symbols'];
    case 'WrongNumberOfEqualSignsImplicit'
        msg = ['The equation is specified as being implicit (i.e. ',...
            'an expression) so should not contain an ''='' symbol, ',...
            'but it contains ',errArgs{1},' equal symbols'];
    case 'UnexpectedTerm'
        invalidSymbolStr = create_comma_separated_list(errArgs);
        msg = ['The following terms in the equation are not valid in ',...
            'MATLAB: ''',invalidSymbolStr,''''];
    case 'InevaluableEquation'
        msg = ['The equation is not a valid, executable MATLAB ',...
            'expression. MATLAB returned the following error on ',...
            'attempted evaluation of the equation:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK ESTIMATION INFORMATION FILE SYNTAX
function msg = get_check_estimation_info_file_syntax_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_estimation_info_file_syntax was not passed ',...
            'the right number of inputs: it requires 5 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'check_estimation_info_file_syntax must be a structure of ',...
            'parsed estimation info file content'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_estimation_info_file_syntax must be a structure of ',...
            'line numbers corresponding to the parsed estimation info ',...
            'file content'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'check_estimation_info_file_syntax must be a structure of ',...
            'keywords corresponding to the parsed estimation info ',...
            'file content'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'check_estimation_info_file_syntax must be an exception ',...
            'to add syntax error causes to'];
    case 'BadInput5'
        msg = ['5th input received by ',...
            'check_estimation_info_file_syntax must be a MAPS linear ',...
            'state space model structure'];
    case 'ParameterNonOverlapE'
        msg = ['The following parameters specified under ''',errArgs{1},...
            ''' in the estimation info file could not be found in the ',...
            'associated LSS model'];
    case 'ParameterNonOverlapE:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2}];
    case 'InvalidDistrE'
        msg = ['Prior distributions sepcified in the estimation info ',...
            'file under ''',errArgs{1},''' must be from the valid set ',...
            'of prior distributions in the MAPS estimation toolkit of ',...
            errArgs{2},'. The following distributions are invalid:'];
    case 'InvalidDistrE:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2}];
    case 'InvalidParamBoundsE'
        msg = ['One or more of the parameter bounds specified in the ',...
            'estimation info file under ''',errArgs{1},''' is invalid:'];
    case 'InvalidParamBoundsE:Instance'
        msg = ['The lower bounds must be strictly smaller than the ',...
            'upper bounds. MAPS found exceptions on the following ',...
            'lines:'];
    case 'InvalidParamBoundsE:Instance:Instance'        
        msg = errArgs{1};
    case 'InvalidStdE'
        msg = ['Standard deviations must be strictly positive.  MAPS ',...
            'found exceptions on the following lines:'];
    case 'InvalidStdE:Instance'
        msg = errArgs{1};     
    case 'InvalidBetaParamsE'
        msg = ['Mean, standard deviation and bound parameters for the ',...
            'beta distribution specified under ',errArgs{1},' must be ',...
            'valid. MAPS found the following exceptions:'];
    case 'InvalidBetaParamsE:BadMean'
        msg = ['beta distribution means must lie in the unit ',...
            'interval. MAPS found exceptions on the following lines:'];
    case 'InvalidBetaParamsE:BadMean:Instance'
        msg = errArgs{1};
    case 'InvalidBetaParamsE:BadLB'
        msg = ['beta distribution lower bounds must lie in the unit ',...
            'interval. MAPS found exceptions on the following lines:'];
    case 'InvalidBetaParamsE:BadLB:Instance'
        msg = errArgs{1};
    case 'InvalidBetaParamsE:BadUB'
        msg = ['beta distribution upper bounds must lie in the unit ',...
            'interval. MAPS found exceptions on the following lines:'];
    case 'InvalidBetaParamsE:BadUB:Instance'
        msg = errArgs{1};  
    case 'InvalidGammaParamsE'
        msg = ['Mean, standard deviation and bound parameters for the ',...
            'gamma & inverse gamma distributions specified under ',...
            errArgs{1},' must be valid. MAPS found the following ',...
            'exceptions:']; 
    case 'InvalidGammaParamsE:BadMean'
        msg = ['gamma and inverse gamma distribution means must be ',...
            'strictly positive. MAPS found exceptions on the ',...
            'following lines:'];
    case 'InvalidGammaParamsE:BadMean:Instance'  
        msg = errArgs{1}; 
    case 'InvalidGammaParamsE:BadLB'
        msg = ['gamma and inverse gamma distribution lower bounds ',...
            'must be strictly positive. MAPS found exceptions on the ',...
            'following lines:'];
    case 'InvalidGammaParamsE:BadLB:Instance'  
        msg = errArgs{1};  
    case 'InvalidGammaParamsE:BadUB'
        msg = ['gamma and inverse gamma distribution upper bounds ',...
            'must be strictly positive. MAPS found exceptions on the ',...
            'following lines:'];
    case 'InvalidGammaParamsE:BadUB:Instance'  
        msg = errArgs{1};  
    case 'InvalidNormalParamsE'
        msg = ['Standard deviation parameters for normal ',...
            'distributions specified under ',errArgs{1},' must be ',...
            'valid. MAPS found the following exceptions:'];   
    case 'InvalidUniformParamsE'
        msg = ['Support and bound parameters for the uniform ',...
            'distributions specified under ',errArgs{1},' must be '...
            'valid. MAPS found the following exceptions:']; 
    case 'InvalidUniformParamsE:InvalidSupport'
        msg = ['Uniform distribution support parameters must be valid ',...
            'with the lower support being strictly smaller than the ',...
            'upper support. MAPS found exceptions on the following ',...
            'lines:'];
    case 'InvalidUniformParamsE:InvalidSupport:Instance'  
        msg = errArgs{1}; 
    case 'InvalidUniformParamsE:InvalidLowerBound'
        msg = ['Optional lower bound parameters specified for uniform ',...
            'distribution priors must be strictly larger than the ',...
            'lower support (otherwise they are superfluous and should ',...
            'be removed from the info file). MAPS found exceptions on ',...
            'the following lines:'];
    case 'InvalidUniformParamsE:InvalidLowerBound:Instance'
        msg = errArgs{1};
    case 'InvalidUniformParamsE:InvalidUpperBound'
        msg = ['Optional upper bound parameters specified for uniform ',...
            'distribution priors must be strictly smaller than the ',...
            'upper support (otherwise they are superfluous and should ',...
            'be removed from the info file). MAPS found exceptions on ',...
            'the following lines:'];
    case 'InvalidUniformParamsE:InvalidUpperBound:Instance'
        msg = errArgs{1};    
    case 'UnexpectedFileFormat'
        msg = ['MAPS'' estimation info file validation expects ',...
            'parameter lower and upper bounds to appear on the same ',...
            'lines in estimation info files. An unexpected file ',...
            'format was enountered which breaks the logic of MAPS'' ',...
            'bound validation. Please carefully check file format, ',...
            'configs and validation code.'];
    case 'InvalidOptimAndSimOptions'
        msg = ['The joint optimisation and simulation options ',...
            'specified in the info file under ''',errArgs{1},''' are ',...
            'invalid for the following reason(s):'];
    case 'InvalidOptimInputs'
        msg = ['The optimisation inputs specified in the info file ',...
            'under ''',errArgs{1},''' are invalid for the following ',...
            'reason(s):'];      
    case 'InvalidSimInputs'
        msg = ['The simulation inputs specified in the info file ',...
            'under ''',errArgs{1},''' are invalid for the following ',...
            'reason(s):'];         
    case 'UnknownInputNames'
        validInputNames = create_comma_separated_list(errArgs);
        msg = ['The specified input names must be one of: ',...
            validInputNames,'. MAPS'' validation found the following ',...
            'exceptions:']; 
    case 'UnknownInputNames:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2}];
    case 'MissingInputNames'
        msg = ['The set of inputs in the info file is incomplete. ',...
            'Information about the following inputs is missing ',...
            'from the info file:']; 
    case 'MissingInputNames:Instance'
        msg = ['''',errArgs{1},''''];        
    case 'BadInputSource'
        validSourceNames = create_comma_separated_list(errArgs{4});
        msg = ['The source ''',errArgs{1},''' specified for the ',...
            'input ''',errArgs{2},''' specified on line ',errArgs{3},...
            ' is invalid. The following are valid sources for that ',...
            'input: ',validSourceNames];   
    case 'SourceParamsShouldNotExist'
        msg = ['The input source ''',errArgs{1},''' specified on line ',...
            errArgs{2},' should not have parameters associated with ',...
            'it. Please remove the parameter(s) and check that the ',...
            'specified source is correct'];     
    case 'MissingFileVarParam'
        msg = ['The input source ''',errArgs{1},''' specified on line ',...
            errArgs{2},' requires 2 parameters; one describing the ',...
            'file name and one describing the variable name within ',...
            'the file']; 
    case 'BadMatLoadInstruction'
        msg = ['The input on line ',errArgs{1},' specifies a load ',...
            'from mat file instruction, but the instruction is ',...
            'invalid for the following reason. Please make sure that ',...
            'the file name includes a .mat extension, that the file ',...
            'exists on the search path (specifying a full path name ',...
            'if necessary), and that the variable exists within the ',...
            'mat file'];
    case 'MissingFileSheetParam'
        msg = ['The input source ''',errArgs{1},''' specified on line ',...
            errArgs{2},' requires 2 parameters; one describing the ',...
            'file name and one describing the sheet name in the file']; 
    case 'BadExcelLoadInstruction'
        msg = ['The input on line ',errArgs{1},' specifies a load ',...
            'from Excel instruction, but the instruction is ',...
            'invalid for the following reason. Please make sure that ',...
            'the file name includes a .xlsx extension, that the file ',...
            'exists on the search path (specifying a full path name ',...
            'if necessary), and that the sheet exists in the Excel file'];        
    case 'NoOptimisationForSimInput'
        msg = ['The input source ''',errArgs{1},''' specified on line ',...
            errArgs{2},' is invalid because it requires a posterior ',...
            'optimisation to have been completed, yet no inputs have ',...
            'been provided for posterior optimisation so it cannot be ',...
            'run'];   
    case 'WrongNumberOfParamsForGetFromPriors'
        msg = ['The input source ''',errArgs{1},''' specified on line ',...
            errArgs{2},' is not formatted correctly. You must supply ',...
            '1 (and only 1 parameter) to go with the ',errArgs{1},...
            ' instruction detailing the type of prior statistic to ',...
            'use (eg ''mean'')']; 
    case 'InvalidStatTypeFromPriorsOption'
        msg = ['The option ''',errArgs{1},''' specified on line ',...
            errArgs{2},' for the statistic to use to initialise the ',...
            'parameter vector from the priors must be one of the ',...
            'following: ',create_comma_separated_list(errArgs{3})];      
    case 'WrongNumberOfParamsForHess'
        msg = ['The input source ''',errArgs{1},''' specified on line ',...
            errArgs{2},' is not formatted correctly. You must supply ',...
            '1 (and only 1 parameter) to go with the ',errArgs{1},...
            ' instruction detailing whether or not to take a second-',...
            'order approximation'];   
    case 'InvalidNumericalInvHessOption'
        msg = ['The option ''',errArgs{1},''' specified on line ',...
            errArgs{2},' for the order of computation for the inverse ',...
            'Hessian is invalid. It must be one of the following: ',...
            create_comma_separated_list(errArgs{3})];          
    case 'InvalidOptimOptions'
        msg = ['The optimisation options specified in the info file ',...
            'under ''',errArgs{1},''' are invalid for the following ',...
            'reason(s):'];
    case 'InvalidSimOptions'
        msg = ['The simulation options specified in the info file ',...
            'under ''',errArgs{1},''' are invalid for the following ',...
            'reason(s):'];    
    case 'MissingRoutineNameOption'
        msg = ['One or more of the options provided are associated ',...
            'with a specific routine, but the name of the routine to ',...
            'use was not provided so MAPS cannot proceed - please ',...
            'check the options specified carefully and add a routine ',...
            'name as appropriate'];
    case 'MultipleRoutineNameOptions'
        msg = ['One or more of the options provided are associated ',...
            'with a specific routine, but more than one option was ',...
            'specified that names the routine to use. This is quite ',...
            'a strange thing to do, please remove one of the ',...
            'superfluous routine names'];
    case 'BadRoutineNameOption'
        msg = ['One or more of the options provided are associated ',...
            'with a specific routine (i.e. a particular optimisation ',...
            'or simulation routine to use), but the routine ''',....
            errArgs{1},''' specified on line ',errArgs{2},' is not a ',...
            'valid routine in MAPS. You must choose from one of the ',...
            'following: ',create_comma_separated_list(errArgs{3})];
    case 'BadOptionNames'        
        msg = ['One or more of the specified option names were not ',...
            'among the valid set of options (given the routine ',...
            'chosen) - see the MAPS user guide for details of valid ',...
            'options']; 
    case 'BadOptionNames:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2}]; 
    case 'BadOptionDataTypes'
        msg = ['One or more of the specified options was not of the ',...
            'expected data type - see the MAPS user guide for ',...
            'details of valid options and their data types']; 
    case 'BadOptionDataTypes:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' with ',...
            'MAPS'' string conversion function returning the ',...
            'following error - please carefully check the format of ',...
            'the line against the expected format in the config:'];     
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK FIELD NAMES IN STRUCTURE
function msg = get_check_field_names_in_structure_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_field_names_in_structure was not passed the ',...
            'right number of inputs: it requires 3 or 4 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_field_names_in_structure ',...
            'must be a structure whose fields are to be checked'];        
    case 'BadInput2'
        msg = ['2nd input received by check_field_names_in_structure ',...
            'must be a string description for the structure being ',...
            'checked (to provide some context for the error handling)']; 
    case 'BadInput3'
        msg = ['3rd input received by check_field_names_in_structure ',...
            'must be a string, column or row cell string array of ',...
            'field names that must exist within the structure'];
    case 'BadInput4'
        msg = ['Optional 4th input received by ',...
            'check_field_names_in_structure ',...
            'must be a string, column or row cell string array of ',...
            'field names that may optionally exist within the structure'];
    case 'NoFieldsToCheck'
        msg = ['MAPS cannot check the structure field names because ',...
            'there were no optional field names passed in and the ',...
            'compulsory fields input was empty, suggesting that the ',...
            'input structure should have no fields. If that is the ',...
            'case, then you can check the structure''s validity using ',...
            'an isempty test on the field names of the structure. If ',...
            'not, please check and amend the inputs in the call to ',...
            'this function.'];
    case 'InvalidInputFieldNames'
        msg = ['The set of compulsory and/or optional field names ',...
            'passed into this function to check against the field ',...
            'names of the input structure are invalid because they ',...
            'do not constitute a unique set. The following were ',...
            'repeated at least once:']; 
    case 'InvalidInputFieldNames:Instance'
        msg = errArgs{1};        
    case 'MissingCompulsoryFields'
        msg = [errArgs{1},' is missing the following compulsory fields:'];
    case 'MissingCompulsoryFields:Instance'
        msg = errArgs{1};
    case 'UnknownFields'
        msg = [errArgs{1},' contains the following unexpected fields:'];
    case 'UnknownFields:Instance'
        msg = errArgs{1};        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK FILE EXISTS
function msg = get_check_file_exists_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_file_exists was not passed the right number of ',...
            'inputs: it requires 1 or 2 inputs but received ',errArgs{1}];
    case 'NonExistentFile'
        msg = ['The file name ''',errArgs{1},''' does not exist on ',...
            'the search path - please check the name of the file and ',...
            'the open MATLAB paths'];      
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK FILE NAME IS VALID
function msg = get_check_file_name_is_valid_error(errCode,errArgs)          %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_file_name_is_valid was not passed the right ',...
            'number of inputs: it requires 1 or 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_file_name_is_valid must ',...
            'be a string representing the name of the file to check'];
    case 'BadInput2'
        msg = ['2nd optional input received by ',...
            'check_file_name_is_valid must be a string representing ',...
            'the expected extension of the file to find'];
    case 'BadlySpecifiedExpectedExtension'
        msg = ['The expected file extension input ''',errArgs{1},''' ',...
            'is badly specified: any valid file extension must be an ',...
            'uninterrupted sequence of alphabetic charaters or a ',...
            '''.'' delimiter followed by an uninterrupted sequence of ',...
            'alphabetic charaters'];   
    case 'BadDirectory'
        msg = ['The directory part of the file name (inferred as all ',...
            'characters up to and including the final ''\'' delimiter ',...
            'that could be found in the input file name string - in ',...
            'this case ''',errArgs{1},''') is not a valid directory ',...
            'as determined by the MATLAB ''isdir'' command']; 
    case 'BadFileName'
        msg = ['The file name extracted from the full path file name ',...
            '(inferred as all characters following the final ''\'' ',...
            'delimiter and preceding the final ''.'' delimiter - in ',...
            'this case ''',errArgs{1},''') is not a valid file name ',...
            'because it contained 1 or more of the following illegal ',...
            'characters: ',create_comma_separated_list(errArgs{2})];
    case 'BadFileExtension'
        msg = ['The extension part of the file name (inferred as all ',...
            'characters including and following the final ''.'' ',...
            'delimiter that could be found in the input file name ',...
            'string - in this case ''',errArgs{1},''') is is invalid: ',...
            'any valid file extension must be a ''.'' delimiter ',...
            'followed by an uninterrupted sequence of alphabetic ',...
            'charaters'];         
    case 'FileExtensionMismatch'
        msg = ['The extension part of the file name (inferred as all ',...
            'characters including and following the final ''.'' ',...
            'delimiter that could be found in the input file name ',...
            'string - in this case ''',errArgs{1},''') did not match ',...
            'the expected file extension input of ''',errArgs{2},''''];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK FOR VAR UNIQUENESS ACROSS MODEL FILE EQUATIONS
function msg = ...
    get_check_for_var_uniqueness_across_model_file_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_for_var_uniqueness_across_model_file_equations ',...
            'was not passed the right number of inputs: it requires 4 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'check_for_var_uniqueness_across_model_file_equations ',...
            'must be an exception to add file syntax causes to'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_for_var_uniqueness_across_model_file_equations ',...
            'must be a structure containing the parsed contents of ',...
            'the model file'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'check_for_var_uniqueness_across_model_file_equations ',...
            'must be a structure containing the model file line ',...
            'numbers associated with all the parsed contents of the ',...
            'model file'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'check_for_var_uniqueness_across_model_file_equations ',...
            'must be a row cell array with three pieces of ',...
            'configuration information for the check, describing ',...
            'which equations and variables to cross-check and the ',...
            'side of the equation on which to check them'];
    case 'NoVarsInEq'
        msg = ['The equation on line number ',errArgs{1},' contains ',...
            'no variable of that type'];
    case 'TooManyVarsInEq'
        msg = ['The equation on line number ',errArgs{1},' contains ',...
            'too many variables of that type: ''',errArgs{2},''''];
    case 'BadUseOfVarAcrossEqs'
        msg = ['The equations on line numbers ',errArgs{1},' contain ',...
            'the same variable: ''',errArgs{2},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK IF MODEL COMPONENT EXISTS
function msg = get_check_if_model_component_exists_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_if_model_part_exists was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_if_model_part_exists'...
            ' must be a standard MAPS LSS model object with constructors'...
            ' to allow the model to be unpacked.'];
    case 'BadInput2'
        msg = ['2nd input received by check_if_model_part_exists'...
            ' must be a string representing the model part to check for.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK INPUTS FOR MODEL PROPERTIES MDE MACROS
function msg = get_check_inputs_for_model_properties_MDE_macros_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_inputs_for_model_properties_MDE_macros was not ',...
            'passed the right number of inputs: it requires 5 or 6 ',...
            'inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by MAPS model properties MDE ',...
            'macros must be a MAPS LSS model structure'];
    case 'BadInput2'
        msg = ['2nd input received by MAPS model properties MDE ',...
            'macros must be a structure containing information about ',...
            'the parameters to be estimated including mnemonics, ',...
            'lower and upper bounds'];
    case 'BadInput3'
        msg = ['3rd input received by MAPS model properties MDE ',...
            'macros must be a finite numeric column vector of ',...
            'initialisation valuesfor the parameters to be estimated ',...
            'in the MDE'];
    case 'BadInput4'
        msg = ['4th input received by MAPS model properties MDE ',...
            'macros must be a finite real two-dimensional matrix of ',...
            'target values for the model properties in the MDE'];  
    case 'BadInput5'
        msg = ['5th input received by MAPS model properties MDE ',...
            'macros must be a finite real two-dimensional matrix ',...
            'of strictly positive weights to apply to deviation from ',...
            'the targets'];
    case 'BadInput6'
        msg = ['6th input received by MAPS model properties MDE ',...
            'macros must be a two-dimensional cell string array ',...
            'identifying which responses to target in the MDE (or, ',...
            'optionally, a single string if a single string is ',...
            'sufficient for identification and only a single ',...
            'response is being targeted)'];  
    case 'BadParamMnems'
        msg = ['The mnemonics field of the estimation parameters info ',...
            'structure must contain a column cell string array of ',...
            'string mnemonics for the parameters to be estimated in ',...
            'the MDE (or, optionally, a single string mnemonic if ',...
            'only one parameters is being estimated)'];
    case 'BadParamLowerBounds'
        msg = ['The lower bounds field of the estimation parameters ',...
            'info structure must contain a real column vector of ',...
            'numeric lower bounds for the parameters to be estimated ',...
            'in the MDE'];   
    case 'BadParamUpperBounds'
        msg = ['The upper bounds field of the estimation parameters ',...
            'info structure must contain a real column vector of ',...
            'numeric upper bounds for the parameters to be estimated ',...
            'in the MDE'];           
    case 'InconsistentMnemsInitDims'
        msg = ['The dimension of the vector of initial values for the ',...
            'parameters in the MDE must be the same as the array of ',...
            'mnemonics for the parameters in the MDE'];
    case 'InconsistentBoundDims'
        msg = ['The dimension of the vector of lower bounds for the ',...
            'parameters in the MDE must be the same as the vector of ',...
            'upper bounds'];    
    case 'InconsistentBoundInitDims'
        msg = ['The dimension of the vector of bounds for the ',...
            'parameters in the MDE must be the same as the vector of ',...
            'initial values'];
    case 'InconsistentTargetWeightDims'
        msg = ['The dimension of the matrix of targets for the model ',...
            'properties in the MDE must be the same as the matrix of ',...
            'weights to apply to deviation from the targets'];
    case 'InconsistentTargetIdentifierDims'
        msg = ['The number of rows in the array of numerics for the ',...
            'targets must be the same as the number of variables ',...
            'being targeted in the cell string array of mnemonics input'];    
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% CHECK LSS MODEL FILE SYNTAX
function msg = get_check_LSS_model_file_syntax_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_LSS_model_file_syntax was not passed the right ',...
            'number of inputs: it requires 4 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_LSS_model_file_syntax ',...
            'must be a structure containing the parsed contents of ',...
            'the model file'];
    case 'BadInput2'
        msg = ['2nd input received by check_LSS_model_file_syntax ',...
            'must be a structure containing the model file keywords ',...
            'associated with the parsed contents of the model file'];
    case 'BadInput3'
        msg = ['3rd input received by check_LSS_model_file_syntax ',...
            'must be a structure containing the model file line ',...
            'numbers associated with all the parsed contents of the ',...
            'model file'];
    case 'BadInput4'
        msg = ['4th input received by check_LSS_model_file_syntax ',...
            'must be an exception to add file syntax causes to'];
    case 'ContentConditionError'
        msg = ['MAPS found the following content condition errors. ',...
            'It is very likely that these errors will also show up in ',...
            'other syntax errors'];
    case 'ContentConditionError:Instance'
        msg = ['If ',errArgs{1},' are specified under ',errArgs{2},', ',...
            'then ',errArgs{3},' must also be specified under ',...
            errArgs{4}];
    case 'NumbersConditionError'
        msg = ['MAPS found the following inonsistencies in the ',...
            'numbers of various model comonents. It is very likely ',...
            'that these inconsistencies will also show up in other ',...
            'syntax errors'];
    case 'NumbersConditionError:Instance'
        msg = ['The number of ',errArgs{1},' specified under ',...
            errArgs{2},' must ',errArgs{3},' the number of ',...
            errArgs{4},' specified under ',errArgs{5}];
    case 'ModelEquationSyntaxErrors'
        msg = ['Model equations must be valid equations containing ',...
            'only model variables, shocks, parameters, steady state ',...
            '& parameter transformations and valid mathematical ',...
            'operators, symbols & numbers. MAPS found the following ',...
            'exceptions under ''',errArgs{1},''':'];
    case 'MeasurementEquationSyntaxErrors'
        msg = ['Measurement equations must be valid equations ',...
            'containing only model variables, model observables, ',...
            'measurement errors, parameters, steady state & parameter ',...
            'transformations and valid mathematical operators, ',...
            'symbols & numbers. In addition, the complete set of ',...
            'model observables must be identified uniquely across the ',...
            'LHS''s of the equations and model variables must be ',...
            'identified uniquely across the RHS''s of the equations. ',...
            'MAPS found the following exceptions under ''',...
            errArgs{1},''':'];
    case 'MeasurementEquationSyntaxErrors:NonUniqueModObsErrors'
        msg = ['Measurement equations must uniquely identify the set ',...
            'of model observables on their LHS''. MAPS found the ',...
            'following exceptions:'];
    case 'MeasurementEquationSyntaxErrors:NonUniqueModVarErrors'
        msg = ['Measurement equations must contain one and only one ',...
            'model variable on their RHS'' and there must be no ',...
            'repetition of model variables across the set of ',...
            'measurement equations. This ensures that forecast ',...
            'judgements can be imposed directly on to model ',...
            'observables because each model observable uniquely ',...
            'identifies a model variable. MAPS found the following ',...
            'exceptions:'];
    case 'DataTransformationSyntaxErrors'
        msg = ['Data transformations must be valid expressions ',...
            'containing only raw observables, valid mathematical ',...
            'operators (and a ''diff'' operator), symbols & ',...
            'numbers. In addition, the complete set of raw ',...
            'observables must be identified uniquely across the data ',...
            'transformations. MAPS found the following exceptions ',...
            'under ''',errArgs{1},''':'];
    case 'DataTransformationSyntaxErrors:NonUniqueRawObsErrors'
        msg = ['Data transformations must uniquely identify the set ',...
            'of raw observables. This ensures that forecast ',...
            'judgements can be imposed directly on to raw observables ',...
            'because each raw observable uniquely identifies a model ',...
            'observable. MAPS found the following exceptions:'];
    case 'TooManyDiffOperators'
        msg = ['The ''diff'' operator is used more than once in ''',...
            errArgs{1},''' on line number ',errArgs{2}];
    case 'SteadyStateDefinitionSyntaxErrors'
        msg = ['Steady states & parameter transformations must be ',...
            'valid expressions containing only steady states, ',...
            'parameters, valid mathematical operators, symbols & ',...
            'numbers. MAPS found the following exceptions under ''',...
            errArgs{1},''':'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK MAPS MODEL FILE METADATA SYNTAX
function msg = get_check_MAPS_model_file_metadata_syntax_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_MAPS_model_file_metadata_syntax was not passed ',...
            'the right number of inputs: it requires 5 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'check_MAPS_model_file_metadata_syntax must be an ',...
            'exception to add file syntax causes to'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_MAPS_model_file_metadata_syntax must be a ',...
            'structure containing the parsed contents of the model ',...
            'file'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'check_MAPS_model_file_metadata_syntax must be a ',...
            'structure containing the model file keywords associated ',...
            'with the parsed contents of the model file'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'check_MAPS_model_file_metadata_syntax must be a ',...
            'structure containing the model file line numbers ',...
            'associated with all the parsed contents of the model file'];
    case 'BadInput5'
        msg = ['5th input received by ',...
            'check_MAPS_model_file_metadata_syntax must be a ',...
            'cell array of configuration information for the metadata ',...
            'syntax checking, describing which syntax checks to run ',...
            'and which parts of the model file syntax to check'];
    case 'MnemsNotUnique'
        msg = ['David Bradnum says: ''Don''t repeat yourself!''. All ',...
            'variable & parameter mnemonics must be unique ',...
            '(regardless of case)'];
    case 'MnemsNotUnique:Instance'
        msg = ['''',errArgs{1},''' was repeated on lines ',errArgs{2}];
    case 'MnemsNotUsed'
        msg = ['All variable & parameter mnemonics must be used ',...
            'in at least one equation'];
    case 'MnemsNotUsed:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'MnemsNotContinuous'
        msg = ['Variable & parameter mnemonics must be continuous ',...
            'expressions with no white/blank space characters'];
    case 'MnemsNotContinuous:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'MnemsTooLong'
        msg = ['Owing to FAME naming conventions, variable mnemonic ',...
            'strings must not exceed ',errArgs{1},' characters in length'];
    case 'MnemsTooLong:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'BannedMnems'
        bannedSymbols = create_comma_separated_list(errArgs);
        msg = ['In part owing to over zealous business analysis, the ',...
            'following symbols are reserved in MAPS & cannot be used ',...
            'as variable or parameter mnemonics: ''',bannedSymbols,''''];
    case 'BannedMnems:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'BannedMnemContent'
        bannedContent = create_comma_separated_list(errArgs);
        msg = ['The following symbols are reserved in MAPS/EASE & ',...
            'cannot be used as part of variable or parameter mnemonic ',...
            'strings: ''',bannedContent,''''];
    case 'BannedMnemContent:Instance'
        bannedContentFound = create_comma_separated_list(errArgs{4});
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''' contains ''',bannedContentFound,''''];
    case 'NamesNotUniqueWithinField'
        msg = ['David Bradnum says: ''Don''t repeat yourself!''. ',...
            'All names within a model field must be unqiue ',...
            '(regardless of case)'];
    case 'NamesNotUniqueWithinField:Instance'
        msg = ['''',errArgs{1},''' on lines ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'NamesOverlapAcrossFields'
        msg = ['Names across certain model fields must be non- ',...
            'overlapping (regardless of case) to avoid conflicts in ',...
            'EASE & MAPS'];
    case 'NamesOverlapAcrossFields:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''' also appears on ',errArgs{4},' under ''',...
            errArgs{5},''''];
    case 'NamesTooLong'
        msg = ['Owing to EASE metadata storage restrictions, ',...
            'variable, parameter & equation names must not exceed ',...
            errArgs{1},' characters in length'];
    case 'NamesTooLong:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''''];
    case 'BannedNameContent'
        bannedContent = create_comma_separated_list(errArgs);
        msg = ['The following symbols are reserved in MAPS/EASE & ',...
            'cannot be used as part of variable, parameter or ',...
            'equation names: ''',bannedContent,''''];
    case 'BannedNameContent:Instance'
        bannedContentFound = create_comma_separated_list(errArgs{4});
        msg = ['''',errArgs{1},''' on line ',errArgs{2},' under ''',...
            errArgs{3},''' contains ''',bannedContentFound,''''];
    case 'BadMetadataFields'
        msg = ['The model metadata fields under ''',errArgs{1},...
            ''' must be complete'];
    case 'BadMetadataFields:MissingFields'
        missingFields = create_comma_separated_list(errArgs{1}');
        msg = ['The following field(s) is/are missing and must be ',...
            'included: ''',missingFields,''''];
    case 'BadMetadataFields:UnknownFields'
        unknownFields = create_comma_separated_list(errArgs{1});
        msg = ['The following field(s) on line(s) ',errArgs{2},' are ',...
            'unrecognised and must not be included: ''',unknownFields,...
            ''''];
    case 'BadParams'
        msg = ['Parameters must be valid (finite & real) numbers. ',...
            'The following found under ''',errArgs{1},''' are invalid ',...
            ' - please check the format of the lines against the ',...
            'format expected in the setup of the .maps file:'];
    case 'BadParams:Instance'
        msg = ['''',errArgs{1},''' on line ',errArgs{2}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK MODEL FILE EQUATION SYNTAX
function msg = get_check_model_file_equation_syntax_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_model_file_equation_syntax was not passed the ',...
            'right number of inputs: it requires 4 inputs but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'check_model_file_equation_syntax must be an exception to ',...
            'add file syntax causes to'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_model_file_equation_syntax must be a structure ',...
            'containing the parsed contents of the model file'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'check_model_file_equation_syntax must be a structure ',...
            'containing the model file line numbers associated with ',...
            'all the parsed contents of the model file'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'check_model_file_equation_syntax must be a ',...
            'cell array of configuration information for the equation ',...
            'syntax checking, describing the permitted terms and ',...
            'format of the equations'];
    case 'BadInput5'
        msg = ['5th input received by ',...
            'check_model_file_equation_syntax must be a MAPS model ',...
            'structure'];
    case 'BadEquation'
        msg = ['Line ',errArgs{1},': ''',errArgs{2},''''];
    case 'UnrecognisedTerms'
        unrecognisedTerms = create_comma_separated_list(errArgs);
        msg = ['''',unrecognisedTerms,''' cannot be found among the ',...
            'valid variables/parameters'];
    case 'BadTimeSubscript'
        if ~isempty(errArgs{2})
            msg = ['''',errArgs{1},''' has an invalid ''',...
                errArgs{2},''' time subscript'];
        else
            msg = ['''',errArgs{1},''' must have a time subscript'];
        end
    case 'WrongEquationSide'
        msg = ['''',errArgs{1},''' must appear on the ',errArgs{2},...
            ' of the equation'];
    case 'RepeatedType'
        repeatedTypeMnems = create_comma_separated_list(errArgs);
        msg = ['''',repeatedTypeMnems,''' should not appear in the ',...
            'same equation'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK MODIFICATION INFO FILE SYNTAX
function msg = get_check_modification_info_file_syntax_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'ModificationInfoFileSyntaxErrors'
        msg = ['The following syntax errors were found in the modification'...
            ' info file provided. For more information on the syntax '...
            'rules for modification info files, see the documentation.'];
    case 'BadModificationType'
        msg = ['Not all modification types are allowed for all model parts.'...
            ' For the model part, ',errArgs{1},', the following modifications'...
            ' are valid: ',errArgs{1,2:end},'. MAPS found the following '...
            ' invalid modifications: '];
    case 'BadModificationType:Instance'
        msg = [errArgs{1},' on line number ',errArgs{2}];
    case 'IdentifierNotFound'
        msg = ['Modifications where parts of the model are removed or '...
            'changed require the name or mnemonic of the element in '...
            'question. In the following instance(s) the name or mnemonic '...
            'was not found in the model part, ',errArgs{1},':'];
    case 'IdentifierNotFound:Instance'
        msg = [errArgs{1},' on line number ',errArgs{2}];
    case 'ComponentNotFound'
        msg = ['The model component, ',errArgs{1},', to which you '...
            'requested a change or removal was not found in the model.'];
    case 'WrongNumberInputs'
        msg = ['The modification, ',errArgs{1},', to model part,'...
            ,errArgs{2},', requires ',errArgs{3},' input(s) (in '...
            'addition to the modification type input). In the following'...
            ' cases it received a different number:'];
    case 'WrongNumberInputs:Instance'  
        msg = ['On line number ',errArgs{1},', ',errArgs{2},' inputs '...
            'were given.'];
    case 'ParamValueNotNumeric'
        msg = ['When a parameter is added or a parameter value '...
            'is changed, the input given for the parameter value must '...
            'be numeric. In the following instances this was not the case.'];
    case 'ParamValueNotNumeric:Instance'
        msg = [errArgs{2},' on line number ',errArgs{1}];
    case 'ModificationOverlapsFound'
        msg = ['Some combinations of modifications are not valid for '...
            'the same model element, e.g. you cannnot remove something '...
            'twice. For all rules, see the MAPS documentation. For the'...
            ' model element, ', errArgs{1},', of the model part, ',...
            errArgs{2},', the following invalid combination of '...
            'modifications was requested:'];
    case 'ModificationOverlapsFound:Instance'
        msg = [errArgs{1},' on line numbers ',errArgs{2}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK NLBL MODEL FILE SYNTAX
function msg = get_check_NLBL_model_file_syntax_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_NLBL_model_file_syntax was not passed the right ',...
            'number of inputs: it requires 4 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by check_NLBL_model_file_syntax ',...
            'must be a structure containing the parsed contents of ',...
            'the model file'];
    case 'BadInput2'
        msg = ['2nd input received by check_NLBL_model_file_syntax ',...
            'must be a structure containing the model file keywords ',...
            'associated with the parsed contents of the model file'];
    case 'BadInput3'
        msg = ['3rd input received by check_NLBL_model_file_syntax ',...
            'must be a structure containing the model file line ',...
            'numbers associated with all the parsed contents of the ',...
            'model file'];
    case 'BadInput4'
        msg = ['4th input received by check_NLBL_model_file_syntax ',...
            'must be an exception to add file syntax causes to'];
    case 'NLBLmodelEquationSyntaxErrors'
        msg = ['NLBL model equations must be valid equations ',...
            'containing only endogenous variables, exogenous ',...
            'variables, residuals and valid mathematical operators, ',...
            'symbols & numbers. In addition, endogenous variables ',...
            'must appear uniquely on the LHS of NLBL model ',...
            'equations. MAPS found the following exceptions ',...
            'under ''',errArgs{1},''':'];
    case 'badResidualMnems'
        msg = ['Residual mnemonics should be written in the following ',...
            'way: ''yMnem_RES'' where yMnem is the mnemonic for the ',...
            'endogenous variable in whose equation the residual ',...
            'appears. MAPS found the following exceptions ',...
            'under ''',errArgs{1},''':'];
    case  'badResidualMnems:instance'
        msg = ['''',errArgs{1},''' in the equation on line number ',...
            errArgs{2}];
    case 'badRHScontempVar'
        msg = ['LHS variables cannot appear contemporaneously on the ',...
            'RHS of NLBL model equations. MAPS found the following ',...
            'exceptions under ''',errArgs{1},''':'];
    case 'badRHScontempVar:instance'
        msg = ['''',errArgs{1},''' in the equation on line number ',...
            errArgs{2}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK PARAMETER INITIALISATION FOR ESTIMATION
function msg = get_check_parameter_initialisation_for_estimation_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_parameter_initialisation_for_estimation was not ',...
            'passed the right number of inputs: it requires 4 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_parameter_initialisation_for_estimation must be a ',...
            'structure of information about the parameters being ',...
            'estimated including ''mnemonics'', lowerBounds'' and ',...
            '''upperBounds'' fields'];
    case 'BadMnemsField'
        msg = ['The mnemonics field of the structure of information ',...
            'about the parameters being estimated must contain a ',...
            'column cell string arry of mnemonics identifying the ',...
            'parameters being estimated or, optionally, a single ',...
            'string if only one parameter is being estimated'];
    case 'BadLowerBoundField'
        msg = ['The lowerBounds field of the structure of information',...
            'about the parameters being estimated must contain a ',...
            'real column vector of lower bounds for the parameters ',...
            'being estimated'];
    case 'BadUpperBoundField'
        msg = ['The lowerBounds field of the structure of information',...
            'about the parameters being estimated must contain a ',...
            'real column vector of upper bounds for the parameters ',...
            'being estimated'];  
    case 'InconsistentMnemBoundDims'
        msg = ['The mnemonics, lower bounds and upper bounds for the ',...
            'parameters being estimated must be of the same dimension'];
    case 'BadBounds'
        msg = ['The lower and upper bounds for the parameters being ',...
            'estimated are invalid because one or more of the lower ',...
            'bounds is not strictly smaller than the upper bounds'];    
    case 'InvalidInitialisation'
        msg = ['The estimation parameter initialisation is invalid ',...
            'because it does not constitute a finite, real column ',...
            'vector'];        
    case 'WrongDimsForInitialisation'
        msg = ['The estimation parameter initialisation is invalid ',...
            'because the number of initialisation values provided ',...
            'is not equal to the number of estimation parameters (in ',...
            'the mnemonics and bounds passed in)'];          
    case 'InitialisationOutOfBounds'
        msg = ['The estimation parameter initialisation is invalid ',...
            'because one or more of the parameter values falls ',...
            'outside the estimation parameter bounds'];  
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CHECK STRINGS APPEAR IN REFERENCE LIST
function msg = get_check_strings_appear_in_reference_list_error(...
        errCode,errArgs)                                                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['check_strings_appear_in_reference_list was not passed ',...
            'the right number of inputs: it requires 2 or 3 inputs ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'check_strings_appear_in_reference_list must be a column ',...
            'cell array of reference strings aginst which to compare ',...
            'the input strings'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'check_strings_appear_in_reference_list must be a string ',...
            'or column cell string array to compare against the ',...
            'reference list'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'check_strings_appear_in_reference_list must be a MAPS ',...
            'exception identifier string'];        
    case 'MissingStrings'
        msg = ['The following strings could not be found in the ',...
            'reference list:'];
    case 'MissingStrings:Instance'
        msg = errArgs{1};      
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CLEAN COLUMN HEADERS LOADED FROM EXCEL
function msg = get_clean_column_headers_loaded_from_excel_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['clean_column_headers_loaded_from_excel was not passed ',...
            'the right number of inputs: it requires 1 input but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'clean_column_headers_loaded_from_excel must be a row ',...
            'cell array of data extracted as column headers from the ',...
            'first row of a two-dimensional cell array of data loaded ',...
            'from an Excel sheet'];    
    case 'BadColHeaders'
        msg = ['The row cell array of data extracted as the first row ',...
            'of a two-dimensional cell array of data loaded from an ',...
            'Excel sheet does not constitute a valid set of column ',...
            'headers because it does not constitute a row cell string ',...
            'array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPILE COMPUTE AND FILTER FIX RESPONSES INPUTS
function msg = ...
    get_compile_compute_and_filter_fix_responses_inputs_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compile_compute_and_filter_fix_responses_inputs was ',...
            'not passed the right number of inputs: it requires 2 or ',...
            '3 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compile_compute_and_filter_fix_responses_inputs must be ',...
            'a fix responses instruction object'];  
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'compile_compute_and_filter_fix_responses_inputs must be ',...
            'a column cell string array of mnemonics expecifying ',...
            'which variable responses to return as output'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'compile_compute_and_filter_fix_responses_inputs must be ',...
            'a logical scalar dictating whether the function should ',...
            'return a cell array of metadata and responses(true) or a ',...
            'matrix - the default in this context (false)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPILE COMPUTE AND FILTER IMPULSE RESPONSES INPUTS
function msg = ...
    get_compile_compute_and_filter_impulse_responses_inputs_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compile_compute_and_filter_impulse_responses_inputs ',...
            'was not passed the right number of inputs: it requires 3 ',...
            'or 4 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compile_compute_and_filter_impulse_responses_inputs must ',...
            'be a positive numeric integer representing the number of ',...
            'periods over which to compute the responses to the fix'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'compile_compute_and_filter_impulse_responses_inputs must ',...
            'be a non-negative numeric integer representing the ',...
            'number of periods ahead in which the shocks are ',...
            'anticipated (0 for unanticipated)'];  
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'compile_compute_and_filter_impulse_responses_inputs must ',...
            'be two-column cell string array of shock-variable ',...
            'mnemonic response identifier pairs'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'compile_compute_and_filter_impulse_responses_inputs must ',...
            'be a logical scalar dictating whether the function ',...
            'should return a cell array of metadata and responses ',...
            '(true) or a matrix - the default in this context (false)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPILE MDE LOSS INPUTS
function msg = get_compile_MDE_loss_inputs_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compile_MDE_loss_inputs was not passed the right ',...
            'number of inputs: it requires 8 inputs but received ',...
            errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end  

%% COMPILE MDE OBJECTIVE FUNCTION INPUTS
function msg = get_compile_MDE_objective_function_inputs_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compile_MDE_objective_function_inputs was not passed ',...
            'the right number of inputs: it requires 10 or 11 inputs ',...
            'but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPILE OPTIONS INFO STRUCT FOR OPTIM OR SIM 
function msg = get_compile_options_info_struct_for_optim_or_sim_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compile_options_info_struct_for_optim_or_sim',...
            'was not passed the right number of inputs: it requires 3 ',...
            'inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'compile_options_info_struct_for_optim_or_sim must be a ',...
            'two-column cell array of options for either posterior ',...
            'optimisation or posterior simulation'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'compile_options_info_struct_for_optim_or_sim must be a ',...
            'column cell string array of valid MAPS optimisation or ',...
            'simulation routine names'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'compile_options_info_struct_for_optim_or_sim must be a ',...
            'string detailing the field name which describes the name ',...
            'of the specific optimisation or simulation routine to use'];
    case 'InvalidGeneralOptionNames'
        msg = ['Non-routine specific (general) posterior optimisation ',...
            'or simulation option names must not overlap with option ',...
            'names used in any of the specific routines - please ',...
            'change one of the conifiguration files accordingly. The ',...
            'following option names overlapped:'];
    case 'InvalidGeneralOptionNames:Instance'
        msg = errArgs{1};      
    case 'InvalidRoutineFieldName'
        msg = ['The input routine field name string ''',errArgs{1},...
            ''' does not match any of the option field names in the ',...
            'configuration - either change the configuration to ',...
            'match the input or vice versa'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPLIE POSTERIOR EVALUATION INPUTS
function msg = get_compile_posterior_evaluation_inputs_error(...
        errCode,errArgs)                                                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compile_posterior_evaluation_inputs was not passed ',...
            'the right number of inputs: it requires at least 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'compile_posterior_evaluation_inputs must be a MAPS LSS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'compile_posterior_evaluation_inputs must be a structure ',...
            'of information about the estimation priors'];     
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'compile_posterior_evaluation_inputs must be a finite, ',...
            'real two-dimensional matrix of model observable data'];
    case 'BadInput4'
        msg = ['Optional 4th input received by ',...
            'compile_posterior_evaluation_inputs must be a non-',...
            'negative real integer indicating the number of periods ',...
            'to use as a training sample for computation of the ',...
            'likelihood in the Kalman filter'];     
    case 'BadInput5'
        msg = ['Optional 5th input received by ',...
            'compile_posterior_evaluation_inputs must be a logical ',...
            'scalar dictating whether or not to use a minimum state ',...
            'transformation for evaluation of the likelihood']; 
    case 'BadInput6'
        msg = ['Optional 6th input received by ',...
            'compile_posterior_evaluation_inputs must be a logical ',...
            'scalar dictating whether to use the Chandrasekhar ',...
            'recursions to compute the log likelihood or not (in ',...
            'which case the standard Kalman filter is used)'];        
    case 'BadPriorsInput'
        msg = ['The 2nd priors input passed to ',...
            'compile_posterior_evaluation_inputs must be a structure ',...
            'of information about the priors containing an ''indices'' ',...
            'field that contains a set of index numbers describing ',...
            'the location of the parameters being estimated in the ',...
            'full parameter vector in the model being used'];
    case 'UnableToUnpackModelParams'
        msg = ['The 1st input passed to ',...
            'compile_posterior_evaluation_inputs must be a valid MAPS ',...
            'LSS model object. On attempting to unpack the paramater ',...
            'vector from the model, MAPS'' model unpacker function ',...
            'returned the following error:'];
    case 'UnableToComputeMinStateTransform'
        msg = ['The use minimum state space transformation option was ',...
            'set to ''true'', but MAPS was unable to compute the ',...
            'minimum state transformation matrix for input to ',...
            'posterior evaluation. The function that attempted to do ',...
            'that returned the following error:'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPLIE POSTERIOR OBJECTIVE FUNCTION INPUTS
function msg = get_compile_posterior_objective_function_inputs_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compile_posterior_objective_function_inputs was not ',...
            'passed the right number of inputs: it requires 2 or 3 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'compile_posterior_objective_function_inputs must be a ',...
            'logical scalar dictating whether the parameters have ',...
            'been been transformed to unbounded space or not ',...
            '(depending on if the optimisation routine being used ',...
            'permits bounds or not)'];  
    case 'BadPriorsInput'
        msg = ['The 1st input passed to ',...
            'compile_posterior_objective_function_inputs must be a ',...
            'structure of information about the priors that includes ',...
            '''lowerBounds'' and ''upperBounds'' fields containing ',...
            'numeric values for the parameter lower and upper bounds ',...
            'respectively'];           
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE AND FILTER FEVDS
function msg = get_compute_and_filter_FEVDs_error(errCode,errArgs)          %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_and_filter_FEVDs was not passed the right ',...
            'number of inputs: it requires 3 or 4 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'compute_and_filter_FEVDs must be a logcial scalar ',...
            'dictating whether or not the output should be returned ',...
            'in a format compatible with MAPS'' bar plotting ',...
            'functionality'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE AND FILTER FIX RESPONSES
function msg = get_compute_and_filter_fix_responses_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_and_filter_fix_responses was not passed the '...
            'right number of inputs: it requires 3 or 4 inputs, but ',...
            'received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE AND FILTER HISTORICAL SHOCK DECOMPOSITIONS
function msg = ...
    get_compute_and_filter_historical_shock_decompositions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_and_filter_historical_shock_decompositions ',...
            'was not passed the right number of inputs: it requires ',...
            'at least 3 inputs, but only received ',errArgs{1}];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'compute_and_filter_historical_shock_decompositions must ',...
            'be a logcial scalar dictating whether or not the output ',...
            'should be returned in a format compatible with MAPS'' ',...
            'bar plotting functionality']; 
    case 'BadInput5'
        msg = ['Optional 5th input passed to ',...
            'compute_and_filter_historical_shock_decompositions must ',...
            'be a row vector of dates to include in the output in the ',...
            'case where it is being formatted for charting'];          
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE AND FILTER IMPULSE RESPONSES
function msg = get_compute_and_filter_impulse_responses_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_and_filter_impulse_responses was not passed '...
            'the right number of inputs: it requires 4 or 5 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'compute_and_filter_impulse_responses must be a two- ',...
            'dimensional cell string array of variable-shock response ',...
            'identifier pairs'];
    case 'BadInput5'
        msg = ['Optional 5th input passed to ',...
            'compute_and_filter_impulse_responses must be a logical ',...
            'scalar dictating whether to return the output as a cell ',...
            'array (true) or matrix (false)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE EQUATIONS INCIDENCE MATRIX
function msg = get_compute_equations_incidence_matrix_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_equations_incidence_matrix was not passed the '...
            'right number of inputs: it requires 2 or 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compute_equations_incidence_matrix must be a column cell ',...
            'array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'compute_equations_incidence_matrix must be a column cell ',...
            'string array of mnemonics to compute the incidence ',...
            'matrix for'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'compute_equations_incidence_matrix must be a scalar, ',...
            'logical describing whether or not time subscripts should ',...
            'be taken into account in computing the incidence matrix'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE EQUATIONS INCIDENCE MATRIX IN STRING FORMAT
function msg = ...
    get_compute_equations_incidence_matrix_in_string_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_equations_incidence_matrix_in_string_format ',...
            'was not passed the right number of inputs: it requires ',...
            '3 or 4 inputs, but received ',errArgs{1}];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'compute_equations_incidence_matrix_in_string_format must ',...
            'be a column cell array of equation names'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE FEVDS
function msg = get_compute_FEVDs_error(errCode,errArgs)                     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_FEVDs was not passed the right number of ',...
            'inputs: it requires 2 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by compute_FEVDs must be a MAPS ',...
            'LSS model structure'];
    case 'BadInput2'
        msg = ['2nd input received by compute_FEVDs must be a ',...
            'positive real numeric integer horizon up to which to ',...
            'compute the forecast error varaince decompositions'];
    case 'BadModelClass'
        msg = ['Forecast error variance decompositions can only be ',...
            'computed using a linear state-space model'];
    case 'InvalidModelObsOutputRequest'
        msg = ['The model passed in does not contain measurement ',...
            'equations and model observables, so it is not possible ',...
            'to return a matrix of model observable responses as the ',...
            '3rd output from this function'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE FIX RESPONSES ACROSS PARAMETER DRAWS
function msg = get_compute_fix_responses_across_parameter_draws_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_fix_responses_across_parameter_draws was not ',...
            'passed the right number of inputs: it requires 5 or 6 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'compute_fix_responses_across_parameter_draws must be a ',...
            'MAPS fix responses instruction object or a structure ',...
            'containing details about which spreadsheet to acquire ',...
            'the fix response instructions from'];           
    case 'BadInput6'
        msg = ['Optional 6th input passed to ',...
            'compute_fix_responses_across_parameter_draws must be a ',...
            'logical scalar for whether or not to return the output ',...
            'in a cell array as variable mnemonic-response vector ',...
            'pairs on as a matrix'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE FIX RESPONSES
function msg = get_compute_fix_responses_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_fix_responses was not passed the right '...
            'number of inputs: it requires 2 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to compute_fix_responses must be a ',...
            'MAPS LSS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to compute_fix_responses must be a ',...
            'fix responses instruction object'];  
    case 'BadModelClass'
        msg = ['The model passed in must be of the linear state space ',...
            'class'];
    case 'BadModelObsOutputRequest'
        msg = ['At least three output arguments were requested in the ',...
            'call to this function, but the model input does not ',...
            'contain observables so it is not possible to compute ',...
            'either a 3rd or 4th output (which are the model and raw ',...
            'observable responses to the fix over the specified time ',...
            'horizon)'];
    case 'BadRawObsOutputRequest'
        msg = ['Four output arguments were requested in the call to ',...
            'this function, but the model input does not contain ',...
            'raw observables so it is not possible to compute the ',...
            '4th output (which is the raw observable responses to ',...
            'the fix over the specified time horizon)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE HISTORICAL SHOCK DECOMPOSITIONS
function msg = get_compute_historical_shock_decompositions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_historical_shock_decompositions was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'compute_historical_shock_decompositions must be a MAPS ',...
            'LSS model structure'];   
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'compute_historical_shock_decompositions must be a ',...
            'finite, real two-dimensional matrix of numeric model ',...
            'observable data'];  
    case 'BadModelClass'
        msg = ['Shock decompositions can only be computed using a ',...
            'linear state-space model'];
    case 'BadModelCharacteristic'
        msg = ['The LSS model input must have observables and ',...
            'measurement equations otherwise it is not possible to ',...
            'compute a historical decomposition of the data'];  
    case 'UnableToFilter'
        msg = ['MAPS was unable to compute the historical shock ',...
            'decompositions because the Kalman filter/smoother ',...
            'returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% COMPUTE IMPULSE RESPONSES
function msg = get_compute_impulse_responses_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_impulse_responses was not passed the right ',...
            'number of inputs: it requires 2, 3 or 4 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by compute_impulse_responses must ',...
            'be a MAPS LSS model structure'];
    case 'BadInput2'
        msg = ['2nd input received by compute_impulse_responses must ',...
            'be a positive integer representing the horizon or number ',...
            'periods over which to ompute the responses'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'compute_impulse_responses must be a non-negative integer ',...
            'representing the anticipation horizon (i.e. number of ',...
            'periods ahead that the shocks are anticipated)'];
    case 'BadInput4'
        msg = ['Optional 4th input received by ',...
            'compute_impulse_responses must be a string, row or ',...
            'column cell string array dictating the shock or shocks ',...
            'for which to compute impulse responses'];        
    case 'BadModelClass'
        msg = ['Impulse Responses can only be computed using a linear ',...
            'state-space model'];
    case 'InvalidAnticipationInstruction'
        msg = ['The model passed in is backward looking, so it is not ',...
            'possible to compute anticipated impulse responses'];
    case 'InvalidModelObsOutputRequest'
        msg = ['The model passed in does not contain measurement ',...
            'equations and model observables, so it is not possible ',...
            'to return a matrix of model observable responses as the ',...
            '3rd output from this function'];
    case 'InvalidShocksToImpulseInstruction'
        msg = ['The set of shock mnemonics passed in as optional 4th ',...
            'input are invalid - MAPS'' model index lookup function ',...
            'returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE IMPULSE RESPONSES ACROSS PARAMETER DRAWS
function msg = ...
    get_compute_impulse_responses_across_parameter_draws_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_impulse_responses_across_parameter_draws was ',...
            'not passed the right number of inputs: it requires 5 or ',...
            '6 inputs, but received ',errArgs{1}];           
    case 'BadInput6'
        msg = ['Optional 6th input passed to ',...
            'compute_impulse_responses_across_parameter_draws must be ',...
            'a logical scalar for whether or not to return the output ',...
            'in a cell array as variable mnemonic-response vector ',...
            'pairs on as a matrix'];   
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE LOSS FOR MDE
function msg = get_compute_loss_for_MDE_error(errCode,errArgs)              %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_loss_for_MDE was not passed the right number '...
            'of inputs: it requires 9 inputs but received ',errArgs{1}];
    case 'BadInput5'
        msg = ['5th input passed to compute_loss_for_MDE must be a ',...
            'finite real two-dimensional matrix of targets in the MDE'];
    case 'BadInput6'
        msg = ['6th input passed to compute_loss_for_MDE must be a ',...
            'finite real two-dimensional matrix of weights to apply ',...
            'to deviations from the targets in the MDE'];
    case 'TargetsWeightsDimMismatch'
        msg = ['The 5th and 6th inputs to compute_loss_for_MDE ',...
            'representing the targets and weights for MDE must have ',...
            'the same dimensions'];
    case 'BadInput7'
        msg = ['7th input passed to compute_loss_for_MDE must be a ',...
            'logical scalar dictating whether or not a perecentage ',...
            'weighting scheme is used for deviations from the target ',...
            '(or whether it''s an absolute weighting scheme)'];
    case 'BadInput8'
        msg = ['8th input passed to compute_loss_for_MDE must be a ',...
            'string representing the name of the function to call in ',...
            'the MDE (eg function to compute particular impulse ',...
            'responses)'];  
    case 'BadInput9'
        msg = ['9th input passed to compute_loss_for_MDE must be a ',...
            'row cell array of inputs to pass to the function to call ',...
            'in the MDE (and these inputs are assumed to appear after ',...
            'the model in the call to the function)'];
    case 'CouldNotComputeModelProperties'
        msg = ['MAPS cannot proceed with the MDE because the function ',...
            'called to compute the model property or properties for ',...
            'the MDE returned the following error(s):'];
    case 'ReponsesTargetsDimMismatch'
        msg = ['MAPS cannot proceed with the MDE because the function ',...
            'called to compute the model property or properties ',...
            'returned an array which was not of the same dimension as ',...
            'the input targets array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE MINIMUM STATE SPACE REPRESENTATION
function msg = ...
    get_compute_minimum_state_space_representation_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_minimum_state_space_representation was not '...
            'passed the right number of inputs: it requires 1 input, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compute_minimum_state_space_representation must be a ',...
            'MAPS LSS model structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE MODEL OBSERVABLE AUTOCOVARIANCES
function msg = get_compute_model_observable_autocovariances_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_model_observable_autocovariances was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'compute_model_observable_autocovariances must be a MAPS ',...
            'LSS model structure'];   
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'compute_model_observable_autocovariances must be a ',...
            'finite, real two-dimensional matrix of numeric model ',...
            'observable data'];  
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'compute_model_observable_autocovariances must be a non-',...
            'negative numeric  integer representing the horizon up to ',...
            'which to compute the autocovariances'];
    case 'BadModelClass'
        msg = ['Model observable autocovariances can only be ',...
            'computed using a linear state-space model'];
    case 'BadModelCharacteristic'
        msg = ['The LSS model input must have observables and ',...
            'measurement equations otherwise it is not possible to ',...
            'compute model observable autocovariances'];  
    case 'DataIncompatibleWithModel'
        msg = ['The number of observable in the model input must ',...
            'equal the number of observables (measured by the number ',...
            'of rows) in the dataset input'];
    case 'NotEnoughTimePeriodsInData'
        msg = ['It is not possible to compute the autocovariances up ',...
            'to the lag length (horizon) specified in the input ',...
            'because the dataset input does contain enough data ',...
            'points to compute the autocovariances for one or more ',...
            'of the lags: for a horizon of H, the dataset must ',...
            'contain at least H+1 time periods (measured by the ',...
            'number of columns in the input data matrix)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end    

%% COMPUTE MODEL OBSERVABLE VARIANCES
function msg = get_compute_model_observable_variances_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_model_observable_variances was not passed the ',...
            'right number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end 

%% COMPUTE MODEL VARIABLE AUTOCOVARIANCES
function msg = get_compute_model_variable_autocovariances_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_model_variable_autocovariances was not ',...
            'passed the right number of inputs: it requires 2 or 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'compute_model_variable_autocovariances must be a MAPS ',...
            'LSS model structure'];   
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'compute_model_variable_variable must be a non-',...
            'negative numeric integer representing the horizon up to ',...
            'which to compute the autocovariances'];  
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'compute_model_variable_autocovariances must be a logical ',...
            'scalar dictating whether output should be covariances ',...
            '(false, which is the default) or correlations (true)'];
    case 'BadModelClass'
        msg = ['Model observable autocovariances can only be ',...
            'computed using a linear state-space model'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end  

%% COMPUTE MODEL VARIABLE COVARIANCE MATRIX
function msg = ...
    get_compute_model_variable_covariance_matrix_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_model_variable_covariance_matrix was not '...
            'passed the right number of inputs: it requires 2 or 3 ',...
            'inputs but received ',errArgs{1}];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'compute_model_variable_covariance_matrix must be a ',...
            'logical scalar describing whether or not the variance-',...
            'covaraince matrix should be computed using a precise, ',...
            'but computationally more intensive method (true) or a ',...
            'less precise but faster method (false)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE NUMERICAL DERIVATIVES
function msg = get_compute_numerical_derivatives_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_numerical_derivatives was not passed the right '...
            'number of inputs: it requires 4 or 5 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to compute_numerical_derivatives ',...
            'must be a string name for the function for which to ',...
            'approximate the derivatives'];
    case 'BadInput2'
        msg = ['2nd input passed to compute_numerical_derivatives ',...
            'must be a finite, real, column vector of function ',...
            'argument values around which to approximate the  ',...
            'derivatives'];
    case 'BadInput3'
        msg = ['3rd input passed to compute_numerical_derivatives ',...
            'must be a cell array of additional input arguments for ',...
            'the function'];
    case 'BadInput4'
        msg = ['4th input passed to compute_numerical_derivatives ',...
            'must be a logical scalar, equal true for a second-order ',...
            'approximation and equal false for a first-order ',...
            'approximation'];
    case 'BadInput5'
        msg = ['Optional 5th input passed to ',...
            'compute_numerical_derivatives must be a structure ',...
            'containing upper and/or lower bounds for the function ',...
            'arguments'];
    case 'UnexpectedBoundStruct'
        msg = ['The input bound structure contained the following ',...
            'unrecognised fields:'];
    case 'UnexpectedBoundStruct:Instance'
        msg = ['''',errArgs{1},''''];
    case 'BadLowerBounds'
        msg = ['The input lower bounds must be a real column vector ',...
            'of the same dimensions as the input function arguments'];
    case 'BadUpperBounds'
        msg = ['The input upper bounds must be a real column vector ',...
            'of the same dimensions as the input function arguments']; 
    case 'InvalidBounds'
        msg = ['One of more of the input lower bounds was not ',...
            'strictly smaller than the input upper bounds'];   
    case 'ArgsNotLowerBounded'
        msg = ['One of more of the input arguments was smaller than ',...
            'its lower bound'];  
    case 'ArgsNotUpperBounded'
        msg = ['One of more of the input arguments was larger than ',...
            'its upper bound'];         
    case 'BadFuncName'
        msg = ['The function name passed in as input does not exist ',...
            'on the MATLAB search path. MAPS'' file existence checker ',...
            'returned the following error:'];
    case 'BadFuncOutput'
        msg = ['On evaluation, the function did not return a finite, ',...
            'real scalar'];  
    case 'BadFuncEval'
        msg = ['The function would not evaluate. It returned the ',...
            'following error:'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE NUMERICAL INVERSE HESSIAN
function msg = get_compute_numerical_inverse_hessian_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_numerical_inverse_hessian was not passed the ',...
            'right number of inputs: it requires 4 or 5 inputs, but ',...
            'received ',errArgs{1}];       
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE NUMERICAL INVERSE HESSIAN FOR LOG POSTERIOR
function msg = ...
    get_compute_numerical_inverse_hessian_for_log_posterior_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_numerical_inverse_hessian_for_log_posterior ',...
            'was not passed the right number of inputs: it requires ',...
            'at least 4 inputs, but only received ',errArgs{1}];       
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE OBSERVABLES FROM MODEL VARIABLES
function msg = get_compute_observables_from_model_variables_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_observables_from_model_variables was not ',...
            'passed the right number of inputs: it requires either 3 ',...
            '(if measurement errors are not passed in) or 5 (if ',...
            'measurement errors are passed in) inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compute_observables_from_model_variables must be a ',...
            'finite, numeric two-dimensional matrix dataset of model ',...
            'variables'];
    case 'BadInput5'
        msg = ['Optional, model dependent 5th input passed to ',...
            'compute_observables_from_model_variables must be a ',...
            'finite, numeric two-dimensional matrix dataset of ',...
            'measurement errors'];
    case 'IncompatibleGx'
        msg = ['The model variable dataset and the matrix of model ',...
            'variable loadings from the measurement equations must ',...
            'have consistent dimensions (as measured by the number of ',...
            'rows in the dataset and the number of columns in the ',...
            'loadings)'];
    case 'IncompatibleVw'
        msg = ['The measurement error dataset and the matrix of ',...
            'measurement error loadings from the measurement ',...
            'equations must have consistent dimensions (as measured ',...
            'by the number of rows in the dataset and the number of ',...
            'columns in the loadings)'];
    case 'Incompatiblexw'
        msg = ['The measurement error and model variable dataset must ',...
            'have the same number of data points (as measured by the ',...
            'number of columns in the two datasets)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE PERCENTILES FOR FAN FROM SAMPLE OF DATA
function msg = ...
    get_compute_percentiles_for_fan_from_sample_of_data_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_percentiles_for_fan_from_sample_of_data was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compute_percentiles_for_fan_from_sample_of_data must be ',...
            'a finite, real three-dimensional numeric matrix of ',...
            'sample data (nVars*nObservations*nDraws)'];         
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'compute_percentiles_for_fan_from_sample_of_data must be ',...
            'a positive real numeric scalar taking a value no ',...
            'greater than 50 and repesenting the percentage point ',...
            'increment in the fan chart']; 
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% COMPUTE RESPONSES ACROSS PARAMETER DRAWS
function msg = get_compute_responses_across_parameter_draws_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_responses_across_parameter_draws was not ',...
            'passed the right number of inputs: it requires 4 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'compute_responses_across_parameter_draws must be a MAPS ',...
            'LSS model structure'];         
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'compute_responses_across_parameter_draws must be a ',...
            'finite, real two-dimensional matrix of parameter draws ',...
            'over which to compute the responses'];    
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'compute_responses_across_parameter_draws must be a ',...
            'string representing the name of the response function ',...
            'to execute']; 
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'compute_responses_across_parameter_draws must be a ',...
            'row cell array of non-model inputs for the response ',...
            'function'];        
    case 'BadResponseFuncInputs'
        msg = ['MAPS was unable to execute the responses function ',...
            'given the model and other inputs. The responses function ',...
            'returned the following error(s):'];
    case 'BadResponseFuncOutput'
        msg = ['MAPS cannot proceed with the computation of the ',...
            'responses across draws because the response function ''',...
            errArgs{1},''' did not return a finite real two-',...
            'dimensional matrix given the inputs passed to it as ',...
            'required by this function'];
    case 'BadMatrixOfDraws'
        msg = ['The matrix of parameter draws passed in is not ',...
            'compatible with the dimensions of the parameters in ',...
            'the model: the parameter draws matrix must have the ',...
            'same number of rows as there are parameters in the model'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% COMPUTE SMOOTHED STATES ACROSS PARAMETER DRAWS
function msg = get_compute_smoothed_states_across_parameter_draws_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['compute_smoothed_states_across_parameter_draws was not'...
            ' passed the correct number of inputs: it requires 3 but '...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['The first input passed to compute_smoothed_states_'...
            'across_parameter_draws must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['The second input passed to compute_smoothed_states_'...
            'across_parameter_draws must be a two dimensional numeric '...
            'matrix containing parameter draws'];
    case 'BadInput3'
        msg = ['The third input passed to compute_smoothed_states_'...
            'across_parameter_draws must be a two dimensional numeric '...
            'matrix containing the data to smooth'];
    case 'ModelNotLSS'
        msg = ['The first input passed to compute_smoothed_states_'...
            'across_parameter_draws must be an LSS model'];
    case 'BadNargout'
        msg = ['The model input does not have measurement error, so ',...
            '4th argument requested (for the measurement errors ',...
            'across parameter draws) as output in the call to this ',...
            'function is not permitted'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONSTRUCT ADDITIONAL LSS MODEL INFO FOR EASE
function msg = get_construct_additional_LSS_model_info_for_EASE_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['construct_additional_LSS_model_info_for_EASE was not ',...
            'passed the right number of inputs: it requires 1 input ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'construct_additional_LSS_model_info_for_EASE must be a ',...
            'MAPS model structure'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'construct_additional_LSS_model_info_for_EASE must be of ',...
            'the linear state space class'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONSTRUCT ADDITIONAL NLBL MODEL INFO FOR EASE
function msg = get_construct_additional_NLBL_model_info_for_EASE_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['construct_additional_NLBL_model_info_for_EASE was not ',...
            'passed the right number of inputs: it requires 1 input ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'construct_additional_NLBL_model_info_for_EASE must be a ',...
            'MAPS model structure'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'construct_additional_NLBL_model_info_for_EASE must be of ',...
            'the non-linear backward looking model class'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONSTRUCT DEFAULT STRUCTURE FROM CELL ARRAY CONFIG
function msg = ...
    get_construct_default_structure_from_cell_array_config_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['construct_default_structure_from_cell_array_config ',...
            'was not passed the right number of inputs: it requires ',...
            '1 input but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'construct_default_structure_from_cell_array_config must ',...
            'be a two-column cell array of field name (strings) and ',...
            'default value pairs'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONSTRUCT MAPS DECOMP INSTRUCTIONS FORM EASE INPUTS
function msg = ...
    get_construct_MAPS_decomp_instructions_from_EASE_inputs_error...
    (errCode,errArgs)                                                       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs received by '...
            'construct_MAPS_decomp_instructions_from_EASE_inputs'...
            ' is not right: we expected 2 inputs but received '...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by '...
            'construct_MAPS_decomp_instructions_from_EASE_inputs'...
            ' is not as expected: it must be a structure'];
    case 'BadInput2'
        msg = ['2nd input received by '...
            'construct_MAPS_decomp_instructions_from_EASE_inputs'...
            ' is not as expected: it must be a cell'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT CELL ARRAY OF VECTORS TO MATRIX EQUIVALENT
function msg = ...
    get_convert_cell_array_of_vectors_to_matrix_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_cell_array_of_vectors_to_matrix_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'or 2 inputs (depending on whether the optional matrix ',...
            'column numbers argument is passed in), but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_cell_array_of_vectors_to_matrix_equivalent must ',...
            'be a column cell array of numeric or logical row vectors'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to ',...
            'convert_cell_array_of_vectors_to_matrix_equivalent must ',...
            'be a numeric integer representing the number of columns ',...
            'to be included in the output matrix'];
    case 'IncompatibleColNums'
        msg = ['The number of columns specified to be included in the ',...
            'output matrix must not be smaller than the longest row ',...
            'vector in the column cell array input (i.e. this ',...
            'function cannot be used to remove data from the input ',...
            'vectors)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT COLUMN STRING ARRY TO BOOLEAN EQUIVALENT
function msg = ...
    get_convert_column_string_array_to_boolean_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_column_string_array_to_boolean_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_column_string_array_to_boolean_equivalent must ',...
            'be a column cell string array or single string'];
    case 'InvalidBooleanStrs'
        permittedStrLogicals = create_comma_separated_list(errArgs);
        msg = ['MAPS permits ', permittedStrLogicals,' as valid ',...
            'string logicals. The following strings, therefore, are ',...
            'not valid MAPS string logicals:'];
    case 'InvalidBooleanStrs:Instance'
        msg = ['''',errArgs{1},''''];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT COLUMN STRING ARRY TO NUMERIC EQUIVALENT
function msg = ...
    get_convert_column_string_array_to_numeric_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_column_string_array_to_numeric_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'or 2 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_column_string_array_to_nuermic_equivalent must ',...
            'be a column cell string array or single string'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to ',...
            'convert_column_string_array_to_nuermic_equivalent must ',...
            'be a scalar logical dictating whether or not to check ',...
            'that the strings are valid representations of numerics'];
    case 'BadStringNumerics'
        msg = ['One or more of the input strings is not a valid ',...
            'string representation of a number - MAPS found the ',...
            'following exceptions:'];
    case 'BadStringNumerics:Instance'
        msg = ['''',errArgs{1},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT DATASET FROM EASE TO MAPS FORMAT
function msg = get_convert_dataset_from_EASE_to_MAPS_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_dataset_from_EASE_to_MAPS_format was not ',...
            'passed the right number of inputs: it requires 4 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_dataset_from_EASE_to_MAPS_format must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_dataset_from_EASE_to_MAPS_format must be a cell ',...
            'array containing an EASE formatted dataset'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'convert_dataset_from_EASE_to_MAPS_format must be a cell ',...
            'array containing a configuration for an EASE dataset'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'convert_dataset_from_EASE_to_MAPS_format must be a two-',...
            'dimensional cell string of configuration information for ',...
            'the MAPS dataset structure with at least 6 columns'];
    case 'EASEdataInconsistentWithConfig'
        msg = ['The number of columns in the EASE dataset cell input ',...
            'is not consistent with the number of columns in the EASE ',...
            'dataset configuration cell: the dataset must have two ',...
            'more columns than the configuration'];
    case 'EASEconfigInconsistentWithMAPSconfig'
        msg = ['The number of rows in the EASE dataset configuration ',...
            'cell (representing the maximum number number of series ',...
            'types in the dataset) must equal the number of rows in ',...
            'the MAPS dataset configuration (so that a mapping is ',...
            'provided for each of the series types)'];
    case 'DataConversionFailure'
        msg = ['It was not possible to convert the EASE dataset to an ',...
            'equivalent MAPS formatted dataset for the following ',...
            'reason(s):'];
    case 'DataConversionFailure:Instance'
        dataTypeStr = create_comma_separated_list(errArgs);
        msg = ['MAPS encountered the following error in attempting to ',...
            'convert the data associated with ''',dataTypeStr,''''];
    case 'BadEASEmetadata'
        msg = ['The data in the penultimate column of the EASE ',...
            'dataset must be a cell string array of series metadata'];
    case 'BadEASEdata'
        msg = ['The data in the final column of the EASE ',...
            'dataset must be a cell array of numeric vectors'];
    case 'UnknownStorageType'
        msg = ['It was not possible to convert the series data from ',...
            'the EASE dataset to MAPS format because there was an ',...
            'unknown and unhandled storage type associated with the ',...
            'series in the MAPS data configuration'];
    case 'MetadataModelMismatch'
        msg = ['It was not possible to reorder the data vectors from ',...
            'the EASE dataset because the associated metadata did ',...
            'not match the model metadata. The MAPS model object ',...
            'index lookup helper returned the following error(s):'];
    case 'CellToMatConversionFailure'
        msg = ['It was not possible to convert the cell array of data ',...
            'vectors from the EASE dataset into a model-ordered ',...
            'matrix. The MATLAB cell2mat function returned the ',...
            'following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT DATASET FROM MAPS TO EASE FORMAT
function msg = get_convert_dataset_from_MAPS_to_EASE_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_dataset_from_MAPS_to_EASE_format was not ',...
            'passed the right number of inputs: it requires 4 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_dataset_from_MAPS_to_EASE_format must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_dataset_from_MAPS_to_EASE_format must be a MAPS ',...
            'formatted dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'convert_dataset_from_MAPS_to_EASE_format must be a two-',...
            'dimensional cell string of configuration information for ',...
            'the MAPS dataset structure with at least 6 columns'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'convert_dataset_from_MAPS_to_EASE_format must be a cell ',...
            'array containing a configuration for an EASE dataset'];
    case 'EASEconfigInconsistentWithMAPSconfig'
        msg = ['The number of rows in the EASE dataset configuration ',...
            'cell (representing the maximum number number of series ',...
            'types in the dataset) must equal the number of rows in ',...
            'the MAPS dataset configuration (so that a mapping is ',...
            'provided for each of the series types)'];
    case 'DataConversionFailure'
        msg = ['It was not possible to convert the MAPS dataset to an ',...
            'equivalent EASE formatted dataset for the following ',...
            'reason(s):'];
    case 'DataConversionFailure:Instance'
        dataTypeStr = create_comma_separated_list(errArgs);
        msg = ['MAPS encountered the following error in attempting to ',...
            'convert the data associated with ''',dataTypeStr,''''];
    case 'BadCell'
        msg = ['The MAPS configuration for that data specified a ',...
            'cell format, in which case the data in the field must be ',...
            'a two-column cell array, where the first column is a ',...
            'cell string array of metadata and the second column is a ',...
            'cell array of numeric vectors'];
    case 'BadMatrix'
        msg = ['The MAPS configuration for that data specified a ',...
            'matrix format, in which case the data in the field must ',...
            'be a two-dimensional numeric matrix of data'];
    case 'UnknownStorageType'
        msg = ['It was not possible to convert the series data from ',...
            'the EASE dataset to MAPS format because there was an ',...
            'unknown and unhandled storage type associated with the ',...
            'series in the MAPS data configuration'];
    case 'BadMAPSmetadata'
        msg = ['The metadata to be packed in the penultimate column ',...
            'of the EASE dataset must be a cell string array'];
    case 'BadMAPSdata'
        msg = ['The data to be packed in the final column of the EASE ',...
            'dataset must be a cell array of numeric vectors'];
    case 'InconsistentMAPSmetadataData'
        msg = ['The metadata and data to be packed into the final two ',...
            'columns of the EASE dataset must have the same number of ',...
            'rows (representing the number of variables of that type)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT EQUATIONS TO MODEL ORDERED FUNCTION HANDLE
function msg = ...
    get_convert_equations_to_model_ordered_function_handle_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_equations_to_model_ordered_function_handle ',...
            'was not passed the right number of inputs: it requires 4 ',...
            'inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT EXPLICIT EQUATIONS TO IMPLICIT
function msg = get_convert_explicit_equations_to_implicit_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_explicit_equations_to_implicit was not passed ',...
            'the right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_explicit_equations_to_implicit must be a column ',...
            'cell array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT EXPRESSIONS TO FUNCTION HANDLE
function msg = get_convert_expressions_to_function_handle_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_expressions_to_function_handle was not passed ',...
            'the right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_expressions_to_function_handle must be a two-',...
            'dimensional cell string array of expressions'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT FORECAST RUN DATASET FROM EASE TO MAPS FORMAT
function msg = ....
    get_convert_forecast_run_dataset_from_EASE_to_MAPS_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_forecast_run_dataset_from_EASE_to_MAPS_format ',...
            'was not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_forecast_run_dataset_from_EASE_to_MAPS_format ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_forecast_run_dataset_from_EASE_to_MAPS_format ',...
            'must be a cell array containing an EASE formatted ',...
            'forecast run dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT FORECAST RUN DATASET FROM MAPS TO EASE FORMAT
function msg = ....
    get_convert_forecast_run_dataset_from_MAPS_to_EASE_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_forecast_run_dataset_from_MAPS_to_EASE_format ',...
            'was not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_forecast_run_dataset_from_MAPS_to_EASE_format ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_forecast_run_dataset_from_MAPS_to_EASE_format ',...
            'must be a MAPS formatted forecast run dataset structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT LOGICAL COLUMN VECTOR TO STRING EQUIVALENT
function msg = ...
    get_convert_logical_column_vector_to_string_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_logical_column_vector_to_string_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_logical_column_vector_to_string_equivalent must ',...
            'be a column vector of logicals'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT NEW JUDGEMENTS OBJECT TO OLD JUDGEMENTS STRUCTURE
function msg = ...
    get_convert_new_judgements_obj_to_old_judgements_struct_error(...
    errCode,~)                                                              %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_new_judgements_obj_to_old_judgements_struct ',...
            'was not passed the right number of inputs: it requires ',...
            '1 input, but did not receive any'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT NUMERIC COLUMN VECTOR TO STRING EQUIVALENT
function msg = ...
    get_convert_numeric_column_vector_to_string_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_numeric_column_vector_to_string_equivalent ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_numeric_column_vector_to_string_equivalent must ',...
            'be a finite real numeric column vector'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT NUMERIC SCALAR TO STRING EQUIVALENT
function msg = get_convert_numeric_scalar_to_string_equivalent_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_numeric_scalar_to_string_equivalent was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_numeric_scalar_to_string_equivalent must be a ',...
            'real numeric scalar'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT OLD JUDGEMENTS STRUCT TO NEW JUDGEMENTS OBJ
function msg = get_convert_old_fix_responses_struct_to_new_object_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_old_fix_responses_struct_to_new_object was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but only received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT OLD JUDGEMENTS STRUCT TO NEW JUDGEMENTS OBJ
function msg = ...
    get_convert_old_judgements_struct_to_new_judgements_obj_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_old_judgements_struct_to_new_judgements_obj ',...
            'was not passed the right number of inputs: it requires ',...
            '3 inputs, but only received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT PARAMETER NUMERICS TO STRINGS
function msg = get_convert_parameter_numerics_to_strings_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_parameter_numerics_to_strings was not passed ',...
            'the right number of inputs: it requires 1 or 3 inputs ',...
            '(depending on whether parameter bounds are passed in), ',...
            'but received ',errArgs{1}];
    case 'InconsistentNargoutNargin'
        msg = ['If only 1 onput is passed in to ',...
            'convert_parameter_numerics_to_strings, then only 1 ',...
            'output argument can be requested'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT PARAMETER STRINGS TO NUMERICS
function msg = get_convert_parameter_strings_to_numerics_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_parameter_strings_to_numerics was not passed ',...
            'the right number of inputs: it requires 1 or 3 inputs ',...
            '(depending on whether parameter bounds are passed in), ',...
            'but received ',errArgs{1}];
    case 'InconsistentNargoutNargin'
        msg = ['If only 1 onput is passed in to ',...
            'convert_parameter_strings_to_numerics, then only 1 ',...
            'output argument can be requested'];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_parameter_strings_to_numerics must be a column ',...
            'cell array of string representations of parameter values'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_parameter_strings_to_numerics must be a column ',...
            'cell array of string representations of parameter lower ',...
            'bound values'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'convert_parameter_strings_to_numerics must be a column ',...
            'cell array of string representations of parameter upper ',...
            'bound values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT PROV RUN DATASET FROM EASE TO MAPS FORMAT
function msg = ...
    get_convert_prov_run_dataset_from_EASE_to_MAPS_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_prov_run_dataset_from_EASE_to_MAPS_format was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_prov_run_dataset_from_EASE_to_MAPS_format must ',...
            'be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_prov_run_dataset_from_EASE_to_MAPS_format must ',...
            'be a cell array containing an EASE formatted provisional ',...
            'run dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT FORECAST RUN DATASET FROM MAPS TO EASE FORMAT
function msg = ....
    get_convert_prov_run_dataset_from_MAPS_to_EASE_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_forecast_run_dataset_from_MAPS_to_EASE_format ',...
            'was not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_forecast_run_dataset_from_MAPS_to_EASE_format ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_forecast_run_dataset_from_MAPS_to_EASE_format ',...
            'must be a MAPS formatted provisional run dataset structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT RUN DATASETS FROM EASE TO MAPS FORMAT
function msg = get_convert_run_datasets_from_EASE_to_MAPS_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_run_datasets_from_EASE_to_MAPS_format was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_run_datasets_from_EASE_to_MAPS_format must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_run_datasets_from_EASE_to_MAPS_format must be a ',...
            'cell array containing an EASE formatted forecast run ',...
            'dataset'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'convert_run_datasets_from_EASE_to_MAPS_format must be a ',...
            'cell array containing an EASE formatted provisional run ',...
            'dataset'];
    case 'BadRunData'
        msg = ['MAPS could not convert the EASE formatted provisional ',...
            'and forecast run datasets to the MAPS format for the ',...
            'following reason(s):'];
    case 'BadRunData:Instance'
        msg = ['There were errors in converting the ',errArgs{1},...
            ' run dataset to the MAPS format:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT RUN DATASETS FROM MAPS TO EASE FORMAT
function msg = get_convert_run_datasets_from_MAPS_to_EASE_format_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_run_datasets_from_MAPS_to_EASE_format was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_run_datasets_from_MAPS_to_EASE_format must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_run_datasets_from_MAPS_to_EASE_format must be a ',...
            'MAPS formatted forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'convert_run_datasets_from_MAPS_to_EASE_format must be a ',...
            'MAPS formatted provisional run dataset structure'];
    case 'BadRunData'
        msg = ['MAPS could not convert the EASE formatted provisional ',...
            'and forecast run datasets to the EASE format for the ',...
            'following reason(s):'];
    case 'BadRunData:Instance'
        msg = ['There were errors in converting the ',errArgs{1},...
            ' run dataset to the EASE format:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT STRING TO ALTERNATIVE DATA TYPE
function msg = ...
    get_convert_string_or_vector_string_array_to_column_array_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_string_or_vector_string_array_to_column_array ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_string_or_vector_string_array_to_column_array ',...
            'must be a string, column or row cell string array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT STRING TO ALTERNATIVE DATA TYPE
function msg = get_convert_string_to_alternative_data_type_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_string_to_alternative_data_type was not ',...
            'passed the right number of inputs: it requires 2 or 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_string_to_alternative_data_type must be a string ',...
            'or column cell string array to convert'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'convert_string_to_alternative_data_type must be a string ',...
            'describing the target data type for the input string or ',...
            'strings'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'convert_column_string_array_to_nuermic_equivalent must ',...
            'be a scalar logical dictating whether or not to check ',...
            'that the input strings are valid representations of ',...
            'the numeric class (if relevant) or not'];        
    case 'UnhandledDataType'
        msg = ['The input data type ''',errArgs{1},''' is not handled ',...
            'by this function'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT SYMBOLIC MATRICES TO FUNCTION HANDLES
function msg = get_convert_symbolic_matrices_to_function_handles_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_symbolic_matrices_to_function_handles was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CONVERT SYMBOLIC MATRIX TO FUNCTION HANDLE
function msg = get_convert_symbolic_matrix_to_function_handle_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['convert_symbolic_matrix_to_function_handle was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'convert_symbolic_matrix_to_function_handle must be a two-',...
            'dimensional symbolic matrix (compatible with the MATLAB ',...
            'symbolic toolbox)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE COMMA SEPARATED LIST
function msg = get_create_comma_separated_list_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_comma_separated_list was not passed the right ',...
            'number of inputs: it requires 1 input, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_comma_separated_list must ',...
            'a row or column cell string array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE DECOMP ADD ON ADVANCED INFO
function msg = get_create_decomp_add_on_advanced_info_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_decomp_add_on_advanced_info was not passed the ',...
            'right number of inputs: it requires 1 input but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_decomp_add_on_advanced_info must be a MAPS linear ',...
            'state space model structure containing parsed add-on info'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'create_decomp_add_on_advanced_info must be of the linear ',...
            'state space model class'];
    case 'NoDecompAddOn'
        msg = ['MAPS linear state space model input to ',...
            'create_decomp_add_on_advanced_info must have a ',...
            'decompositions add-on attached'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE DECOMP ADD ON
function msg = get_create_decomp_add_on_error(errCode,errArgs)              %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_decomp_add_on was not passed the right number ',...
            'of inputs: it requires 2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_decomp_add_on must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to create_decomp_add_on must be a ',...
            'path file name string to the decomposition add on file'];
    case 'BadModelClass'
        msg = ['Model input passed to create_decomp_add_on must be of ',...
            'the linear state space class'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE DECOMP ADD ON NUMERICS
function msg = get_create_decomp_add_on_numerics_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_decomp_add_on_numerics was not passed the ',...
            'right number of inputs: it requires 1 input but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_decomp_add_on_numerics ',...
            'must be a MAPS linear state space model structure ',...
            'containing symbolic info'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to ',...
            'create_decomp_add_on_numerics must be a column vector of ',...
            'finite, real, numeric parameters required as additional ',...
            'parameters (above & beyond those belonging to the ',...
            'original model) for decompositions'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_decomp_add_on_numerics ',...
            'must be of the linear state space model class'];
    case 'NoDecompAddOn'
        msg = ['MAPS linear state space model input to ',...
            'create_decomp_add_on_numerics must have a ',...
            'decompositions add-on attached'];
    case 'BadNewParamsInput'
        msg = ['The decomposition add-on does not include new ',...
            'parameters so the optional 2nd input to ',...
            'create_decomp_add_on_numerics of new decomposition ',...
            'parameter values should not be provided'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE DECOMP ADD ON SYMBOLICS
function msg = get_create_decomp_add_on_symbolics_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_decomp_add_on_symbolics was not passed the ',...
            'right number of inputs: it requires 1 input but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_decomp_add_on_symbolics ',...
            'must be a MAPS linear state space model structure ',...
            'containing parsed add-on info'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_decomp_add_on_symbolics ',...
            'must be of the linear state space model class'];
    case 'NoDecompAddOn'
        msg = ['MAPS linear state space model input to ',...
            'create_decomp_add_on_symbolics must have a ',...
            'decompositions add-on attached'];
    case 'BadDecompEqs'
        msg = ['The new model decomposition equations must be linear ',...
            'and mean zero just as the original model equations are'];
    case 'BadNewVarEqs'
        msg = ['Equations defining new model variables must be linear ',...
            'and mean zero just as the original model equations are'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE ESTIMATION PRIORS AND INPUTS
function msg = get_create_estimation_priors_and_inputs_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_estimation_priors_and_inputs was not passed ',...
            'the right number of inputs: it requires 2 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_estimation_priors_and_inputs must be a MAPS model ',...
            'structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_estimation_priors_and_inputs must be a path file ',...
            'name string to the estimation info file'];
    case 'BadModelClass'
        msg = ['Model input passed to ',...
            'create_estimation_priors_and_inputs must be of the ',...
            'linear state space class'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE ESTIMATION PRIORS STRUCTURE
function msg = get_create_estimation_priors_structure_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_estimation_priors_structure was not passed the ',...
            'right number of inputs: it requires 2 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_estimation_priors_structure must be a MAPS LSS ',...
            'model structure'];        
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_estimation_priors_structure must be a structure ',...
            'of parsed estimation info file information'];
    case 'BadPriorBounds'
        msg = ['On imputing bounds that were not provided in the info ',...
            'file using information about the prior distributions, ',...
            'one or more of the bound pairs is invalid (lower bound ',...
            'greater than or equal the upper bound)'];  
    case 'BadPriorBounds:Instance'
        if strcmp(errArgs{1},'false') && strcmp(errArgs{2},'true')
            bound1Type = 'a lower';
            bound2Type = 'an upper';
            problemType = 'larger';
            problemDescriptor = 'largest';
            bound1Val = errArgs{6};
            bound2Val = errArgs{7};
        elseif strcmp(errArgs{1},'true') && strcmp(errArgs{2},'false')
            bound1Type = 'an upper';
            bound2Type = 'a lower';
            problemType = 'smaller';
            problemDescriptor = 'smallest';
            bound1Val = errArgs{7};
            bound2Val = errArgs{6};
        end
        msg = ['You provided ',bound1Type,' bound in the info file ',...
            'but not ',bound2Type,' bound for a ',errArgs{3},' prior ',...
            'distribution with parameters ',errArgs{4},' and ',...
            errArgs{5},'. That bound of ',bound1Val,' is not valid ',...
            'because it is ',problemType,' than ',bound2Type,' bound ',...
            'of ',bound2Val,' computed as the ',problemDescriptor,...
            ' parameter value that might reasonably be drawn from the ',...
            'prior'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE TAB ALIGNED TABLE FROM CELL STRING ARRAY
function msg = ...
    get_create_tab_aligned_table_from_cell_string_array_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_tab_aligned_table_from_cell_string_array was ',...
            'not passed the right number of inputs: it requires 1 ',...
            'input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_tab_aligned_table_from_cell_string_array must be ',...
            'a two-dimensional cell string array'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CMAES_MAPS
function msg = get_CMAES_MAPS_error(errCode,errArgs)                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['CMAES_MAPS was not passed the right number of inputs: ',...
            'it requires at least 5 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to CMAES_MAPS must be a string ',...
            'representing the name of the objective function'];
    case 'BadInput2'
        msg = ['2nd input passed to CMAES_MAPS must be a finite ',...
            'numeric column vector of initial conditions (guesses) ',...
            'for the objective function arguments'];            
    case 'BadInput3'
        msg = ['3rd input passed to CMAES_MAPS must be a positive ',...
            'numeric scalar representing the initial search variance ',...
            'to use'];  
    case 'BadInput4'
        msg = ['4th input passed to CMAES_MAPS must be a finite ',...
            'numeric column vector of search variances to use for ',...
            'each of the objective function arguments in the ',...
            'initialisation'];
    case 'BadInput5'
        msg = ['5th input passed to CMAES_MAPS must be a structure of ',...
            'options for the CMAES algorithm'];   
    case 'UnknownObjectiveFunc'
        msg = ['The input objective function cannot be found on the ',...
            'MATLAB search path. MAPS'' file existence checker ',...
            'returned the following error:'];      
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CSMINWEL_MAPS
function msg = get_csminwel_MAPS_error(errCode,errArgs)                     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['csminwel_MAPS was not passed the right number of ',...
            'inputs: it requires at least 6 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to csminwel_MAPS must be a string ',...
            'representing the name of the objective function'];
    case 'BadInput2'
        msg = ['2nd input passed to csminwel_MAPS must be a finite ',...
            'numeric column vector of initial conditions (guesses) ',...
            'for the objective function arguments'];            
    case 'BadInput3'
        msg = ['3rd input passed to csminwel_MAPS must be a positive ',...
            'definite, square matrix initialisation for the Hessian'];  
    case 'BadInput4'
        msg = ['4th input passed to csminwel_MAPS must be a string ',...
            'representing the name of a function to return the ',...
            'gradient (whic can be an empty string in which case the ',...
            'gradient is computed numerically)'];
    case 'BadInput5'
        msg = ['5th input passed to csminwel_MAPS must be a positive, ',...
            'finite, real scalar value for the absolute change in the ',...
            'objective function termination criteria'];
    case 'BadInput6'
        msg = ['6th input passed to csminwel_MAPS must be a positive, ',...
            'real integer for the maximum number of iterations to run ',...
            'before terminating'];     
    case 'UnknownObjectiveFunc'
        msg = ['The input objective function cannot be found on the ',...
            'MATLAB search path. MAPS'' file existence checker ',...
            'returned the following error:'];
    case 'UnknownGradFunc'
        msg = ['The input gradient function cannot be found on the ',...
            'MATLAB search path. MAPS'' file existence checker ',...
            'returned the following error:'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DECOMPOSE IMPULSE RESPONSE
function msg = get_decompose_impulse_response_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['decompose_impulse_response was not passed the right ',...
            'number of inputs: it requires at least 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
    case 'BadModelClass'
        msg = ['1st input received by decompose_impulse_response'...
            ' must be a MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input received by decompose_impulse_response'...
            ' must be a variable mnemonic string.'];
    case 'BadInput3'
        msg = ['3rd input received by decompose_impulse_response'...
            ' must be a shock mnnemonic string.'];
    case 'BadInput4'
        msg = ['4th input received by decompose_impulse_response'...
            ' must be a string defining the decomposition to use.'...
            ' This could be an equation name, ''Shock'', or the name'...
            ' of an advanced decomposition in the model).'];
    case 'BadInput5'
        msg = ['5th input received by decompose_impulse_response'...
            ' must be a positive integer representing the number of'...
            ' periods over which to compute the impulse response.'];
    case 'BadInput6'
        msg = ['6th input received by decompose_impulse_response'...
            ' must be a non-negative integer representing the period in'... 
            ' which anticipated shocks are realised.'];
    case 'InconsistentRealisationPeriodAndHorizon'
        msg = ['Anticipated shocks must be realised within the horizon'...
            ' over which the responses are being computed. Check the'...
            ' 5th and 6th input arguments.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DETERMINE STATIONARITY OF RAW OBSERVABLES
function msg = get_determine_stationarity_of_raw_observables_error(...
    errCode,~)                                                              %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['determine_stationarity_of_raw_observables was not ',...
            'passed the right number of inputs: it requires 1 input ',...
            'but did not receive any'];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'determine_stationarity_of_raw_observables must be a MAPS '...
            'linear state space model structure'];        
    case 'BadModelClass'
        msg = ['The model passed in as input must be of the linear ',...
            'state space class'];
    case 'BadModelCharacteristic'
        msg = ['The model passed in as input must have data ',...
            'transformation equations and raw observables otherwise ',...
            'there is no way of determining whether or not the raw ',...
            'observables are stationary!'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DIGNOSE CHAIN AUTOCORRELATION
function msg = get_diagnose_chain_autocorrelation_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['diagnose_chain_autocorrelation was not passed the right ',...
            'number of inputs: it requires at least 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by diagnose_chain_autocorrelation'...
            ' must be a column cell array of variable mnemonic strings.'];
    case 'BadInput2'
        msg = ['2nd input received by diagnose_chain_autocorrelation'...
            ' must be an nThetaEstMnems x nTotalParameterDraws matrix'...
            ' representing a chain of draws for multiple parameters.'];
    case 'BadInput3'
        msg = ['3rd input received by diagnose_chain_autocorrelation'...
            ' must be a positive integer representing the number of'... 
            ' rows of charts to be presented per figure.'];
    case 'BadInput4'
        msg = ['3rd input received by diagnose_chain_autocorrelation'...
            ' must be a positive integer representing the number of'... 
            ' columns of charts to be presented per figure.'];
    case 'BadInput5'
        msg = ['5th input received by diagnose_chain_autocorrelation'...
            ' must be a positive integer indicating the maximum number'...
            ' of lags of auto-correlation to compute.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DIAGNOSE CHAIN DISTRIBUTIONS
function msg = get_diagnose_chain_distributions_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['diagnose_chain_distributions was not passed the right ',...
            'number of inputs: it requires 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by diagnose_chain_distributions'...
            ' must be a column cell array of variable mnemonic strings.'];
    case 'BadInput2'
        msg = ['2nd input received by diagnose_chain_distributions'...
            ' must be an nThetaEstMnems x nTotalParameterDraws matrix'...
            ' representing a chain of draws for multiple parameters.'];
    case 'BadInput3'
        msg = ['3rd input received by diagnose_chain_distributions'...
            ' must be a positive integer representing the number of'... 
            ' rows of charts to be presented per figure.'];
    case 'BadInput4'
        msg = ['3rd input received by diagnose_chain_distributions'...
            ' must be a positive integer representing the number of'... 
            ' columns of charts to be presented per figure.'];
    case 'BadInput5'
        msg = ['5th input received by diagnose_chain_distributions'...
            ' must be a two column {param mnem, distribution data}'...
            ' cell array, consistent with that produced by the'...
            ' prepare_prior_distribution_data function.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DIAGNOSE CHAIN VISUAL INSPECTION
function msg = get_diagnose_chain_visual_inspection_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['diagnose_chain_visual_inspection was not passed the right ',...
            'number of inputs: it requires 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by diagnose_chain_visual_inspection'...
            ' must be a column cell array of variable mnemonic strings.'];
    case 'BadInput2'
        msg = ['2nd input received by diagnose_chain_visual_inspection'...
            ' must be an nThetaEstMnems x nTotalParameterDraws matrix'...
            ' representing a chain of draws for multiple parameters.'];
    case 'BadInput3'
        msg = ['3rd input received by diagnose_chain_visual_inspection'...
            ' must be a positive integer representing the number of'... 
            ' rows of charts to be presented per figure.'];
    case 'BadInput4'
        msg = ['3rd input received by diagnose_chain_visual_inspection'...
            ' must be a positive integer representing the number of'... 
            ' columns of charts to be presented per figure.'];
    case 'BadInput5'
        msg = ['5th input received by diagnose_chain_visual_inspection'...
            ' must be a positive integer representing the number of'...
            ' periods over which to compute a moving average of the'...
            ' parameter draws.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DIAGNOSE CONVERGENCE BGR
function msg = get_diagnose_convergence_BGR_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['diagnose_convergence_BGR was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by diagnose_convergence_BGR'...
            ' must be an nThetaEstMnems x nTotalParameterDraws matrix'...
            ' representing a chain of draws for multiple parameters.'];
     case 'BadInput2'
        msg = ['2nd input received by diagnose_convergence_BGR'...
            ' must be scalar indicating the number of points in the'...
            ' chain at which to evaluate the BGR statistic.'];
    case 'tooFewChains'
        msg = ['The Brooks and Gelman diagnostics requires at ',...
            'least 2 chains, while here there are fewer.'];
     case 'tooFewDraws'
        msg = ['It is necessary to have at least 500 draws in ',...
            'order to run the Brooks and Gelman diagnostics.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DIAGNOSE CONVERGENCE GR
function msg = get_diagnose_convergence_GR_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['diagnose_convergence_GR was not passed the right ',...
            'number of inputs: it requires 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by diagnose_convergence_GR'...
            ' must be a column cell array of variable mnemonic strings.'];
    case 'BadInput2'
        msg = ['2nd input received by diagnose_convergence_GR'...
            ' must be a 3D nThetaEstMnems x nTotalParameterDraws x '...
            ' nChains matrix representing multiple chains of draws '...
            'for a range of parameters.'];
    case 'BadInput3'
        msg = ['3rd input received by diagnose_convergence_GR'...
            ' must be a scalar indicating the number of points in the'...
            ' chain at which to evaluate the Gelman-Rubin statistic.'];
    case 'BadInput4'
        msg = ['4th input received by diagnose_convergence_GR'...
            ' must be a positive integer representing the number of'... 
            ' rows of charts to be presented per figure.'];
    case 'BadInput5'
        msg = ['5th input received by diagnose_convergence_GR'...
            ' must be a positive integer representing the number of'... 
            ' columns of charts to be presented per figure.'];
    case 'tooFewChains'
        msg = ['The Gelman-Rubin diagnostics requires at ',...
            'least 2 chains, while here there are fewer.'];
     case 'tooFewDraws'
        msg = ['It is necessary to have at least 1000 draws in ',...
            'order to run the Gelman-Rubin diagnostics.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DOES MODEL COMPONENT CONTAIN ELEMENT
function msg = get_does_model_component_contain_element_error(...
    errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['does_model_component_contain_element was not'...
            ' passed the right number of inputs: it requires 3 but received',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by does_model_component_contain_'...
            'element must be a MAPS model structure with a '...
            'Constructor field'];
    case 'BadInput2'
        msg = ['2nd input received by does_model_component_contain_'...
            'element must be a string representing the '...
            'model component to look for the element in, e.g. xMnems.'];
    case 'BadInput3'
        msg = ['3rd input received by does_model_component_contain_'...
            'element must be a cell containing a string representing the '...
            'model element to look for, e.g. gdp.']; 
    case 'NonExistentComponent'
        msg = ['The model component, ',errArgs{1},', in which you asked '...
            'to look for the element, ',errArgs{2},',  was not found in'...
            ' the model provided.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DOES MODEL COMPONENT EXIST
function msg = get_does_model_component_exist_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['does_model_component_exist was not passed the right '...
            'number of inputs: it requires 2 but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['The first input passed to does_model_component_exist '...
            'must be a valid MAPS model structure.'];
    case 'BadInput2'
        msg = ['The second input passed to does_model_component_exist '...
            'must be a string representing the model component to '...
            'check for.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% ESTIMATE PARAMETERS USING FIX RESPONSE MDE
function msg = get_estimate_parameters_using_fix_response_MDE_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['estimate_parameters_using_fix_response_MDE was not ',...
            'passed the right number of inputs: it requires 7 or ',...
            '8 inputs but received ',errArgs{1}];
    case 'BadInput6'
        msg = ['6th input passed to ',...
            'estimate_parameters_using_fix_response_MDE must be ',...
            'either a column cell string array of mnemonics for the ',...
            'target variables in the MDE or, optionally if only a ',...
            'single fix response is being targeted, a string for that ',...
            'variable''s mnemonic'];
    case 'BadInput7'
        msg = ['7th input passed to ',...
            'estimate_parameters_using_fix_response_MDE must be fix ',...
            'rsponses instruction object (to generate the responses ',...
            'for the MDE)'];
    case 'BadInput8'
        msg = ['Optional 8th input passed to ',...
            'estimate_parameters_using_fix_response_MDE must be ',...
            'structure of options for the MDE'];
    case 'FixResponseIsInvalid'
        msg = ['MAPS was unable to proceed with the MDE because one ',...
            'or both of the target variables and fix response ',...
            'instructions was invalid. MAPS'' filter fix responses ',...
            'function returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ESTIMATE PARAMETERS USING IMPULSE RESPONSE MDE
function msg = get_estimate_parameters_using_impulse_response_MDE_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['estimate_parameters_using_impulse_response_MDE was not ',...
            'passed the right number of inputs: it requires 7 or ',...
            '8 inputs but received ',errArgs{1}];
    case 'BadInput6'
        msg = ['6th input passed to ',...
            'estimate_parameters_using_impulse_response_MDE must be ',...
            'either a two-column cell string array of variable-shock ',...
            'mnemonic pairs identifying the impulse responses to target'];
    case 'BadInput7'
        msg = ['7th input passed to ',...
            'estimate_parameters_using_impulse_response_MDE must be ',...
            'numeric integer set equal 0 if unanticipated impulse ',...
            'responses are required and greater than zero ',...
            '(representing the period in which the anticipated shock ',...
            'occurs) if anticipated impulse responses are required'];
    case 'BadInput8'
        msg = ['Optional 8th input passed to ',...
            'estimate_parameters_using_impulse_response_MDE must be ',...
            'structure of options for the MDE'];
    case 'ImpulseResponseIsInvalid'
        msg = ['MAPS was unable to proceed with the MDE because one ',...
            'or both of the target variables and impulse response ',...
            'instructions was invalid. MAPS'' filter impulse ',...
            'responses function returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION ADD CAUSES AND THROW
function msg = get_generate_MAPS_exception_add_causes_and_throw_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_add_causes_and_throw was not ',...
            'passed the right number of inputs: it requires 3 or 4 ',...
            'inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION AND ADD CAUSES FROM LIST
function msg = get_generate_MAPS_exception_and_add_causes_from_list_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_and_add_causes_from_list was ',...
            'not passed the right number of inputs: it requires 3 or ',...
            '4 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'generate_MAPS_exception_and_add_causes_from_list must be ',...
            'a string representing the name of the exception ',...
            'identifier for the exception to create'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'generate_MAPS_exception_and_add_causes_from_list must be ',...
            'a row cell string array of arguments for the exception ',...
            'to create'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE FIRST ORDER SYMBOLIC SYSTEM
function msg = get_create_first_order_symbolic_system_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_first_order_symbolic_system was not passed the '...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_first_order_symbolic_system must be a column cell ',...
            'array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_first_order_symbolic_system must be a column cell ',...
            'string array of variable mnenomics appearing in the ',...
            'equation strings.'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_first_order_symbolic_system must be a column ',...
            'vector of real, finite values.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE FUNCTION HANDLE FROM MATRIX STRING
function msg = get_create_function_handle_from_matrix_string_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_function_handle_from_matrix_string was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_function_handle_from_matrix_string must be a ',...
            'character (string) representation of a matrix (or CLOB, ',...
            'meaning Character Large OBject)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_function_handle_from_matrix_string must be a ',...
            'row cell array of column cell string arrays of mnemonics ',...
            'describing the expected content of the matrix string ',...
            'organised by type (eg a column vector of variable ',...
            'mnemonics as the 1st element and a column vector of ',...
            'parameter mnemonics as the 2nd element)'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_function_handle_from_matrix_string must be a ',...
            'row cell string array of the names of each type of ',...
            'variable and/or parameter in the matrix string: these ',...
            'names are used as the input names in the resulting ',...
            'function handle - see MAPS documentation or the header ',...
            'in the function for more details'];
    case 'InconsistentNargs'
        msg = ['The number of matrix string arguments (the number of ',...
            'elements in the 1st cell input) must equal the number of ',...
            'matrix string argument names (the number of elements in ',...
            'the 2nd cell input)'];
    case 'InvalidFunHandleArgNames'
        msg = ['The function handle argument names (3rd input) must ',...
            'contain only alpha-numeric characters (eg ''theta'' or ',...
            '''theta0'' or ''theta_0'''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE FUNCTION HANDLE INCL PARENS
function msg = get_create_function_handle_incl_parens_error_msg_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_function_handle_incl_parens_error_msg was not passed ',...
            'the right number of inputs: it requires 2 or 3 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_function_handle_incl_parens_error_msg must be a column ',...
            'cell string array of the RHS of the equation system'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_function_handle_incl_parens_error_msg must be a column ',...
            'cell string array of the mnemonics for the ',...
            'variables in the system which are not on the LHS'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_function_handle_incl_parens_error_msg must be a column ',...
            'cell string array of parameter mnemonics'];
    case 'NestedParensError'
        msg = ['Phil Evans apologises for the inconvenience, but MAPS ',...
            'cannot solve your model.\n\nThe recursive solution ',...
            'algorithm implemented in MAPS involves successively ',...
            'substituting out contemporaneous endogenous variables ',...
            'until the entire system is a function of lagged ',...
            'variables alone. A by-product of this is that ',...
            'parentheses are added to every equation in which a ',...
            'contemporaneous variable appears when it is ',...
            'substituted out. If your model is large (and closer to ',...
            'being simultaneous), a large number of parentheses may ',...
            'have been added. Unfortunately, MATLAB ',...
            'cannot evaluate expressions with more than 32 levels of ',...
            'nested parentheses and the MAPS constructed recursive ',...
            'solution to your model has at least 32 nested ',...
            'parentheses in at least one solved-out equation.\n\nOne ',...
            'way of working round this problem is to search for and ',...
            'remove unnecessary parentheses from your model and/or ',...
            'expand out expressions involving parentheses. If after ',...
            'doing that you still see this error, please call Phil ',...
            'Evans on x4119.\n\nThe original MATLAB error message is ',...
            'displayed below:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LAG IDENTITIES
function msg = get_create_lag_identities_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_lag_identities was not passed the '...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_lag_identities must be a column cell ',...
            'string array of variable mnenomics appearing in the ',...
            'equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_lag_identities must be a column ',...
            'vector of real, finite values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LAG IDENTITY INITIAL CONDITIONS
function msg = get_create_lag_identity_initial_conditions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_lag_identity_initial_conditions was not ',...
            'passed the right number of inputs: it requires 3 inputs,',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_lag_identity_initial_conditions must be a ',...
            'structure summarising the variable information'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_lag_identities_initial_conditions must be a data ',...
            'structure to be used to create the lag identity initial ',...
            'conditions'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_lag_identities_initial_conditions must be a non-',...
            'negative integer corresponding to the model lag order'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LAG MNEMONICS
function msg = get_create_lag_mnemonics_error(errCode,errArgs)              %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_lag_mnemonics was not passed the right number ',...
            'of inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_lag_mnemonics must be a ',...
            'column cell string array of variable mnemonics to create ',...
            'lagged versions of (using the ''_b'' convention in MAPS)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LEAD MNEMONICS
function msg = get_create_lead_mnemonics_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_lead_mnemonics was not passed the right number ',...
            'of inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_lead_mnemonics must be a ',...
            'column cell string array of variable mnemonics to create ',...
            'lead versions of (using the ''_f'' convention in MAPS)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL EQUATION NUMERICS
function msg = ...
    get_create_LSS_model_equation_numerics_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_equation_numerics was not passed the ',...
            'right number of inputs: it requires 5 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_LSS_model_equation_numerics must be a row cell ',...
            'array containing a vector of parameter values and, ',...
            'depending on the model, a vector of steady state & ',...
            'parameter transformation values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL
function msg = get_create_LSS_model_error(errCode,errArgs)                  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model was not passed the right number of ',...
            'inputs: it requires 1 input but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_LSS_model must be a full ',...
            'path file name string to a .maps linear state space ',...
            'model info file'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL INVERSION INSTRUCTIONS
function msg = get_create_LSS_model_inversion_instructions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_inversion_instructions was not ',...
            'passed the right number of inputs: it requires 4 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_LSS_model_inversion_instructions must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_LSS_model_inversion_instructions must be a MAPS ',...
            'formatted forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_LSS_model_inversion_instructions must be a ',...
            'judgement content descriptor structure as output by the ',...
            'linear state space model judgements dataset validation ',...
            'routine'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'create_LSS_model_inversion_instructions must be a ',...
            'judgement information structure as output by the linear ',...
            'state space model judgements dataset validation routine'];
    case 'BadJudgementsInput'
        msg = ['The judgements input must constain some endogenous ',...
            'varaible fixes for an input for the inversion module to ',...
            'be created. If the judgements do not include fixes to ',...
            'endogenous variables (in any space), then there is no ',...
            'need to call this helper or do a linear state space ',...
            'model inversion'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL FILE
function msg = get_create_LSS_model_file_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_file was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_LSS_model_file must be a ',...
            'MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to create_LSS_model_file must be a ',...
            'full path file name string of a .maps linear state space ',...
            'model info file to create'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_LSS_model_file must be of ',...
            'the linear state space model class'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL NUMERICS
function msg = get_create_LSS_model_numerics_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_numerics was not passed the right ',...
            'number of inputs: it requires 1 or 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_LSS_model_numerics must ',...
            'be a MAPS linear state space model structure with parsed ',...
            'model info and symbolic information'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_LSS_model_file must be of ',...
            'the linear state space model class'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS MODEL SYMBOLICS
function msg = get_create_LSS_model_symbolics_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_model_symbolics was not passed the right ',...
            'number of inputs: it requires 1 input but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_LSS_model_symbolics must ',...
            'be a MAPS linear state space model structure containing ',...
            'parsed model info'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_LSS_model_symbolics must ',...
            'be of the linear state space model class'];
    case 'NonRecursiveSS'
        msg = ['MAPS'' could not recursively reduce the system of ',...
            'steady states and parameter transformations. MAPS'' ',...
            'recursive system solver/reducer returned the following ',...
            'error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE LSS STRUCTURAL SYMBOLIC MATRICES
function msg = get_create_LSS_structural_symbolic_matrices_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_LSS_structural_symbolic_matrices was not ',...
            'passed the right number of inputs: it requires 1, 5, 7 ',...
            'or 8 inputs (depending on input mode, model type and ',...
            'output arguments required) being used, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of model equations'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of model variable mnemonics'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of shock mnemonics'];
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a row ',...
            'cell array of column cell string arrays of parameter and ',...
            '(model dependent) steady state mnemonics'];
    case 'BadInput6'
        msg = ['6th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of measurement equations'];
    case 'BadInput7'
        msg = ['7th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of model observable mnemonics'];
    case 'BadInput8'
        msg = ['8th input passed to ',...
            'create_LSS_structural_symbolic_matrices must be a column ',...
            'cell sring array of measurement error mnemonics'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'create_LSS_structural_symbolic_matrices must be of the ',...
            'linear state space model class'];
    case 'BadNargoutMeasEqs'
        msg = ['The model input does not contain measurement ',...
            'equations so no more than 4 output arguments can be ',...
            'specified'];
    case 'BadNargoutMeasErs'
        msg = ['The model input does not contain measurement ',...
            'errors so no more than 6 output arguments can be specified'];
    case 'BadNarginMeasEqs'
        msg = ['The model input does not contain measurement ',...
            'equations so no more than 5 input arguments should be ',...
            'passed in'];
    case 'BadNarginMeasErs'
        msg = ['The model input does not contain measurement ',...
            'errors so no more than 7 input arguments should be ',...
            'passed in'];
    case 'TooFewThetaAndSS'
        msg = ['The model input contains steady states so the ',...
            'parameter and steady state mnemonics cell passed in as ',...
            '5th input should have two elements'];
    case 'TooManyThetaAndSS'
        msg = ['The model input does not contain steady states so the ',...
            'parameter and steady state mnemonics cell passed in as ',...
            '5th input should have only one element'];
    case 'BadNarginMeasEqsNargout'
        msg = ['Measurement equation symbolic matrices were requested ',...
            'in the output argument list, so ',...
            'create_LSS_structural_symbolic_matrices must be passed ',...
            'either 1 or at least 7 inputs'];
    case 'BadNarginMeasErsNargout'
        msg = ['Measurement equation symbolic matrices were requested ',...
            'in the output argument list and the model input contains ',...
            'measurement errors, so ',...
            'create_LSS_structural_symbolic_matrices must be passed 1 ',...
            'or 8 inputs'];
    case 'MeasEqsReorderError'
        msg = ['Richard Harrison says: ''Congratulations, you have ',...
            'hit one of the only holes in MAPS model file syntax ',...
            'checking. I blame Matt Waldron - you just can''t get the ',...
            'staff these days...maybe it''s a case of peanuts & ',...
            'monkeys. Anyhow, enough from me and over to Matt.'' Matt ',...
            'says: ''Thanks for your kind words Rich. The likely ',...
            'cause of this error is that the LHS of one or more of ',...
            'your measurement equations specifies a non-linear ',...
            'function of a model observable (which is against the ',...
            'rules). Here is how the error showed up in MAPS:'''];
    case 'BadlySpecifiedModelEqs'
        msg = ['Model equations must be linear with respect to model ',...
            'variables & shocks and mean zero (i.e. no constants). ',...
            'MAPS found the following exceptions:'];
    case 'BadlySpecifiedModelEqs:ConstantInModelEq'
        msg = ['The following term appears as a constant in ''',...
            errArgs{1},''': ''',errArgs{2},''''];
    case 'BadlySpecifiedMeasEqs'
        msg = ['Measurement equations must be linear with respect to ',...
            'model variables & measurement errors. MAPS found the ',...
            'following exceptions:'];
    case 'NonLinearity'
        msg = ['The following terms appear as part of non-linear ',...
            'expressions in ''',errArgs{1},''''];
    case 'NonLinearity:Instance'
        msg = ['''',errArgs{1},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE MAPS MODEL FILE
function msg = get_create_MAPS_model_file_text_info_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_MAPS_model_file_text_info was not passed the ',...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_MAPS_model_file_text_info ',...
            'must be a structure representing a MAPS model object'];
    case 'BadInput2'
        msg = ['2nd input passed to create_MAPS_model_file_text_info ',...
            'must be a four-column cell string array containing model ',...
            'file configuration information'];
    case 'BadInput3'
        msg = ['3rd input passed to create_MAPS_model_file_text_info ',...
            'must be a string representing the file name to write the ',...
            'model information out to'];
    case 'InvalidModel'
        msg = 'The input model was invalid for the following reason(s):';
    case 'BadModelContent'
        msg = ['MAPS could not reconstruct the information associated ',...
            'with the ''',errArgs{1},''' model file keyword. That ',...
            'information contained the following errors:'];
    case 'BadDataDims'
        msg = ['Model data to be written out to MAPS model files must ',...
            'be represented in column arrays (string arrays or ',...
            'vectors). The data from the model associated with the ''',...
            errArgs{1},''' model object identifier was not a column ',...
            'array and so cannot be written out to a MAPS model file'];
    case 'BadDataType'
        msg = ['Information to write out to the maps file must be in ',...
            'a numeric column vector or a column cell string array. ',...
            'The data associated with ''',errArgs{1},''' was not in ',...
            'a cell string array as expected'];
    case 'MissingModelContent'
        msg = ['It is compulsory for the model to contain information ',...
            'associated with ''',errArgs{1},''' but this information ',...
            'was missing from the model'];
    case 'InconsistentFieldSizes'
        msg = ['All of the seperate components of the model to ',...
            'amalgamate togther and write out under the above keyword ',...
            'must have the same number of lines such that they can be ',...
            'combined together. One or more of ''',errArgs{1},''' had ',...
            'different numbers of lines'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE MEASUREMENT EQS NUMERICS
function msg = ...
    get_create_measurement_equation_numerics_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_measurement_equation_numerics was not passed ',...
            'the right number of inputs: it requires 3 or 4 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_measurement_equation_numerics must be a row cell ',...
            'array containing a vector of parameter values and, ',...
            'depending on the model, a vector of steady state & ',...
            'parameter transformation values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE MODEL AND RUN BAYESIAN ESTIMATION SUPER MACRO
function msg = ...
    get_create_model_and_run_bayesian_estimation_super_macro_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_model_and_run_bayesian_estimation_super_macro ',...
            'was not passed the right number of inputs: it requires ',...
            'at least 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'create_model_and_run_bayesian_estimation_super_macro ',...
            'must be a string representing a MAPS model file'];
    case 'BadModelFile'
        msg = ['MAPS cannot proceed with the Bayesian estimation ',...
            'because it was not possible to create a model from ',...
            errArgs{1},'. MAPS'' model creation function returned the ',...
            'following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% CREATE MODEL
function msg = get_create_model_error(errCode,errArgs)                      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_model was not passed the right number of ',...
            'inputs: it requires 1 input but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_model must be a full path ',...
            'file name string to a .maps model info file'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE MODEL FILE
function msg = get_create_model_file_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_model_file was not passed the right number ',...
            'of inputs: it requires 2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_model_file must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to create_model_file must be a full ',...
            'path file name string of a .maps model info file to create'];
    case 'ModelClassDeterminationFailure'
        msg = ['MAPS was unable to create the model file because it ',...
            'could not determine whether the input model was linear ',...
            'state space or non-linear backward-looking. MAPS'' model ',...
            'unpacker returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE NLBL MODEL
function msg = get_create_NLBL_model_error(errCode,errArgs)                  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_NLBL_model was not passed the right number of ',...
            'inputs: it requires 1 input but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_NLBL_model must be a full ',...
            'path file name string to a .maps non-linear backward ',...
            'looking model info file'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE NLBL MODEL EVALUATION STRUCTURE
function msg = ...
    get_create_NLBL_model_evaluation_structure_error(errCode,errArgs)                       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_NLBL_model_evaluation_structure was not passed ',...
            'the right number of inputs: it requires 6 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'create_NLBL_model_evaluation_structure must be a ',...
            'structure summarising the NLBL model variable info'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'create_NLBL_model_evaluation_structure must be a ',...
            'cell string array of all the RHS variables in the ',...
            'system being inverted'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'create_NLBL_model_evaluation_structure must be a ',...
            'cell string array of all the LHS variables in the ',...
            'system being inverted'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'create_NLBL_model_evaluation_structure must be a ',...
            'structure containing the data to be used in the inversion'];
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'create_NLBL_model_evaluation_structure must be a ',...
            'non-negative integer denoting the initial period of the ',...
            'inversion'];
    case 'BadInput6'
        msg = ['6th input passed to ',...
            'create_NLBL_model_evaluation_structure must be a ',...
            'non-negative integer denoting the horizon of the ',...
            'inversion'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE NLBL MODEL SYMBOLICS
function msg = get_create_NLBL_model_symbolics_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_NLBL_model_symbolics was not passed the right ',...
            'number of inputs: it requires 1 input but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_NLBL_model_symbolics must ',...
            'be a MAPS non-linear backward looking model structure ',...
            'containing parsed model info'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_NLBL_model_symbolics must ',...
            'be of the non-linear backward looking model class'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE PRINTABLE FILE NAME STRING
function msg = get_create_printable_file_name_string_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_printable_file_name_string was not passed the ',...
            'right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_printable_file_name_string ',...
            'must be a string representing a full-path file name'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE PT MODEL
function msg = get_create_PT_model_error(errCode,errArgs)                   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_PT_model was not passed the right number of ',...
            'inputs: it requires 2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_PT_model must be a MAPS ',...
            'MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to create_PT_model must be a MAPS ',...
            'non-linear backward-looking model structure'];
    case 'BadLSSmodelClass'
        msg = ['1st MAPS model structure input to create_PT_model ',...
            'must be of the linear state space model class'];
    case 'BadNLBLmodelClass'
        msg = ['2nd MAPS model structure input to create_PT_model ',...
            'must be of the non-linear backward-looking class'];
    case 'BadLSSmodelCharacteristics'
        msg = ['It is not possible to create a post-transformation ',...
            'model to associate with a linear state space model that ',...
            'does not have raw observables and data transformation ',...
            'equations (i.e. that is simulation only)'];
    case 'ParameterOverlayFailure'
        msg = ['It was not possible to create the post-transformation ',...
            'model because the vector of parameters that resulted ',...
            'from overlaying overlapping linear state space model ',...
            'parameters on to the vector of non-linear backward-',...
            'looking model parameters was incomplete:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE REGRESSION TEST DATA FILE
function msg = get_create_regression_test_data_file_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_regression_test_data_file was not passed the ',...
            'right number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_regression_test_data_file ',...
            'must be a string representing the name of the test ',...
            'directory'];
    case 'BadInput2'
        msg = ['2nd input passed to create_regression_test_data_file ',...
            'must be a string representing the name of the function ',...
            'with the automated test cases to be appended'];
    case 'ExistingTestDataFile'
        msg = ['An automated test data file of the same name ''',...
            errArgs{1},''' already exists. To remove it and create a ',...
            'brand new file in the same directory, please delete it ',...
            'first'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE SIMULATION JOURNEY BASE
function msg = get_create_simulation_journey_base_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_simulation_journey_base was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_simulation_journey_base ',...
            'must be a MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to create_simulation_journey_base ',...
            'must be a positive numeric integer representing the ',...
            'horizon over which to setup the simulation base for the ',...
            'forecast'];
    case 'BadInput3'
        msg = ['3rd input passed to create_simulation_journey_base ',...
            'must be a positive real integer representing the length '....
            'of backdata horizon to include in the simulation base.'];
    case 'BadInput4'
        msg = ['4th input passed to create_simulation_journey_base ',...
            'must be a column vector of real numbers to use as initial ',...
            'conditions for the raw observables in the simulation base.'];
    case 'BadInput5'
        msg = ['5th input passed to create_simulation_journey_base ',...
            'must be a real two dimensional matrix containing values for '...
            'the time trends over the backdata and forecast horizon in '...
            'the simulation base.'];
    case 'BadModelClass'
        msg = ['MAPS model input to create_simulation_journey_base ',...
            'must be of the linear state space model class'];
    case 'ROinitCondsInputInvalidWithModel'
        msg = ['You have passed create_simulation_journey_base values ',...
            'to use as the initial conditions for raw observables in the ',...
            'base, but the model provided does not include raw observables.'];
    case 'ttInputInvalidWithModel'
        msg = ['You have passed create_simulation_journey_base values ',...
            'to use for the time trends in the base, but the model ',...
            'provided does not include any time trends.'];
    case 'ROinitCondsInputIncompatibleWithModel'
        msg = ['The number of initial conditions for raw observables passed ',...
            'to create_simulation_journey_base is not the same as the ',...
            'number of raw observables in the model.'];
    case 'ttInputIncompatibleWithModel'
        msg = ['The number of time trends for which you passed values to '...
            'create_simulation_journey_base was inconsistent with the number ',...
            'of time trends in the model provided.'];
    case 'ttInputIncompatibleWithPeriodsInput'
        msg = ['The number of periods for which you passed values for time '...
            'trends to create_simulation_journey_base was incompatible with '...
            'your other inputs. The length should be forecast horizon + ',...
            'length of backdata + 1 (initial condition).']; 
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE SYMBOLIC EQUATIONS
function msg = get_create_symbolic_equations_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_symbolic_equations was not passed the right ',...
            'number of inputs: it requires 1 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_symbolic_equations must be ',...
            'column cell string array of equations'];
    case 'SymEqCreationFailure'
        msg = ['It was not possible to create a symbolic equivalent ',...
            'for ''',errArgs{1},'''. MATLAB''s symbolic toolbox ',...
            'returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% CREATE SYMBOLIC MNEMONICS
function msg = get_create_symbolic_mnemonics_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['create_symbolic_mnemonics was not passed the right ',...
            'number of inputs: it requires 1 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to create_symbolic_mnemonics must be ',...
            'column cell string array of mnemonics'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DATA VALIDATION FAMILY OF FUNCTIONS
function msg = get_data_validation_family_of_functions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = [errArgs{1},' was not passed the right number of ',...
            'inputs: it requires 1 input but was not passed any'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% DECOMPOSE FLEXIBLY
function msg = get_decompose_flexibly_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs received by decompose_flexibly ',...
            'is not right: we expected 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by decompose_flexibly is not as ',...
            'expected: it must be a structure representing a MAPS model'];
    case 'BadInput2'
        msg = ['2nd input received by decompose_flexibly  ',...
            'is not as expected: it must be a structure ',...
            'containing the details of the decomposition to be performed'];
    case 'BadInput3'
        msg = ['3rd input received by decompose_flexibly is not as ',...
            'expected: it must be a matrix containing finite numerics'];
    case 'BadInput4'
        msg = ['4th input received by decompose_flexibly is not as ',...
            'expected: it must be a structure with fields '...
            '''anticipated'' and ''unanticipated'''];
    case 'BadInput5'
        msg = ['5th input received by decompose_flexibly is not as ',...
            'expected: it must be a matrix containing finite numerics'];
    case 'BadInput6'
        msg = ['6th input received by decompose_flexibly is not as ',...
            'expected: it must be a matrix containing finite numerics'];
    case 'NoYforMeasurementDecomp'
        msg = ['You are asking for a measurement_equation ',...
            'decomposition, but your model does not have model ',...
            'Observables (is a simulated model).'];
    case 'BadDecompType'
        msg = ['The decomposition type you are asking for does not ',...
            'exist. The available decomposition types are: '...
            '''shock_based'', ''model_equation'', ',...
            '''measurement_equation'', ''forward'', ''empirical''.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end
%% DECOMPOSE DATA IN FORECAST RUN
function msg = get_decompose_data_in_forecast_run_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs received by '...
            'decompose_data_in_forecast_run is not right: we expected 3'...
            ' inputs but received ' errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by decompose_data_in_forecast_run is'...
            ' not as expected: it must be a structure representing a '...
            'MAPS model'];
    case 'BadInput2'
        msg = ['2nd input received by decompose_data_in_forecast_run  ',...
            'is not as expected: it must be a structure'];
    case 'BadInput3'
        msg = ['3rd input received by decompose_data_in_forecast_run is'...
            ' not as expected: it must be an cell'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ELIMINATE ENDOGENOUS VARIABLES FROM EQUATIONS
function msg = get_eliminate_endogenous_variables_from_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['eliminate_endogenous_variables_from_equations was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'eliminate_endogenous_variables_from_equations must be a ',...
            'column cell array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'eliminate_endogenous_variables_from_equations must be a ',...
            'column cell string array of mnemonics to compute the ',...
            'incidence matrix for'];
    case 'BadEqSpec'
        msg = ['In order to eliminate a set of endogenous variables ',...
            'from the RHS'' of a set of equations, this function ',...
            'requires that those endogenous variables be uniquely ',...
            'identified on the LHS of the equations. MAPS'' index ',...
            'lookup function returned the following error'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% ENTER TEXT IN POP-UP WINDOW
function msg = get_enter_text_in_popup_window_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['enter_text_in_popup_window was not passed the right ',...
            'number of inputs: it requires at least 2 inputs, but ',...
            'received ',errArgs{1}]; 
    case 'BadInput1'
        msg = ['1st input passed to enter_text_in_popup_window ',...
            'must be a string to display as the title for the pop-up ',...
            'window.'];          
    case 'BadInput2'
        msg = ['2nd input passed to enter_text_in_popup_window ',...
            'must be a string or a column cell array of strings, ',...
            'containing the label/s for the text box/es to be filled in.'];          
    case 'BadInput3'
        msg = ['Optional 3rd input passed to enter_text_in_popup_window ',...
            'must be a string or a column cell array of strings, ',...
            'containing the default values for each text box.'];          
    case 'BadInput4'
        msg = ['Optional 4th input passed to enter_text_in_popup_window ',...
            'must be a column vector of positive integers ',...
            'representing the relative heights of the textboxes.'];      
    case 'WrongSizeInput3'
        msg = ['3rd input passed to enter_text_in_popup_window ',...
            'must have the same dimensions as the 2nd.'];         
    case 'WrongSizeInput4'
        msg = ['4th input passed to enter_text_in_popup_window ',...
            'must have the same dimensions as the 2nd.'];         
    case 'WrongSizeOutput'
        msg = ['enter_text_in_popup_window was not called with the right ',...
            'number of output arguments; the number of outputs cannot ',...
            'be larger than the size of the 2nd input.'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EVALUATE LOG LIKELIHOOD
function msg = get_evaluate_log_likelihood_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['evaluate_log_likelihood was not passed the right ',...
            'number of inputs: it requires at least 5 inputs, but ',...
            'only received ',errArgs{1}]; 
    case 'BadInput7'
        msg = ['Optional 7th input passed to evaluate_log_likelihood ',...
            'must be a scalar logical dictating whether to compute ',...
            'the log likelihood using the Chandrasekhar recursions or ',...
            'not (in which case the standard Kalman filter is used)'];          
    case 'BadInput8'
        msg = ['Optional 8th input passed to evaluate_log_likelihood ',...
            'must be a finite, real two-dimensional matrix with which ',...
            'to transform the model solution matrices to the minimum ',...
            'state representation'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EVALUATE LOG POSTERIOR
function msg = get_evaluate_log_posterior_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['evaluate_log_posterior was not passed the right ',...
            'number of inputs: it requires at least 6 inputs, but ',...
            'only received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EVALUATE LOG PRIOR
function msg = get_evaluate_log_prior_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['evaluate_log_prior was not passed the right number of ',...
            'inputs: it requires 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to evaluate_log_prior must be a ',...
            'finite, real vector of parameters being estimated'];
    case 'BadInput2'
        msg = ['2nd input passed to evaluate_log_posterior must be a ',...
            'a structure of priors information'];  
    case 'BadPriorsStruct'
        msg = ['On attempting to unpack the content of the priors ',...
            'structure, MATLAB returned the following error:'];
    case 'BadDistrType'
        msg = ['The distribution type ''',errArgs{1},''' is not valid ',...
            'in MAPS'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EVALUATE MDE LOSS OBJECTIVE
function msg = get_evaluate_MDE_loss_objective_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['evaluate_MDE_loss_objective was not passed the right ',...
            'number of inputs: it requires 12 inputs, but received ',...
            errArgs{1}];
    case 'BadInput2'
        msg = ['2nd input passed to evaluate_MDE_loss_objective must ',...
            'be a scalar logical dictating whether the parameters ',...
            'have to be transformed to the unbounded domain or not ',...
            '(to allow the toolkit to be used in conjunction with ',...
            'optimisation routines that do not handle bounds)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EVALUATE NLBL MODEL
function msg = get_evaluate_NLBL_model_error(errCode,errArgs)               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['evaluate_NLBL_model was not passed ',...
            'the right number of inputs: it requires 3 or 4 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to evaluate_NLBL_model must be a ',...
            'function handle representing the model used in the',...
            'evaluation'];
    case 'BadInput2'
        msg = ['2nd input passed to evaluate_NLBL_model must ',...
            'be a finite real column vector of dimension equal ',...
            'to the number of RHS variables in the model being evaluated'];
    case 'BadInput3'
        msg = ['3rd input passed to evaluate_NLBL_model must ',...
            'a structure containing the information needed for ',...
            'evaluation'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to evaluate_NLBL_model must ',...
            'be a column vector of parameter values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EVALUATE POSTERIOR OPTIMISATION OBJECTIVE
function msg = get_evaluate_posterior_optimisation_objective_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['evaluate_posterior_optimisation_objective was not ',...
            'passed the right number of inputs: it requires at least ',...
            '9 inputs, but only received ',errArgs{1}];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'evaluate_posterior_optimisation_objective must be a ',...
            'scalar logical dictating whether the parameters have to ',...
            'be transformed to the unbounded domain or not (to allow ',...
            'the toolkit to be used in conjunction with optimisation ',...
            'routines that do not handle bounds)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EVALUATE SYMBOLIC MATRICES
function msg = get_evaluate_symbolic_matrices_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['evaluate_symbolic_matrices was not passed the right ',...
            'number of inputs: it requires at least 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to evaluate_symbolic_matrices must ',...
            'be a row cell array of numeric vectors for each of the ',...
            'symbolic matrix numeric arguments'];
    case 'BadInput2'
        msg = ['2nd input passed to evaluate_symbolic_matrices must ',...
            'be a row cell string array of names for the symbolic ',...
            'matrix arguments'];
    case 'InconsistentNargs'
        msg = ['The row cell array of numeric vectors of arguments ',...
            'for the symbolic matrix evaluation (passed as 1st input) ',...
            'must have the same number of elements as the row cell ',...
            'string array of symbolic matrix argument names (passed ',...
            'as 2nd input)'];
    case 'BadSymbolicMatArg'
        msg = ['At least one of the symbolic matrix arguments passed ',...
            'in as part of the 1st input argument is not a column ',...
            'vector of finite, real, numeric arguments'];
    case 'SymMatEvalFailure'
        msg = ['The symbolic matrix passed in as function handle ',...
            'number ',errArgs{1},' could not be evaluated because of ',...
            'the following unexpected MATLAB error:'];
    case 'BadSymbolicMat'
        msg = ['The symbolic matrix passed in as symbolic matrix ',...
            'number ',errArgs{1},' was not a function handle as expected'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXECUTE FORECAST RUN
function msg = get_execute_forecast_run_error(errCode,errArgs)              %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['execute_forecast_run was not passed the right number ',...
            'of inputs: it requires 3 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to execute_forecast_run must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to execute_forecast_run must be a ',...
            'MAPS forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to execute_forecast_run must be a ',...
            'MAPS provisional run dataset structure'];
    case 'ClassDeterminationFailure'
        msg = ['MAPS'' super macro was unable to execute the forecast ',...
            'run because it could not determine whether the input ',...
            'model was linear state space or non-linear backward-',...
            'looking. MAPS'' model unpacker returned the following ',...
            'error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXECUTE LSS MODEL FORECAST RUN
function msg = get_execute_LSS_model_forecast_run_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['execute_LSS_model_forecast_run was not passed the ',...
            'right number of inputs: it requires 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to execute_LSS_model_forecast_run ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to execute_LSS_model_forecast_run ',...
            'must be a MAPS forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to execute_LSS_model_forecast_run ',...
            'must be a MAPS provisional run dataset structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXECUTE LSS MODEL FORECAST RUN
function msg = get_execute_NLBL_model_forecast_run_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['execute_NLBL_model_forecast_run was not passed the ',...
            'right number of inputs: it requires 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to execute_NLBL_model_forecast_run ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to execute_NLBL_model_forecast_run ',...
            'must be a MAPS forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to execute_NLBL_model_forecast_run ',...
            'must be a MAPS provisional run dataset structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXTRACT EXPRESSIONS FROM EQUATIONS
function msg = get_extract_expressions_from_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_expressions_from_equations was not passed ',...
            'the right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'extract_expressions_from_equations must be an equation ',...
            'string or column cell array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXTRACT INDEX NUMBERS FROM INCIDENCE MATRIX
function msg = get_extract_index_numbers_from_incidence_matrix_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_index_numbers_from_incidence_matrix was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'extract_index_numbers_from_incidence_matrix must be a ',...
            'two-dimensional logical equation incidence matrix'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXTRACT LHS EXPRESSIONS FROM EQUATIONS
function msg = get_extract_LHS_expressions_from_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_LHS_expressions_from_equations was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXTRACT NLBL MODEL FORECAST JUDGEMENTS INFO
function msg = get_extract_NLBL_model_forecast_judgements_info_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_NLBL_model_forecast_judgements_info was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'extract_NLBL_model_forecast_judgements_info must be a ',...
            'non-linear backward looking model judgements dataset ',...
            'structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXTRACT RHS EXPRESSIONS FROM EQUATIONS
function msg = get_extract_RHS_expressions_from_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_RHS_expressions_from_equations was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXTRACT SPECIFIED TIME SERIES DATA FROM EXCEL
function msg = get_extract_specified_time_series_from_dataset_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_specified_time_series_from_dataset was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'extract_specified_time_series_from_dataset must be a ',...
            'two-dimensional matrix of time series data'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'extract_specified_time_series_from_dataset must be a ',...
            'column cell string array of unique headers/identifiers ',...
            'for the data series'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'extract_specified_time_series_from_dataset must be a ',...
            'string, rwo cell string array, or column cell string ',...
            'array of headers/identifiers for the data series to ',...
            'extract from the complete set of time series input'];        
    case 'InconsistentDataHeadersDims'
        msg = ['The number of rows in the data matrix input to ',...
            'extract_specified_time_series_from_dataset must be ',...
            'consistent with the number of rows in the headers/',...
            'identifiers input'];        
    case 'UnknownIdentifiers'
        msg = ['MAPS could not extract all of the specified data ',...
            'series because one or more of them could not be found ',...
            'among the complete set of variables. MAPS'' index ',...
            'lookup function returned the following error(s):'];          
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EXTRACT TIME SERIES FROM LOADED CELL ARRAY OF DATA
function msg = ...
    get_extract_time_series_from_loaded_cell_array_of_data_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['extract_time_series_from_loaded_cell_array_of_data ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'or 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'extract_time_series_from_loaded_cell_array_of_data must ',...
            'be a two-dimensional cell array of loaded data'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to ',...
            'extract_time_series_from_loaded_cell_array_of_data must ',...
            'be a structure of options for the format of the loaded data'];
    case 'BadRealDateFormat'
        msg = ['The dates loaded from the 1st column must be valid ',...
            'string (eg ''mmm-yy'') or numeric formats (eg 36459) and ',...
            'cannot be a mixture of the two (mainly because I could ',...
            'not bring myself to program it - David Bradnum once told ',...
            'me that a good programmer is a lazy programmer). If you ',...
            'do not intend the 1st column to contain dates (i.e. it ',...
            'is data) or the dates are specified as index numbers ',...
            '(i.e. 1,2,3 etc) then please specify the format options ',...
            'accordingly'];        
    case 'BadRealStringDatesFormat'
        msg = ['MAPS was expecting dates to be in the 1st column of ',...
            'the spreadsheet and for those dates to be in string ',...
            'format (eg ''dd/mm/yyyy''). If this is not how you were ',...
            'expecting the data load to be treated, then please ',...
            'review the spreadsheet and/or consider changing or ',...
            'adding to the options passed into this function (to ',...
            'include, for example, an option to provide string ',...
            'formatted dates or an option to provide no dates at all)'];
    case 'BadRealNumericDatesFormat'
        msg = ['MAPS was expecting dates to be in the 1st column of ',...
            'the spreadsheet and for those dates to be in numeric ',...
            'format. If this is not how you were expecting the data ',...
            'load to be treated, then please review the spreadsheet ',...
            'and/or consider changing or adding to the options passed ',...
            'into this function (to include, for example, an option ',...
            'to provide string formatted dates or an option to ',...
            'provide no dates at all)'];        
    case 'BadRealDateNumFormat'
        msg = ['The dates loaded from the 1st column appear to be ',...
            'numeric representations of dates, but could not be ',...
            'converted to a string date format using the format ',...
            'specified in the options of ''',errArgs{1},'''. ',...
            'MATLAB''s datestr function returned the following ',...
            'error(s). If this is not how you were expecting the data ',...
            'load to be treated, then please review the spreadsheet ',...
            'and/or consider changing or adding to the options passed ',...
            'into this function (to include, for example, an option ',...
            'to provide string formatted dates or a different option ',...
            'for the format of the string date conversion (because ',...
            'MATLAB cannot handle the same range of date formats as ',...
            'Excel))'];        
    case 'BadRealDateStrFormat'
        msg = ['The dates loaded from the 1st column appear to be ',...
            'string representations of dates, but could not be ',...
            'converted to a number date format using the format ',...
            'specified in the options of ''',errArgs{1},'''. ',...
            'MATLAB''s datenum function returned the following ',...
            'error(s). If this is not how you were expecting the data ',...
            'load to be treated, then please review the spreadsheet ',...
            'and/or consider changing or adding to the options passed ',...
            'into this function (to include, for example, an option ',...
            'to provide numeric formatted dates or a different option ',...
            'for the format of the string dates in the numeric ',...
            'conversion (because MATLAB cannot handle the same range ',...
            'of date formats as Excel))'];  
    case 'BadIndexDateFormat'
        msg = ['The dates loaded from the 1st column must be numeric ',...
            'to constitute valid index number (i.e. 1,2,3) dates. If ',...
            'you do not intend the 1st column to contain dates or ',...
            'they are string representations of real dates then ',...
            'please specify the format options accordingly'];    
    case 'BadIndexDates'
        msg = ['The dates loaded from the 1st column are not valid ',...
            'index number (i.e. 1,2,3) dates. If you do not intend ',...
            'the 1st column to contain dates or they are numeric ',...
            'representations of real dates then please specify the ',...
            'format options accordingly'];
    case 'DataConversionFailure'
        msg = ['MAPS could not convert the cell array of time series ',...
            'data to numeric data. MATLAB''s cell2mat functionr ',...
            'returned the following error. Pleae check the content ',...
            'of the file against the format described by the options ',...
            'input carefully, adjusting one or both if necessary'];
    case 'BadData'
        msg = ['The time series data is invalid because it contains ',...
            'one or more inf or non-real values']; 
    case 'IncompleteData'
        msg = ['The time series data is invalid because it contains ',...
            'one or more holes (as represented by NaNs) and the ',...
            'options specify that the dataset should be complete. ',...
            'Please examine the data in the file and adjust it or the ',...
            'format options input as necessary']; 
    case 'RaggedEdgeOnData'
        msg = ['The time series data is invalid because it contains ',...
            'a ragged edge (as represented by NaNs) and the options ',...
            'specify that the dataset should have a straight edge. ',...
            'Please examine the data in the file and adjust it or the ',...
            'format options input as necessary'];    
    case 'MissingDataHeaders'
        msg = ['The data headers loaded from the 1st row are invalid ',...
            'because one or more of them is missing and the format ',...
            'options specify that they should be a complete set. ',...
            'Please adjust the file or the format options input as ',...
            'applicable']; 
    case 'NonUniqueDataHeaders'
        msg = ['The data headers loaded from the 1st row are invalid ',...
            'because one or more of them is non-unqiue (repeated) and ',...
            'the format options specify that they should be a unique ',...
            'set. Please adjust the content of the excel sheet or the ',...
            'format options input as applicable'];        
    case 'EmptyTimeSeriesData'
        msg = ['After removing consecutive trailing NaN (empty) ',...
            'values from the dataset, there were no time series data ',...
            'left. Please check the file for errors'];   
    case 'BadOption'
        msg = ['All format option fields must contain a logical true/',...
            'false indicator']; 
    case 'BadOptionCombination'
        msg = ['If you specify that the datset is incomplete (can ',...
            'contain) NaNs then you must also specify that it can ',...
            'have a ragged edge'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% EVALUATE PRIOR DISTRIBUTION AT VALUES AND TRUNCATE
function msg = get_evaluate_prior_distribution_at_values_and_truncate_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['evaluate_prior_distribution_at_values_and_truncate was '... 
            'not passed the right number of inputs: it requires at least 4'...
            ' inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by evaluate_prior_distribution_at_values_and_truncate'...
            ' must be a string naming the distribution to use, chosen'...
            ' from those supported by the MAPS estimation toolkit.'];
    case 'BadInput2'
        msg = ['2nd input received by evaluate_prior_distribution_at_values_and_truncate'...
            ' must be a real scalar holding the first shape parameter'...
            ' for the distribution.'];
    case 'BadInput3'
        msg = ['3rd input received by evaluate_prior_distribution_at_values_and_truncate'...
            ' must be a real scalar holding the second shape parameter'...
            ' for the distribution.'];
    case 'BadInput4'
        msg = ['4th input received by evaluate_prior_distribution_at_values_and_truncate'...
            ' must be a row vector of values at which to evaluate the'...
            ' appropriate PDF.'];
    case 'BadInput5'
        msg = ['5th input received by evaluate_prior_distribution_at_values_and_truncate'...
            ' must be a positive scalar in the range (0,1).'];
    case 'BadDistrType'
        msg = ['1st input received by evaluate_prior_distribution_at_values_and_truncate'...
            ' must be the name of a distribution supported by the MAPS'...
            ' estimation toolkit. Options are '...
            '{normal uniform beta gamma invgamma}; ',errArgs{1},...
            ' is not valid.'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FAN CHART COLOR MAP
function msg = get_fan_chart_color_map_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['fan_chart_color_map was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by fan_chart_color_map'...
            ' must be a 3 x 1 column vector containing an RGB'...
            ' colour triplet, with each element in the range (0,1).'];
    case 'BadInput2'
        msg = ['2nd input received by fan_chart_color_map'...
            ' must be a scalar representing the number of distinct'...
            ' colours required in the map (ie the number of bands'...
            ' from the median outwards in either direction).'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FILTER DATA AND IMPOSE JUDGEMENT USING LSS MODEL
function msg = ...
    get_filter_data_and_impose_judgement_using_LSS_model_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['filter_data_and_impose_judgement_using_LSS_model was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'filter_data_and_impose_judgement_using_LSS_model must be ',...
            'a MAPS linear state space model'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'filter_data_and_impose_judgement_using_LSS_model must be ',...
            'a structure containing an existing forecast run dataset'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'filter_data_and_impose_judgement_using_LSS_model must be ',...
            'a MAPS provisional run dataset structure'];
    case 'MissingProvisionalRunPastField'
        msg = ['Provisional run dataset input to ',...
            'filter_data_and_impose_judgement_using_LSS_model must ',...
            'include a ''Past'' field containing new data to filter'];
    case 'MissingProvisionalRunForecastField'
        msg = ['Provisional run dataset input to ',...
            'filter_data_and_impose_judgement_using_LSS_model must ',...
            'include a ''Forecast'' field containing information ',...
            'about the judgements to impose'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FILTER DATA AND PROJECT USING LSS MODEL
function msg = get_filter_data_and_project_using_LSS_model_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['filter_data_and_project_using_LSS_model was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'filter_data_and_project_using_LSS_model must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'filter_data_and_project_using_LSS_model must be a ',...
            'structure containing an existing forecast run dataset'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'filter_data_and_project_using_LSS_model must be a ',...
            'structure containing (new) back data'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FILTER DATA
function msg = get_filter_data_error(errCode,errArgs)                       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['filter_data was not passed the right number of ',...
            'inputs: it requires 2 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to filter_data must be a MAPS model ',...
            'structure'];
    case 'BadInput2'
        msg = ['2nd input passed to filter_data must be a structure ',...
            'containing (new) back data'];
    case 'BadModelClass'
        msg = ['MAPS model input to filter_data must be of the linear ',...
            'state space model class'];
    case 'BadModelCharactersitics'
        msg = ['Linear state space MAPS model input to filter_data ',...
            'must have data transformation equations'];
    case 'MissingRawObsData'
        msg = ['The data structure input to filter_data must have a ',...
            '''rawObservables'' field'];
    case 'MissingTimeTrendData'
        msg = ['The data structure input to filter_data must have a ',...
            '''timeVaryingTrends'' field because the linear state ',...
            'space model input contains time-varying trends'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FILTER DECOMPOSITIONS
function msg = get_filter_decompositions_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['filter_decompositions was not passed the right number '...
            'of inputs: it requires 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to filter_decompositions must be a ',...
            'three column cell array of response identifier strings, ',...
            'legend cell string arrays and numeric decomposition data ',...
            'matrix triplets'];
    case 'BadInput2'
        msg = ['2nd input passed to filter_decompositions must be a ',...
            'string or vector cell string array identifier(s) for ',...
            'one or more decompositions'];  
    case 'BadDecompArray'
        msg = ['The input decomposition cell arrray is invalid. It ',...
            'must contain a column cell string array of identifiers ',...
            'for the variables decomposed in the first column, a ',...
            'column cell string array of legend information in each ',...
            'element of the second column and a matrix of ',...
            'decomposition data in each element of the third column'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end 

%% FILTER RESPONSES
function msg = get_filter_responses_error(errCode,errArgs)                  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['filter_responses was not passed the right number of '...
            'inputs: it requires 2 or 3 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to filter_responses must be a ',...
            'cell array of response identifier strings and numeric ',...
            'response data pairs with either two columns (as ',...
            'returned by MAPS'' fix responses function) or three ',...
            'columns (as returned by MAPS'' impulse response function'];
    case 'BadInput2'
        msg = ['2nd input passed to filter_responses must be a two-',...
            'dimensional cell string array of response identifiers ',...
            'with the same number of columns as there are identifiers ',...
            'in the complete set of responses input'];  
    case 'BadInput3'
        msg = ['Optional 3rd input passed to filter_responses must be ',...
            'a scalar logical describing whether to return the output ',...
            'as a cell array of metadata response pairs (true - the ',...
            'default) or a numeric matrix of responses ordered in the ',...
            'same way as the response identifiers input (false)'];
    case 'BadImpulseResponseArray'
        msg = ['If the responses cell array has three columns (as in ',...
            'the output to MAPS'' impulse response function), then ',...
            'the first two columns must be comprised of strings ',...
            'identifying the responses on a row-wise basis and the ',...
            'third column must contain numeric response data'];
    case 'BadFixResponseArray'
        msg = ['If the responses cell array has two columns (as in ',...
            'the output to MAPS'' fix response function), then the ',...
            'the first column must constitute a column cell string ',...
            'array identifying the responses on a row-wise basis and ',...
            'the second column must contain numeric response data'];
    case 'MatrixConversionFailure'
        msg = ['The filtered cell array of numeric response vectors ',...
            'could not be converted to a matrix to output. MATLAB''s ',...
            'cell2mat function returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end  

%% FILTER MODEL OBSERVABLE AUTOCOVARIANCES
function msg = get_filter_model_observable_autocovariances_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['filter_model_observable_autocovariances was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'filter_model_observable_autocovariances must be a four ',...
            'column cell array of autocovariance identifier string ',...
            'pairs, numeric autocovariance values implied by a model, ',...
            'and numeric autocovariance values implied by a ',...
            'corresponding model observable dataset'];
    case 'BadInput2'
        msg = ['2nd input passed to filter_decompositions must be a ',...
            'two-column cell string array of autocovariance ',...
            'identifiers'];  
    case 'BadCovarArray'
        msg = ['The input autocovariance cell arrray is invalid. It ',...
            'must contain a column cell string array of identifiers ',...
            'for the model observables in the first two columns and ',...
            'finite real numeric row vectors of numeric values for ',...
            'the autocovariances from the model and data in the ',...
            'third and fourth columns respectively'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end 

%% FIND FIXES
function msg = get_find_fixes_error(errCode,errArgs)                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_fixes was not passed the '...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'find_fixes must be a column cell ',...
            'array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'find_fixes must be a column cell ',...
            'string array of mnemonics for the residuals used',...
            'to achieve the selected fixes'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'find_fixes must be a column cell ',...
            'string array of mnemonics for variables that have been',...
            'fixed'];
    case 'InfeasibleNLBLmodelFixes'
        msg = ['The selected combination of fixes is not feasible. ',...
            'This is because it results in the system, after ',...
            'inversion on the residuals, becoming simultaneous. ',...
            'In particular, it is not possible to fix at the same ',...
            'time the following variables, ',errArgs{1},', with the ',...
            'following residuals, ', errArgs{2},', in the combination ',...
            'that has been selected'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FIND LAG ORDER
function msg = get_find_lag_order_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_lag_order was not passed the '...
            'right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'find_lag_order must be a column cell ',...
            'array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'find_lag_order must be a column cell ',...
            'string array of variable mnemonics.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FIND REPEATED STRINGS
function msg = get_find_repeated_strings_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_repeated_strings was not passed the right number ',...
            'of inputs: it requires 1 or 2 input, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to find_repeated_strings must be a ',...
            'cell string array'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to find_repeated_strings ',...
            'must be a logical scalar describing whether or not the ',...
            'search is case insensistive (default is case sensitive)'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to find_repeated_strings ',...
            'must be a logical scalar describing whether or not the ',...
            'search should exclude empty strings (default is that ',...
            'they are included)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FIND INDEX NUMBERS OF OBSERVABLES IN MODEL VAR SPACE
function msg = ...
    get_find_index_numbers_of_observables_in_model_var_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_index_numbers_of_observables_in_model_var_space ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'find_index_numbers_of_observables_in_model_var_space ',...
            'must be a MAPS linear state space model structure'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'find_index_numbers_of_observables_in_model_var_space ',...
            'must be of the linear state space model class'];
    case 'BadModelCharacteristics'
        msg = ['The linear state space MAPS model input to ',...
            'find_index_numbers_of_observables_in_model_var_space ',...
            'must contain measurement equations'];
    case 'NonUniqueMapping'
        msg = ['MAPS could not compute the index numbers of the ',...
            'linear state space model observables in model variable ',...
            'space because there is a non-unique mapping in the ',...
            'measurement equation loadings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FIND INDEX NUMBERS OF RAW OBSERVABLES IN MODEL SPACE
function msg = ...
    get_find_index_numbers_of_raw_observables_in_model_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_index_numbers_of_raw_observables_in_model_space ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'find_index_numbers_of_raw_observables_in_model_space ',...
            'must be a MAPS linear state space model structure'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'find_index_numbers_of_raw_observables_in_model_space ',...
            'must be of the linear state space model class'];
    case 'BadModelCharacteristics'
        msg = ['The linear state space MAPS model input to ',...
            'find_index_numbers_of_raw_observables_in_model_space ',...
            'must contain data transformation equations'];
    case 'NonUniqueMapping'
        msg = ['MAPS could not compute the index numbers of the ',...
            'linear state space model raw observables in model ',...
            'observable space because there is a non-unique mapping ',...
            'in the data transformation equations'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% FIND VAR LAG INFO
function msg = get_find_var_lag_info_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['find_var_lag_info was not passed the '...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'find_var_lag_info must be a column cell ',...
            'array variable mnemonics.'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'find_var_lag_info must be a column cell ',...
            'string array containing the unique terms appearing in ',...
            'a set of equations. The variable mnemonics should not ',...
            'include time subscripts.'];
    case 'BadInput3'
        msg = ['3nd input passed to ',...
            'find_var_lag_info must be a column cell ',...
            'string array containing the unique terms appearing in a ',...
            'set of equations. The variable mnemonics should ',...
            'include time subscripts.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% 
%% JUDGEMENTS.DATA.BASECLASS CLASS
function msg = get_FixResponses_Instructions_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The FixResponses.Instructions constructor method was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['1st input received by the FixResponses.Instructions ',...
            'constructor method must be a MAPS LSS model'];
    case 'BadConstructInput2'
        msg = ['2nd input received by the FixResponses.Instructions ',...
            'constructor method must be a positive real forecast ',...
            'horizon integer'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% FORCE AXIS TO INCLUDE ZERO
function msg = get_force_axis_to_include_zero_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['force_axis_to_include_zero was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by force_axis_to_include_zero'...
            ' must be the scalar value corresponding to an axis handle.'];
    case 'BadInput2'
        msg = ['2nd input received by force_axis_to_include_zero'...
            ' must be the string ''x'' or ''y'', indicating which'...
            ' axis should be adjusted.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE CHAIN STATISTICS
function msg = get_generate_chain_statistics_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_chain_statistics was not passed the right ',...
            'number of inputs: it requires 3 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by generate_chain_statistics'...
            ' must be a column cell array of variable mnemonic strings.'];
    case 'BadInput2'
        msg = ['2nd input received by generate_chain_statistics'...
            ' must be an nThetaEstMnems x nTotalParameterDraws matrix'...
            ' representing a chain of draws for multiple parameters.'];
    case 'BadInput3'
        msg = ['3rd input received by generate_chain_statistics'...
            ' must be a row vector of values in the range (0,1)'...
            ' at which percentiles should be computed.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE DATA BASED NEWS REPORT
function msg = get_generate_data_based_news_report_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_data_based_news_report was not passed the '...
            'right number of inputs: it requires 6 but received ' ...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by generate_data_based_news_report '...
            'must be a string representing the path and name of the '...
            'report.'];
    case 'BadInput2'
        msg = ['2nd input received by generate_data_based_news_report '...
            'must be a real two dimensional numeric matrix containing '...
            'the total news to the shocks.'];
    case 'BadInput3'
        msg = ['3rd input received by generate_data_based_news_report '...
            'must be a column cell array containing the mnemonics of '...
            'the shocks.'];
    case 'BadInput4'
        msg = ['4th input received by generate_data_based_news_report '...
            'must be a real three dimensional numeric matrix where '...
            'dimensions are: number of shocks x time periods x number '...
            'of data series.'];
    case 'BadInput5'
        msg = ['5th input received by generate_data_based_news_report '...
            'must be a column cell array containing the names of the '...
            'data series that the change in the shocks is being '...
            'decomposed into.'];
    case 'BadInput6'
        msg = ['6th input received by generate_data_based_news_report '...
            'must be a positive real integer indicating the backdata '...
            'window to plot.'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE ESTIMATION OUTPUT REPORT
function msg = get_generate_estimation_output_report_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_estimation_output_report was not passed the ',...
            'right number of inputs: it requires 4 or 5 inputs but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by generate_estimation_output_report'...
            ' must be a MAPS estimation toolkit output structure'];
    case 'BadInput2'
        msg = ['2nd input received by generate_estimation_output_report'...
            ' must be a string a full path filename to write the report ',...
            'to'];
    case 'BadInput3'
        msg = ['3rd input received by generate_estimation_output_report'...
            ' must be a positive integer representing the number of '... 
            'rows of charts to be presented per figure'];
    case 'BadInput4'
        msg = ['4th input received by generate_estimation_output_report'...
            ' must be a positive integer representing the number of '... 
            'columns of charts to be presented per figure'];
    case 'BadInput5'
        msg = ['Optional 5th input received by ',...
            'generate_estimation_output_report must be a positive ',...
            'integer representing the number of periods over which to ',...
            'compute the degree of auto-correlation within the chain'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE IRF COMPARISON REPORT
function msg = get_generate_IRF_comparison_report_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_IRF_comparison_report was not passed the right ',...
            'number of inputs: it requires at least 7 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by generate_IRF_comparison_report'...
            ' must be a string to use as the report output filename.'];
    case 'BadInput2'
        msg = ['2nd input received by generate_IRF_comparison_report'...
            ' must be a string containing the directory path in which'...
            ' the report output file should be written.'];
    case 'BadInput3'
        msg = ['3rd input received by generate_IRF_comparison_report'...
            ' must be a column cell array of MAPS linear state space'...
            ' model structures.'];
    case 'BadInput4'
        msg = ['4th input received by generate_IRF_comparison_report'...
            ' must be a column cell array of variable mnemonics.'];
    case 'BadInput5'
        msg = ['5th input received by generate_IRF_comparison_report'...
            ' must be a positive integer representing the horizon over'...
            ' which to compute impulse responses.'];
    case 'BadInput6'
        msg = ['6th input received by generate_IRF_comparison_report'...
            ' must be a positive integer representing the number of'... 
            ' rows of charts to be presented per figure.'];
    case 'BadInput7'
        msg = ['7th input received by generate_IRF_comparison_report'...
            ' must be a positive integer representing the number of'... 
            ' columns of charts to be presented per figure.'];
    case 'BadInput8'
        msg = ['8th input received by generate_IRF_comparison_report'...
            ' must be a logical scalar indicating whether or not the'...
            ' report should be structured with one section per variable'...
            ', or by shock (the default).'];
    case 'BadInput9'
        msg = ['9th input received by generate_IRF_comparison_report'...
            ' must be a column cell array containing short names /'...
            ' aliases for the models being analysed, to be displayed'...
            ' on the chart legends.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE LEGEND AS SUBPLOT
function msg = get_generate_legend_as_subplot_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_legend_as_subplot was not passed the right ',...
            'number of inputs: it requires 4 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by generate_legend_as_subplot'...
            ' must be a positive integer representing the number of'... 
            ' rows of subplots in the figure.'];
    case 'BadInput2'
        msg = ['2nd input received by generate_legend_as_subplot'...
            ' must be a positive integer representing the number of'... 
            ' columns of subplots in the figure.'];
    case 'BadInput3'
        msg = ['3rd input received by generate_legend_as_subplot'...
            ' must be a positive integer containing the index of the'...
            ' subplot in which to display the legend.'];
    case 'BadInput4'
        msg = ['4th input received by generate_legend_as_subplot'...
            ' must be a column cell array of strings to display in'...
            ' the generated legend.'];
    case 'InconsistentPlotNumber'
        msg = ['4th input received by generate_legend_as_subplot'...
            ' cannot be greater than the total number of subplots on'...
            ' the figure (ie nChartRows x nChartCols).'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION ADD AS CAUSE AND THROW
function msg = get_generate_MAPS_exception_add_as_cause_and_throw_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_add_as_cause_and_throw was ',...
            'not passed the right number of inputs: it requires ',...
            'either 2 or 3 inputs (depending on if optional error ',...
            'message arguments are passed in), but only received ',...
            errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION ADD CAUSE AND THROW
function msg = get_generate_MAPS_exception_add_cause_and_throw_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_add_cause_and_throw was not ',...
            'passed the right number of inputs: it requires either 2 ',...
            'or 3 inputs (depending on if optional error message ',...
            'arguments are passed in), but only received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION AND ADD AS CAUSE
function msg = get_generate_MAPS_exception_and_add_as_cause_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_and_add_as_cause was not ',...
            'passed the right number of inputs: it requires either 2 ',...
            'or 3 inputs (depending on if optional error message ',...
            'arguments are passed in), but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'generate_MAPS_exception_and_add_as_cause must be a ',...
            'MATLAB exception object'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MAPS EXCEPTION AND ADD CAUSE
function msg = get_generate_MAPS_exception_and_add_cause_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_MAPS_exception_and_add_cause was not passed ',...
            'the right number of inputs: it requires either 2 or 3 ',...
            'inputs (depending on if optional error message arguments ',...
            'are passed in), but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'generate_MAPS_exception_and_add_cause must be a MATLAB ',...
            'exception object'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE MODEL ANALYSIS REPORT
function msg = get_generate_model_analysis_report_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_model_analysis_report was not passed ',...
            'the right number of inputs: it requires at least 3 ',...
            'inputs (depending on the type of model analysis outputs  ',...
            'to include in the report), but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to generate_model_analysis_report ',...
            'must be a string file name for the report'];
    case 'BadInput2'
        msg = ['2nd input passed to generate_model_analysis_report ',...
            'must be a structure containing the instructions for the ',...
            'model analysis outputs to produce and include in the report'];
    case 'BadInput3'
        msg = ['3rd input passed to generate_model_analysis_report ',...
            'must be a MAPS linear state space model structure'];
    case 'BadInput4'
        msg = ['4th input passed to generate_model_analysis_report ',...
            'must be a finite real two-dimensional numeric model ',...
            'observable dataset matrix'];
    case 'BadInput5'
        msg = ['5th input passed to generate_model_analysis_report ',...
            'must be a finite real numeric row vector of dates ',...
            'corresponding to the time periods in the model ',...
            'observable dataset'];
    case 'NoAnalysisInstructions'
        msg = ['The report model analysis instructions structure has ',...
            'no fields implying that nothing is to be included in the ',...
            'report!'];
    case 'NoModelObservableData'
        msg = ['The instructions for the report include a comparison ',...
            'of model and data autocovariances and/or historical ',...
            'shock decompositions, but it is not possible to compute ',...
            'either of them because no model observable data was ',...
            'passed in as input to this function'];
    case 'BadModelAnalysisInstruction'
        msg = ['MAPS was unable to create the model analysis report ',...
            'because the following error (most likely due to a faulty ',...
            'instructions input) was thrown in trying to construct ',...
            'the ',errArgs{1},' section of the resport:'];
    case 'BadlyFormattedAutoCovarianceInstructs'
        msg = ['The input instructions for which variables to include ',...
            'in a comparison of model and data autocovariances must ',...
            'be formatted as a two-column cell array with mnemonic ',...
            'strings for a subset of the model observables in the ',...
            'first column and a set of row cell string arrays ',...
            'in the second column such that each row of the cell ',...
            'array forms an instruction to include autocovariances ',...
            'between the observable in the first column and each of ',...
            'the observables in the row cell string array from the ',...
            'second column'];
    case 'BadDataMomentsStartPeriod'
        msg = ['The optional input dictating the start period for the ',...
            'computation of the autocovarainces in the model ',...
            'observable dataset is invalid because it exceeds the ',...
            'number of data points in the model observable dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GENERATE SHOCK BASED NEWS REPORT
function msg = get_generate_shock_based_news_report_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['generate_shock_based_news_report was not passed the '...
            'right number of inputs: it requires 7 but received ' ...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by generate_shock_based_news_report '...
            'must be a string representing the path and name of the '...
            'report.'];
    case 'BadInput2'
        msg = ['2nd input received by generate_shock_based_news_report '...
            'must be a real two dimensional numeric matrix containing '...
            'the total data news.'];
    case 'BadInput3'
        msg = ['3rd input received by generate_shock_based_news_report '...
            'must be a column cell array containing the names of the '...
            'data series.'];
    case 'BadInput4'
        msg = ['4th input received by generate_shock_based_news_report '...
            'must be a real three dimensional numeric matrix where '...
            'dimensions are: number of data series x time periods x '...
            'number of components to decompose by.'];
    case 'BadInput5'
        msg = ['5th input received by generate_shock_based_news_report '...
            'must be a column cell array containing the names of the '...
            'components that the change in the data is being decomposed'...
            ' into.'];
    case 'BadInput6'
        msg = ['6th input received by generate_shock_based_news_report '...
            'must be a real positive integer representing the length of'...
            ' the forecast horizon.'];
    case 'BadInput7'
        msg = ['7th input received by generate_shock_based_news_report '...
            'must be a real positive integer representing the length of'...
            ' the backdata window to plot.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET AVAILABLE IMPULSE RESPONSES
function msg = get_get_available_impulse_responses_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_available_impulse_responses was not passed the ',...
            'right number of inputs: it requires 4 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by get_available_impulse_responses'...
            ' must be a column cell array of MAPS linear state space'...
            ' model structures.'];
    case 'BadInput2'
        msg = ['2nd input received by get_available_impulse_responses'...
            ' must be a logical scalar indicating whether model'...
            ' observables should be included in the list of variables'...
            ' returned.'];
    case 'BadInput3'
        msg = ['3rd input received by get_available_impulse_responses'...
            ' must be a logical scalar indicating whether model'...
            ' variables should be included in the list of variables'...
            ' returned.'];
    case 'BadInput4'
        msg = ['4th input received by get_available_impulse_responses'...
            ' must be a logical scalar indicating whether to return the'...
            ' variables in common between all models (i.e. the'...
            ' intersection), or all variables existing in at least one'...
            ' model (i.e. the union).'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET COLOUR MAP
function msg = get_get_colour_map_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_colour_map was not passed the right number of inputs: '...
            'it requires 1 but received ' errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by get_colour_map must be a real positive '...
            'integer representing the number of colours needed.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET COVARIANCE INPUT FOR POSTERIOR SIMULATION
function msg = get_get_covariance_input_for_posterior_simulation_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_covariance_input_for_posterior_simulation was not ',...
            'passed the right number of inputs: it requires 6 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'get_covariance_input_for_posterior_simulation must be a ',...
            'structure with a ''source'' field, which contains a ',...
            'string instruction for sourcing the covariance matrix input'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'get_covariance_input_for_posterior_simulation must be a ',...
            'MAPS LSS model structure'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'get_covariance_input_for_posterior_simulation must be a ',...
            'priors structure containing information about the ',...
            'parameters being estimated'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'get_covariance_input_for_posterior_simulation must be a ',...
            'finite, real two-dimensional numeric matrix of model ',...
            'observable data'];        
    case 'BadInput5'
        msg = ['5th input received by ',...
            'get_covariance_input_for_posterior_simulation must be a ',...
            'finite, real column vector of initialisation values for ',...
            'the parameters being estimated']; 
    case 'BadInput6'
        msg = ['6th input received by ',...
            'get_covariance_input_for_posterior_simulation must be a ',...
            'structure of estimation outputs compiled in the super ',...
            'macro prior to the call to this function'];         
    case 'UnhandledSource'
        msg = ['The input source ''',errArgs{1},''' for the ',...
            'covariance matrix is unhandled - please check the ',...
            'content of this function against expectations'];
    case 'InitialisationFailure'
        msg = ['It was not possible to get the covariance matrix ',...
            'input given the instruction ''',errArgs{1},'''. The ',...
            'function retrieving the input returned the following ',...
            'error(s):']; 
    case 'BadCovMat'
        msg = ['MAPS was able to retrieve the covariance matrix ',...
            'input. However, the input is invalid because it does ',...
            'not constitute a finite, real square covariance matrix ',...
            'for the parameters being estimated']; 
    case 'WrongDimsForCovMat'
        msg = ['MAPS was able to retrieve the covariance matrix ',...
            'input. However, the input is invalid because the ',...
            'dimension of the covariance matrix provided is not equal ',...
            'to the number of estimation parameters (in the ',...
            'estimation parameter indices) in the MAPS model object ',...
            'being used'];      
    case 'NonPositiveDefiniteCovMat'
        msg = ['MAPS was able to retrieve the covariance matrix ',...
            'input. However, the input is invalid because it is not ',...
            'positive definite'];
    case 'BadOrderType'
        msg = ['MAPS could not compute a numerical inverse Hessian ',...
            'because the following parameter specifying the order ',...
            'of the approximation is unhandled: ',errArgs{1}];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET FAN CHART COLOUR MAP
function msg = get_get_fan_chart_colour_map_error(errCode,errArgs)          %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_fan_chart_colour_map was not passed the right ',...
            'number of inputs: it requires 2 or 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by get_fan_chart_colour_map must ',...
            'be a column vector of RGB triplet coordinates (i.e. a ',...
            '3*1 vector containing numerical values between 0 & 1)'];
    case 'BadInput2'
        msg = ['2nd input received by get_fan_chart_colour_map must ',...
            'be a positive real even numeric integer representing the ',...
            'number of percentiles in the fan chart']; 
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'get_fan_chart_colour_map must be a positive real numeric ',...
            'integer between 0 & 1-eps representing the lightest ',...
            'shade to include in the fan colours (where 1 = white)'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET INDEX TO SORT COLOUR MAP
function msg = get_get_index_to_sort_colour_map_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_index_to_sort_colour_map was not passed the right '...
            'number of inputs: it requires 1 but received ' errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by get_index_to_sort_colour_map must '...
            'be a real positive integer representing the number of colours.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET INPUT FOR POSTERIOR OPTIMISATION
function msg = get_get_input_for_posterior_optimisation_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_input_for_posterior_optimisation was not passed ',...
            'the right number of inputs: it requires 4 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'get_input_for_posterior_optimisation must be a structure ',...
            'of input information'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET INPUTS FOR POSTERIOR SIMULATION
function msg = get_get_inputs_for_posterior_simulation_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_inputs_for_posterior_simulation was not passed ',...
            'the right number of inputs: it requires 4 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'get_inputs_for_posterior_simulation must be a structure ',...
            'of input information'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET JOB MANAGER OBJECT
function msg = get_get_job_manager_object_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'UnableToLocateJobManagerProfile'
        msg = ['MAPS was unable to load the job manager profile from ',...
            '''',errArgs{1},''', but was unable to do so. Note that ',...
            'it is intended that the ''get_job_manager_object'' ',...
            'function be used alongside the rest of inner MAPS.  On ',...
            'attempting to import the above profile, MATLAB ',...
            'returned the following error:'];    
    case 'UnableToLocateJobManager'
        msg = ['MAPS was unable to locate the job manager object. ',...
            'There are five possible reasons for that (in decreasing ',...
            'order of likelihood): a) the job manager profile that ',...
            'has been loaded in is incorrect; b) you do not have a ',...
            'license to use the MATLAB distributed computing toolbox; ',...
            'c) the server or distributed computing service down; ',...
            'd) you are not using the right version of MATLAB (you ',...
            'must use the same version as running the DCT service); ',...
            'e) the job manager object name or URL address has been ',...
            'changed'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET OPTIMISER OR SIMULATOR DEFAULT OPTIONS
function msg = get_get_optimiser_or_simulator_default_options_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_optimiser_or_simulator_default_options was not ',...
            'passed the right number of inputs: it requires 1 input, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'get_optimiser_or_simulator_default_options must be an ',...
            'optimiser or simulator name string'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET PARAMETER INITIALISATION FOR BAYESIAN ESTIMATION
function msg = ...
    get_get_parameter_initialisation_for_bayesian_estimation_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_parameter_initialisation_for_bayesian_estimation ',...
            'was not passed the right number of inputs: it requires 4 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'get_parameter_initialisation_for_bayesian_estimation ',...
            'must be a structure with a ''source'' field, which ',...
            'contains a string instruction for sourcing the parameter ',...
            'initialisation'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'get_parameter_initialisation_for_bayesian_estimation ',...
            'must be a MAPS LSS model structure'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'get_parameter_initialisation_for_bayesian_estimation ',...
            'must be a priors structure containing information about ',...
            'the parameters being estimated'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'get_parameter_initialisation_for_bayesian_estimation ',...
            'must be a structure containing estimation outputs ',...
            'already compiled'];        
    case 'InitialisationFailure'
        msg = ['It was not possible to intitialise the parameters ',...
            'given the instruction ''',errArgs{1},'''. The function ',...
            'retrieving the input returned the following error(s):'];   
    case 'BadDistrStatType'
        msg = ['MAPS could not initialise the parameters from the ',...
            'priors because the following parameter dictating the ',...
            'type of statistic to use (eg ''mean'') is unhandled: ',...
            errArgs{1}];
    case 'OptimisationNotRun'
        msg = ['It was not possible to initialise the parameters for ',...
            'posterior simulation using the output from posterior ',...
            'optimisation because the optimisation does not appear to ',...
            'have been run (inferred from the fact that there is no ',...
            '''thetaMode'' field in the estimation output structure']; 
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET PARAMETER INITIALISATION FOR ESTIMATION
function msg = get_get_parameter_initialisation_for_estimation_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_parameter_initialisation_for_estimation was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'get_parameter_initialisation_for_estimation must be a ',...
            'structure with a ''source'' field, which contains a ',...
            'string instruction for sourcing the parameter ',...
            'initialisation'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'get_parameter_initialisation_for_estimation must be a ',...
            'MAPS LSS model structure'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'get_parameter_initialisation_for_estimation must be a ',...
            'structure containing information about the parameters ',...
            'being estimated with ''mnemonics'', ''lowerBounds'' & ',...
            '''upperBounds'' fields'];
    case 'UnhandledSource'
        msg = ['The input source ''',errArgs{1},''' for the parameter ',...
            'initialisation is unhandled - please check the content ',...
            'of this function against expectations'];
    case 'InitialisationFailure'
        msg = ['It was not possible to intitialise the parameters ',...
            'given the instruction ''',errArgs{1},'''. The function ',...
            'retrieving the input returned the following error(s):'];   
    case 'MissingMnemsInExcelLoad'
        msg = ['One or more of the mnemonics for the estimation ',...
            'parameters was not in the Excel sheet loaded in'];
    case 'NonFiniteBounds'
        msg = ['The ''half way between bounds '' option is not valid ',...
            'if one or more of the bounds for the parameters is non-',...
            'finite (or if the input lower and upper bounds are not ',...
            'of the same dimension)']; 
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET POSTERIOR OPTIMISATION OR SIMULATION DEFAULT OPTS
function msg = ...
    get_get_posterior_optimisation_or_simulation_default_opts_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_posterior_optimisation_or_simulation_default_opts ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'get_posterior_optimisation_or_simulation_default_opts ',...
            'must be either ''optimisation'' or ''simulation'''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET SHOCK BASED DECOMP COMPONENTS
function msg = get_get_shock_based_decomp_components_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_shock_based_decomp_components was not passed the ',...
            'right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to get_shock_based_decomp_components ',...
            'must be a column cell string array of shock mnemonics'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GET SORTED COLOUR MAP FOR BAR CHART
function msg = get_get_sorted_colour_map_for_bar_chart_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['get_sorted_colour_map_for_bar_chart was not passed the right '...
            'number of inputs: it requires 1 but received ' errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by get_sorted_colour_map_for_bar_chart must be '...
            'a real positive integer representing the number of colours needed.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% GROUP BARS
function msg = get_group_bars_error(errCode,errArgs)                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['group_bars was not passed ',...
            'the right number of inputs: it requires 4 inputs, but ',...
            'receieved ',errArgs{1}];
    case 'BadInput1'
        msg = '1st input passed to group_bars must be a structure';
    case 'BadInput2'
        msg = '2nd input passed to group_bars must be numeric';
    case 'BadInput3'
        msg = '3rd input passed to group_bars must be numeric';
    case 'BadInput4'
        msg = '4th input passed to group_bars must be a cell';
    case 'BadList'
        msg = 'Invalid bar grouping';
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% HOW BIG IS MAPS
function msg = get_how_big_is_MAPS_error(errCode,errArgs)                   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['how_big_is_MAPS was not passed the right number of ',...
            'inputs: it requires 3 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to how_big_is_MAPS must be the ',...
            'name of the entire MAPS directory (eg ',...
            '''C:\VSSROOT\MA\MDT\MAPS\'')'];
    case 'BadInput2'
        msg = ['2nd input passed to how_big_is_MAPS must be a string ',...
            'name for MAPS'' error message function (eg ',...
            '''generate_MAPS_eror_message'')'];
    case 'BadInput3'
        msg = ['3rd input passed to how_big_is_MAPS must be a string ',...
            'name for MAPS'' automated testing folder (eg ',...
            '''Testing'')'];
    case 'FileOpenFailure'
        msg = ['It was not possible to open the .m file for reading. ',...
            'On attempting to open the file, MATLAB returned the ',...
            'following error message:'];
    case 'FileCloseFailure'
        msg = ['For some unknown reason, it was not possible to close ',...
            'the .m file after reading its content'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% IMPOSE JUDGEMENT USING LSS MODEL
function msg = get_impose_judgement_using_LSS_model_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['impose_judgement_using_LSS_model was not passed the ',...
            'right number of inputs: it requires 3 or 4 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to impose_judgement_using_LSS_model ',...
            'must be a MAPS linear state space model'];
    case 'BadInput2'
        msg = ['2nd input passed to impose_judgement_using_LSS_model ',...
            'must be a MAPS forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to impose_judgement_using_LSS_model ',...
            'must be a MAPS judgement information structure'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'impose_judgement_using_LSS_model ',...
            'must be a logical scalar describing whether or not the ',...
            'inversion algorithm to use should be minimum damage ',...
            '(true) or minimum variance (false)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% IMPOSE JUDGEMENT USING LSS MODEL NEW
function msg = get_impose_judgement_using_LSS_model_new_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['impose_judgement_using_LSS_model was not passed the ',...
            'right number of inputs: it requires 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to impose_judgement_using_LSS_model ',...
            'must be a MAPS linear state space model'];
    case 'BadInput2'
        msg = ['2nd input passed to impose_judgement_using_LSS_model ',...
            'must be a MAPS forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to impose_judgement_using_LSS_model ',...
            'must be a MAPS judgement instructions object'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% IMPOSE JUDGEMENT USING NLBL MODEL
function msg = get_impose_judgement_using_NLBL_model_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['impose_judgement_using_NLBL_model was not passed the ',...
            'right number of inputs: it requires 3 or 4 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to impose_judgement_using_NLBL_model ',...
            'must be a MAPS linear state space model'];
    case 'BadInput2'
        msg = ['2nd input passed to impose_judgement_using_NLBL_model ',...
            'must be a MAPS forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to impose_judgement_using_NLBL_model ',...
            'must be a MAPS judgement information structure'];
    case 'badFixInversion'
        msg = ['In order to implement the selected fixes, MAPS must ',...
            'invert the model on the residuals.  However, for the fix ',...
            'combinations chosen, the equation rearranger in MAPS was ',...
            'unable to perform the inversion. Further details are ',...
            'below:'];
    case 'NLBLimposeJudgementDatasetErrors'
        msg = ['The NLBL model forecast dataset consistent with the ',...
            'imposed judgements contains one or more non-real and/or ',...
            'non-finite values - see details below.',...
            '\n\nThere are two common causes of this:',...
            '\n\n First, a variable may have blown up to ',...
            'infinity if its equation involves a division by zero.',...
            '\n\n Second, a variable could take on NaN,',...
            '-inf or complex (non-real) values if its equation ',...
            'involves taking the log of zero or a negative number.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INTERROGATE FORECAST SHOCKS STRUCTURE
function msg = get_interrogate_forecast_shocks_structure_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['interrogate_forecast_shocks_structure was not passed ',...
            'the right number of inputs: it requires 5 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'interrogate_forecast_shocks_structure must be a ',...
            'structure containing anticipated and/or unanticipated ',...
            'shocks'];
    case 'BadShocksData'
        msg = ['''Shocks.',errArgs{1},''' must be a finite, numeric ',...
            'two-dimensional matrix of ',errArgs{1},' shocks over the ',...
            'forecast'];
    case 'IncompatiblePHIShocks'
        msg = ['The dimension of the ',errArgs{1},' shocks (as ',...
            'represented by the number of rows) is not consistent ',...
            'with the dimension of shock loadings from the model ',...
            'solution (as measured by the number of columns)'];
    case 'InconsistentShocksTimeDims'
        msg = ['The number of columns (representing the number of ',...
            'periods in the projection) must be the same in the ',...
            'anticipated and unanticipated shocks matrices'];
    case 'BadUseOfAnticipatedShocks'
        msg = ['Anticipated shocks cannot be used in the projection ',...
            'because the model being used is backward looking'];
    case 'MissingShocks'
        msg = ['The input contained neither anticipated nor ',...
            'unanticipated shocks data. For a plain vanilla ',...
            'projection, please use ',...
            '''plain_vanilla_project_LSS_model_variables'''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INTERROGATE LSS MODEL VARIABLE INITIAL CONDITIONS
function msg = ...
    get_interrogate_LSS_model_variable_initial_conditions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['LSS_model_variable_initial_conditions was not passed ',...
            'the right number of inputs: it requires 5 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['Model variable initial conditions must be a column ',...
            'vector of finite (non-inf, non-NaN), real data'];
    case 'IncompatibleBx0'
        msg = ['The dimension of the model variable initial ',...
            'conditions (as represented by the number of rows) is not ',...
            'consistent with the dimension of loadings on lagged ',...
            'model variables from the model solution (as measured by ',...
            'the number of rows)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INTRODUCE NEWS USING COMPASS
function msg = get_introduce_news_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['introduce_news was not passed the right number of '...
            'inputs: it requires 3 but received ' errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by introduce_news must be a MAPS '...
            'model structure.'];
    case 'BadInput2'
        msg = ['2nd input received by introduce_news must be a MAPS '...
            'data structure containing the base run data.'];
    case 'BadInput3'
        msg = ['3rd input received by introduce_news must be a MAPS '...
            'data structure containing the provisional run data.'];
    case 'BadDataTransformCell'
        msg = ['The information loaded from the data transformation '...
            'CSV file by the introduce_news macro was not of the right '...
            'format. It must be a two column cell array in which the '...
            'first column contains the mnemonics of raw observables, '...
            'and the second column contains either PD or YTYPCT '...
            'indicating the transformation type for the variable.'];
    case 'NoDataTransformationEquations'
        msg = ['The model with which you ran the introduce_news macro '...
            'does not have data transformation equations.'];
    case 'BadROmnems'
        msg = ['The following raw observable or time varying trend '...
            'mnemonics, contained in the CSV file describing the data '...
            'transformations for the variables, could not be found in '...
            'the model: '];
    case 'BadROmnems:Instance'
        msg = errArgs{1};
    case 'InvalidTransformTypes'
        msg = ['Valid variable transformation types for the introduce_'...
            'news macro are PD and YTYPCT. To express a variable in LD '...
            'it should be omitted from the data transformation CSV. '...
            'The data transformation CSV file contained the following '...
            'invalid transformation types: '];
    case 'InvalidTransformTypes:Instance'
        msg = errArgs{1};
    case 'BadBackDataCell'
        msg = ['The contents of the CSV file containing the back data '...
            'window to chart in the introduce news reports was invalid.'...
            ' It must contain a single positive integer in cell A1, '...
            'indicating the number of quarters of backdata to plot.'];
    case 'BadBackDataWindow'
        msg = ['The backdata window to chart, loaded by the introduce_'...
            'news macro, must be equal to, or shorter than, the '...
            'backdata in the forecast journey. The requested backdata '...
            'window was ',errArgs{1},' quarters and the length of the '...
            'backdata in the forecast journey was ',errArgs{2},...
            ' quarters.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERSION.DATA.BASECLASS CLASS
function msg = get_Inversion_Data_BaseClass_error(errCode,~)                %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The Inversion.Data.BaseClass constructor method was ',...
            'not passed the right number of inputs: it requires 1 ',...
            'input, but did not receive any'];
    case 'BadConstructInput'
        msg = ['1st input passed to Inversion.Data.BaseClass ',...
            'constructor method must be a positive numeric forecast ',...
            'horizon integer'];
    case 'BadInversionData'
        msg = ['Inversion data can only be set to row cell arrays ',...
            'that do not exceed the forecast horizon in length'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERSION.DATA.INDICES CLASS
function msg = get_Inversion_Data_Indices_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The Inversion.Data.Indices constructor method was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'input, but only received ',errArgs{1}];
    case 'BadConstructInput2'
        msg = ['2nd input passed to Inversion.Data.Indices ',...
            'constructor method must be a positive numeric integer ',...
            'for the maximum permitted index number'];
    case 'BadInversionData'
        msg = ['Indices inversion data must be column vectors of ',...
            'unique positive integers that do not exceed the maximum ',...
            'permitted index number'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERSION.DATA.VALUES CLASS
function msg = get_Inversion_Data_Values_error(errCode,~)                   %#ok<DEFNU>
switch errCode
    case 'BadInversionData'
        msg = ['Values inversion data must be column vectors of ',...
            'finite real numeric data'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERSION.DATA.WEIGHTS CLASS
function msg = get_Inversion_Data_Weights_error(errCode,~)                  %#ok<DEFNU>
switch errCode
    case 'BadInversionData'
        msg = ['Weights inversion data must be column vectors of ',...
            'positive finite real numeric data'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERSION.INSTRUCTIONS CLASS
function msg = get_Inversion_Instructions_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The Inversion.Instructions constructor method was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['1st input passed to Inversion.Instructions ',...
            'constructor method must be a MAPS LSS model object'];
    case 'BadConstructInput2'
        msg = ['2nd input passed to Inversion.Instructions' ,...
            'constructor method must be a structure containing ',...
            'existing values for the anticipated and/or unanticipated ',...
            'shocks'];
    case 'BadModelType'
        msg = ['The model passed into the Inversion.Instructions ',...
            'constructor must be of the LSS class'];    
    case 'BadShocksStructure'
        msg = ['The structure of existing values for the shocks ',...
            'passed into the Inversion.Instructions constructor was ',...
            'invalid. On attempting to validate them against the ',...
            'model input, MAPS returned the following error(s):'];       
    case 'BadInvertNargin'
        msg = ['The Inversion.Instructions "invert" method was not ',...
            'passed the right number of inputs: it requires 4, but ',...
            'only received ',errArgs{1}];
    case 'BadInvertEndogVarCount'
        msg = ['The number of endogenous variables implicit in the ',...
            'solution matrices and initial conditions passed in as ',...
            'input to the "invert" method is not consistent with that ',...
            'in the model on construction of this object'];
    case 'BadInvertShockCount'
        msg = ['The number of shocks implicit in the shock loadings ',...
            'passed in as input to the "invert" method is not ',...
            'consistent with that in the model on construction of ',...
            'this object'];   
    case 'BadAnticipatedInvert'
        msg = ['The ''F'' matrix of loadings on anticipated shocks ',...
            'passed in as input to this method is comprised entirely ',...
            'of zeros (implying a backward-looking model) and it is ',...
            'not consistent with the model used to instantiate this ',...
            'object, which was forward-looking']; 
    case 'BadUpdateShocksNargin'
        msg = ['The Inversion.Instructions ',...
            '"updateExistingShockValues" method was not passed the ',...
            'right number of inputs: it requires 1, but did not ',...
            'receive any'];        
    case 'BadUpdateShocksInput1'
        msg = ['1st input passed to Inversion.Instructions ',...
            '"updateExistingShockValues" method be a structure ',...
            'containing new values for the anticipated and/or ',...
            'unanticipated shocks. It was invalid for the following ',...
            'reasons(s):'];
    case 'InvalidInversionData'
        msg = ['The inversion targets and/or the inversion ',...
            'instruments data contains the following error(s):']; 
    case 'InvalidInstructions'
        msg = ['The inversion instructions are invalid for the ',...
            'following reason(s):'];
    case 'NoInversionInstructions'
        msg = ['It is not possible to run an inversion because ',...
            'neither targets nor instruments have been defined in ',...
            'the inversion instructions object. If you just want to ',...
            'do a projection, then please see ',...
            '''project_LSS_model_variables'''];
    case 'TargetsNotImplementable'
        msg = ['It is not possible to condition the projection on the ',...
            'inversion targets because no instruments have been set ',...
            'with which to identify those targets'];
    case 'InstrumentsNotIdentifiable'
        msg = ['It is not possible to identify the inversion ',...
            'instruments because no targets have been set with which ',...
            'to condition the projection'];       
    case 'UnanticipatedInstrumentsNotIdentifiable'
        msg = ['It is not possible to identify one or more of the ',...
            'unanticipated instruments because they are set beyond ',...
            'the maximal target horizon'];
    case 'InvalidTargetWeightUse'
        msg = ['It is invalid to set target weights because the ',...
            'inversion is either exactly-identified or over-',...
            'identified (more instruments than targets)'];
    case 'InvalidInstrumentWeightUse'        
        msg = ['It is invalid to set instrument weights because the ',...
            'inversion is either exactly-identified or under-',...
            'identified (more targets than instruments)'];
    case 'BadTargetsSet'
        msg = ['The Targets property of the Inversion.Instructions ',...
            'class cannot be set to anything other than the ',...
            'Inversion.Targets object that was created on ',...
            'construction of this object'];
    case 'BadInstrumentsSet'
        msg = ['The Instruments property of the ',...
            'Inversion.Instructions class cannot be set to anything ',...
            'other than the Inversion.Instruments object that was ',...
            'created on construction of this object'];
    case 'BadOptionsSet'
        msg = ['The Options property of the Inversion.Instructions ',...
            'class cannot be set to anything other than the ',...
            'Inversion.Options object that was created on ',...
            'construction of this object']; 
    otherwise
        throw_missing_error_code_error(errCode);
end
end 

%% INVERSION.INSTRUMENTS CLASS
function msg = get_Inversion_Instruments_error(errCode,~)                   %#ok<DEFNU>
switch errCode
    case 'BadAnticipatedSet'
        msg = ['The Anticipated property of the ',...
            'Inversion.Instruments class cannot be set to anything ',...
            'other than the Inversion.InstrumentsData object that was ',...
            'created on construction of this object']; 
    case 'BadUnanticipatedSet'
        msg = ['The Unanticipated property of the ',...
            'Inversion.Instruments class cannot be set to anything ',...
            'other than the Inversion.InstrumentsData object that was ',...
            'created on construction of this object'];
    case 'BadAnticipatedUpdate'
        msg = ['It is not permitted to update the existing ',...
            'anticipated shock values in the Inversion.Instruments ',...
            'object because there were no anticipated shocks passed ',...
            'in as input on construction of the ',...
            'Inversion.Instructions object'];
    case 'BadUnanticipatedUpdate'
        msg = ['It is not permitted to update the existing ',...
            'unanticipated shock values in the Inversion.Instruments ',...
            'object because there were no unanticipated shocks passed ',...
            'in as input on construction of the ',...
            'Inversion.Instructions object']; 
    case 'InvalidInstruments'
        msg = 'The instrument set is invalid for the following reason(s):';
    case 'IncompleteWeightUse'
        msg = ['If weights are set for one type of instrument (eg ',...
            'anticipated) then they must also be set for the other ',...
            'type of instrument (eg unanticipated)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERSION.INSTRUMENTS DATA CLASS
function msg = get_Inversion_InstrumentsData_error(errCode,~)               %#ok<DEFNU>
switch errCode
    case 'IllegalSet'
        msg = ['It is not possible to set inversion instruments of ',...
            'this type because shocks of that type were not passed in ',...
            'as input on construction of the Inversion.Instructions ',...
            'object'];
    case 'InvalidUpdateShockDims'
        msg = ['It is not possible to update the existing shocks ',...
            'values with the data passed in as input because it is ',...
            'not consistent with the dimensions of the shocks data ',...
            'passed in as input on construction of the ',...
            'Inversion.Instructions object'];
    case 'InvalidIndWeightsDims'
        msg = ['Th instruments data is invalid because the optional ',...
            'weights have been set, but their dimension is not ',...
            'consistent with the instrument indices (i.e. one or more ',...
            'instrument weights have been set, but the number set per ',...
            'period is not consistent with the number of indices set)'];
    case 'InvalidShocksMat'
        msg = ['The input shocks data must constitute a finite real ',...
            'two-dimensional matrix of data'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERSION.TARGETS DATA CLASS
function msg = get_Inversion_Targets_error(errCode,~)                       %#ok<DEFNU>
switch errCode
    case 'InvalidIndValsDims'
        msg = ['The inversion targates data is invalid because the ',...
            'the dimension of the target values is not consistent ',...
            'with the target indices (i.e. the number of target ',...
            'values set per period is not consistent with the number ',...
            'of indices set)'];
    case 'InvalidIndWeightsDims'
        msg = ['The inversion targates data is invalid because the ',...
            'the dimension of the optional target weights is not ',...
            'consistent with the target indices (i.e. one or more ',...
            'target weights have been set, but the number of weights ',...
            'set per period is not consistent with the number of ',...
            'indices set)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERSION.OPTIONS CLASS
function msg = get_Inversion_Options_error(errCode,~)                       %#ok<DEFNU>
switch errCode
    case 'BadOverIdentificationInput'
        msg = ['The ''overIdentificationIsMinimimVariance'' option ',...
            'can only be set to a logical true/false scalar'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERT LSS MODEL
function msg = get_invert_LSS_model_error(errCode,errArgs)                  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invert_LSS_model was not passed the right ',...
            'number of inputs: it requires 6 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInversionInstructionsShape'
        msg = 'The inversion instructions input must be a structure';
    case 'BadUseOfAnticipatedFixes'
        msg = ['Anticipated fixes cannot be included in the inversion ',...
            'instructions because the model input is backward-looking'];
    case 'MissingShocks'
        msg = ['The inversion instructions input included ',errArgs{1},...
            'fixes but the existing shocks input did not include ',...
            errArgs{1},' shocks'];
    case 'BadInversionInstructions'
        msg = ['MAPS was unable to process the linear state space ',...
            'model inversion because of the following inversion ',...
            'instructions input exceptions:'];
    case 'BadInversionInstructions:MissingAlgorithmField'
        msg = ['The inversion instructions input must contain a ''',...
            errArgs{1},''' field which dictates the inversion ',...
            'algorithm to use if the inversion is over-identified'];
    case 'BadInversionInstructions:BadAlgorithmField'
        msg = ['The inversion instructions field ''',errArgs{1},...
            ''' which dictates of the two inversion algorithms to use ',...
            'if the inversion is over-identified must be a logical ',...
            '(true/false) scalar'];
    case 'BadInversionInstructions:BadFixesStruct'
        msg = ['The inversion instructions field ''',errArgs{1},''' ',...
            'contained the following errors:'];
    case 'BadInversionInstructions:MissingFixes'
        msg = ['The inversion instructions input must contain either ',...
            'an ''AnticipatedFixes'' field and/or an ',...
            '''UnanticipatedFixes'' field'];
    case 'BadFixDataType'
        msg = 'The fix instructions must be a structure';
    case 'BadFixData'
        msg = ['The fix instructions input contained the following ',...
            'exceptions:'];
    case 'BadFixData:MissingField'
        msg = ['The fix instructions must contain a ''',errArgs{1},...
            ''' field'];
    case 'BadFixData:BadField'
        msg = ['Fix field ''',errArgs{1},''' must be a row cell array'];
    case 'BadFixData:HorizonInconsistentWithForecast'
        msg = ['Fix field ''',errArgs{1},''' cannot have more columns ',...
            '(representing the horizon in the inversion) than the ',...
            'forecast horizon (as measured by the number of columns ',...
            'in the existing shocks input)'];
    case 'BadFixData:BadFieldContent'
        msg = ['The cell array in fix field ''',errArgs{1},''' must ',...
            'contain finite, numeric column vectors'];
    case 'BadFixData:FixesFieldsDimsMismatch';
        msg = ['The cell arrays in fix fields ''',errArgs{1},''' and ',...
            errArgs{2},''' must have the same number of columns ',...
            '(representing the number of periods in the inversion)'];
    case 'BadFixData:FixValIndsMismatch'
        msg = ['The dimension of the data in fix field ''',errArgs{1},...
            ''' must match the dimension of the data in fix field ''',...
            errArgs{2},''' in every period of the inversion (to ',...
            'ensure that fix values can be uniquely mapped on to ',...
            'model variables). Exceptions were found in the ',...
            'instructions for the following periods of the attempted ',...
            'inversion: ',errArgs{3}];
    case 'BadFixData:NonUniqueInds'
        msg = ['The indices in ''',errArgs{1},''' were not unique in ',...
            'one or more time periods:'];
    case 'BadFixData:UnknownInds'
        msg = ['The indices in ''',errArgs{1},''' could not be found ',...
            'among the model indices in one or more time periods:'];
    case 'BadFixData:BadInds:Instance'
        msg = ['Indices ',errArgs{1},' in period ',errArgs{2}];
    case 'InvalidInversion'
        msg = ['MAPS was unable to process the attempted ',...
            'judgemental inversion because the inputs did not ',...
            'constitute a valid inversion:'];
    case 'InvalidInversion:ShockFixMismatch'
        msg = ['The number of ',errArgs{1},' shocks specified to ',...
            'be used in the inversion did not equal or exceed the ',...
            'number of ',errArgs{1},' variable fixes specified in ',...
            'the following time periods: ',errArgs{2}];
    case 'InvalidInversion:OverlappingInds'
        msg = ['The following indices were found in both the list ',...
            'of anticipated ',errArgs{1},' and the list of ',...
            'unantcipated ',errArgs{1},' in period ',errArgs{2},...
            ' of the attempted inversion: ',errArgs{3}];
    case 'Infeasibility'
        msg = ['MAPS was unable to process the attempted ',...
            'judgemental inversion because it was infeasible:'];
    case 'Infeasibility:FixesNotLinearlyIndependent'
        msg = ['It is not possible to simultaneously fix all the ',...
            'model variables in the list of ',errArgs{1},' fixes in ',...
            'the following forecast quarters regardless of the shocks ',...
            'chosen to do so because they are not linearly ',...
            'independent in the model: ',errArgs{2}];
    case 'Infeasibility:InvalidShocksInstruments'
        msg = ['It is not possible to simultaneously fix all the ',...
            'model variables in the list of ',errArgs{1},' fixes ',...
            'given the list of shocks chosen to do so in the ',...
            'following forecast quarters: ',errArgs{2}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERT LSS MODEL NEW
function msg = get_invert_LSS_model_new_error(errCode,errArgs)              %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invert_LSS_model was not passed the right ',...
            'number of inputs: it requires 5 inputs, but only ',...
            'received ',errArgs{1}];
    case 'InfeasibleInversion'
        msg = ['MAPS was unable to process the attempted ',...
            'judgemental inversion because it was infeasible. The ',...
            'stacked inversion loading matrix (',errArgs{1},') must ',...
            'be of full rank - see Appendix C of WP.471 for more ',...
            'details. The most common cause of this is that the ',...
            'inversion includes one or more shock instruments that ',...
            'cannot be identified given the set of endogenous target ',...
            'variables on which the projection is being conditioned. ',...
            'For example, it is not possible to identify any of the ',...
            'rest of the world variables in COMPASS using a domestic ',...
            'shock'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERT NLBL MODEL
function msg = get_invert_NLBL_model_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invert_NLBL_model was not passed the right number of ',...
            'inputs: it requires 7 or 8 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invert_NLBL_model must be a ',...
            'structure summarising the NLBL model variable info'];
    case 'BadInput2'
        msg = ['2nd input passed to invert_NLBL_model must be a ',...
            'cell string array of all the RHS variables in the ',...
            'system being inverted'];
    case 'BadInput3'
        msg = ['3rd input passed to invert_NLBL_model must be a ',...
            'cell string array of all the LHS variables in the ',...
            'system being inverted'];
    case 'BadInput4'
        msg = ['4th input passed to invert_NLBL_model must be a ',...
            'structure containing the data to be used in the inversion'];
    case 'BadInput5'
        msg = ['5th input passed to invert_NLBL_model must be a ',...
            'non-negative integer denoting the initial period of the ',...
            'inversion'];
    case 'BadInput6'
        msg = ['6th input passed to invert_NLBL_model must be a ',...
            'non-negative integer denoting the horizon of the ',...
            'inversion'];
    case 'BadInput7'
        msg = ['7th input passed to invert_NLBL_model must be a ',...
            'function handle representing the model used in the',...
            'inversion'];
    case 'BadInput8'
        msg = ['Optional 8th input passed to invert_NLBL_model must ',...
            'be a ',...
            'column vector of parameter values'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERT OVER PAST
function msg = get_invert_over_past_error(errCode,errArgs)                  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invert_over_past was not passed the right number of ',...
            'inputs: it requires 2 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invert_over_past must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to invert_over_past must be a ',...
            'structure containing (new) back data'];
    case 'BadModelClass'
        msg = ['MAPS model input to invert_over_past must be of the ',...
            'linear state space model class'];
    case 'NotEnoughDataToInvert'
        msg = ['The dataset must have at least twice as many ',...
            'observations as lags in the model, otherwise (given the ',...
            'implementation in MAPS) it is not possible to invert the ',...
            'model over the past (and get the initial conditions ',...
            'necessary for projection). Your model contains ',...
            errArgs{1},' lags, but your dataset only contains ',...
            errArgs{2},' observations.'];
    case 'NLBLinvertOverPastDatasetErrors'
        msg = ['The NLBL model forecast dataset consistent with the ',...
            'inversion over the past contains one or more non-real ',...
            'and/or non-finite values - see details below.',...
            '\n\nThere are two common causes of this:',...
            '\n\n First, a variable may have blown up to ',...
            'infinity if its equation involves a division by zero.',...
            '\n\n Second, a variable could take on NaN,',...
            '-inf or complex (non-real) values if its equation ',...
            'involves taking the log of zero or a negative number.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERT OVER PAST AND IMPOSE JUDGEMENT USING NLBL MODEL
function msg = ...
    get_invert_over_past_and_impose_judgement_using_NLBL_mod_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invert_over_past_and_impose_judgement_using_NLBL_model ',...
            'was not passed the right number of inputs: it requires 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'invert_over_past_and_impose_judgement_using_NLBL_model ',...
            'must be a MAPS non-linear backward looking model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'invert_over_past_and_impose_judgement_using_NLBL_model ',...
            'must be a structure containing an existing forecast run ',...
            'dataset'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'invert_over_past_and_impose_judgement_using_NLBL_model ',...
            'must be a MAPS provisional run dataset structure'];
    case 'MissingProvisionalRunPastField'
        msg = ['Provisional run dataset input to ',...
            'invert_over_past_and_impose_judgement_using_NLBL_model ',...
            'must include a ''Past'' field containing new data to ',...
            'invert on'];
    case 'MissingProvisionalRunForecastField'
        msg = ['Provisional run dataset input to ',...
            'invert_over_past_and_impose_judgement_using_NLBL_model ',...
            'must include a ''Forecast'' field containing information ',...
            'about the judgements to impose'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVERT OVER PAST AND PROJECT USING NLBL MODEL
function msg = get_invert_over_past_and_project_using_NLBL_model_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invert_over_past_and_project_using_NLBL_model was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'invert_over_past_and_project_using_NLBL_model must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'invert_over_past_and_project_using_NLBL_model must be a ',...
            'structure containing an existing forecast run dataset'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'invert_over_past_and_project_using_NLBL_model must be a ',...
            'structure containing (new) back data'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVGAMMAPDF
function msg = get_invgampdf_error(errCode,errArgs)                         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invgampdf was not passed the right number of inputs: ',...
            'it requires 3 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invgampdf must be a finite, real ',...
            'two-dimensional matrix of values for which to compute ',...
            'probability densities'];
    case 'BadInput2'
        msg = ['2nd input passed to invgampdf must be a finite, ',...
            'numeric column vector of positive values for the first ',...
            'shape parameter of the distribution'];
    case 'BadInput3'
        msg = ['3rd input passed to invgampdf must be a finite, ',...
            'numeric column vector of positive values for the second ',...
            'shape parameter of the distribution'];
    case 'ShapeParamsDimsMismatch'
        msg = ['The two sets of shape parameters passed in must have ',...
            'the same dimension'];  
    case 'EvalPointsShapeParamsDimsMismatch'
        msg = ['If multiple shape parameters are passed in, then the ',...
            'set of evaluation points must have the same dimension ',...
            'as the two sets of shape parameters (because it is ',...
            'assumed that you are trying to compute pdfs for a single ',...
            'evaluation point in multiple distributions)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVOKE CALCULATE_EXPECTATIONS IN FORECAST RUN
function msg = get_invoke_calculate_expectations_in_forecast_run_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invoke_calculate_expectationsin_forecast_run was not passed the ',...
            'right number of inputs: it requires 4 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invoke_calculate_expectationsin_forecast_run ',...
            'must be a structure representing a MAPS linear state ',...
            'space model'];
    case 'BadInput2'
        msg = ['2nd input passed to invoke_calculate_expectationsin_forecast_run ',...
            'must be a cell containing a forecast run in EASE format'];
    case 'BadInput3'
        msg = ['3rd input passed to invoke_calculate_expectationsin_forecast_run ',...
            'must be a finite numeric scalar representing the horizon ',...
            'for the expectations'];
    case 'BadInput4'
        msg = ['4th input passed to invoke_calculate_expectationsin_forecast_run ',...
            'must be a two-column cell string array containing ',...
            'information about which expectations (i.e. which ',...
            'variables) to return as output to EASE'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVOKE CREATE DECOMP ADD ON
function msg = get_invoke_create_decomp_add_on_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invoke_create_decomp_add_on was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invoke_create_decomp_add_on must ',...
            'be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to invoke_create_decomp_add_on must ',...
            'be a path file name string to the decomposition add on file'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVOKE CREATE MODEL
function msg = get_invoke_create_model_error(errCode,errArgs)               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invoke_create_model was not passed the right ',...
            'number of inputs: it requires 1 input, but receieved ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invoke_create_model must be a ',...
            'full path file name string to for a .maps model file'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVOKE CREATE PT MODEL
function msg = get_invoke_create_PT_model_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invoke_create_PT_model was not passed the right ',...
            'number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invoke_create_PT_model must be a ',...
            'MAPS linear state space model'];
    case 'BadInput2'
        msg = ['2nd input passed to invoke_create_PT_model must be a ',...
            'MAPS non-linear backward-looking model'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVOKE CREATE SIMULATION JOURNEY BASE
function msg = get_invoke_create_simulation_joruney_base_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invoke_create_simulation_joruney_base was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'invoke_create_simulation_joruney_base must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'invoke_create_simulation_joruney_base must be a ',...
            'positive numeric integer representing the horizon over ',...
            'which to setup the simulation base for the forecast'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVOKE CUSTOM MACRO
function msg = get_invoke_custom_macro_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invoke_custom_macro was not passed the right number ',...
            'of inputs: it requires 4 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invoke_custom_macro must be a ',...
            'string representing the name of the custom macro to be ',...
            'executed'];
    case 'BadInput2'
        msg = ['2nd input passed to invoke_custom_macro must be a ',...
            'MAPS model structure'];
    case 'BadInput3'
        msg = ['3rd input passed to invoke_custom_macro must be a ',...
            'cell array containing an EASE formatted forecast run ',...
            'dataset'];
    case 'BadInput4'
        msg = ['4th input passed to invoke_custom_macro must be a ',...
            'cell array containing an EASE formatted provisional run ',...
            'dataset'];
    case 'FailedMacroCall'
        msg = ['The invoke_custom_macro call to ''',errArgs{1},...
            ''' failed for the following reason(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVOKE DECOMPOSE DATA IN FORECAST RUN
function msg = get_invoke_decompose_data_in_forecast_run_error...
    (errCode,errArgs)                                                       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invoke_decompose_data_in_forecast_run was not passed ',...
            'the right number of inputs: it requires 3 inputs, but ',...
            'receieved ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'invoke_decompose_data_in_forecast_run must ',...
            'be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'invoke_decompose_data_in_forecast_run must ',...
            'be a cell array containing decomposition input'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'invoke_decompose_data_in_forecast_run must ',...
            'be a cell array containing EASE data'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVOKE EXECUTE FORECAST RUN
function msg = get_invoke_execute_forecast_run_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invoke_execute_forecast_run was not passed the right ',...
            'number of inputs: it requires 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invoke_execute_forecast_run must ',...
            'be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to invoke_execute_forecast_run must ',...
            'be a cell array containing an EASE formatted forecast ',...
            'run dataset'];
    case 'BadInput3'
        msg = ['3rd input passed to invoke_execute_forecast_run must ',...
            'be a cell array containing an EASE formatted provisional ',...
            'run dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% INVOKE VALIDATE MODEL
function msg = get_invoke_validate_model_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['invoke_validate_model was not passed the right ',...
            'number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to invoke_validate_model must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to invoke_validate_model must be a ',...
            'string representing the name of a .maps file to create ',...
            'as part of the validation'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% IS MEMBER FOR ARRAY OF ROW STRING ARRAYS
function msg = get_is_member_for_array_of_row_string_arrays_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['is_member_for_array_of_row_string_arrays ',...
            'was not passed the right number of inputs: it requires ',...
            '2 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'is_member_for_array_of_row_string_arrays must ',...
            'be a two-dimensional cell string array (i.e. an array of ',...
            'row string arrays) in which to look for rows ',...
            '(i.e. a reference array)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'is_member_for_array_of_row_string_arrays must ',...
            'be a two-dimensional cell string array (i.e. an array of ',...
            'row string arrays) which are to be ',...
            'looked-up in the reference set (i.e. a lookup array)'];
    case 'IncompatibleRefAndLookupArrays'
        msg = ['The reference array of row string arrays and the ',...
            'lookup array of row string arrays must have the same ',...
            'number of columns for the row lookup to be valid'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% IS NUMERIC AND IN RANGE
function msg = get_is_numeric_and_in_range_error(errCode,~) %#ok<DEFNU>
switch errCode
    case 'BadInput2'
        msg = ['2nd input received by is_numeric_and_in_range'...
            ' must be a real-valued scalar.'];
    case 'BadInput3'
        msg = ['3rd input received by is_numeric_and_in_range'...
            ' must be a real-valued scalar.'];
    case 'BadInput4'
        msg = ['4th input received by is_numeric_and_in_range'...
            ' must be a logical scalar indicating whether or not'...
            ' values exactly equal to the bounds are valid or not.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% JUDGMENTS.CONDITIONING.INSTRUCTIONS CLASS
function msg = get_Judgements_Conditioning_Instructions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The Judgements.Conditioning.Instructions constructor ',...
            'method was not passed the right number of inputs: it ',...
            'requires 2 inputs, but only received ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['1st input passed to ',...
            'Judgements.Conditioning.Instructions constructor method ',...
            'must be a MAPS LSS model object'];
    case 'BadConstructInput2'
        msg = ['2nd input passed to ',...
            'Judgements.Conditioning.Instructions constructor method ',...
            'must be an LSS model forecast run structure'];
    case 'BadConstructInput3'
        msg = ['Optional 3rd input passed to ',...
            'Judgements.Conditioning.Instructions constructor method ',...
            'must be a logical scalar dictating whether or not the ',...
            'judgement data is to be input in marginal space or not ',...
            '(and the default is not)'];        
    case 'BadModelType'
        msg = ['The model passed into the ',...
            'Judgements.Conditioning.Instructions constructor must be ',...
            'of the LSS class'];    
    case 'BadRunData'
        msg = ['The run data structure passed into the ',...
            'Judgements.Conditioning.Instructions constructor was ',...
            'invalid. On attempting to access the forecast shocks and ',...
            'validate them against the model input, MATLAB/MAPS ',...
            'returned the following error(s):'];    
    case 'BadApplyJudgementToForecastRunNargin'
        msg = ['The "applyJudgementToForecastRun" method requires two ',...
            'input arguments, but only received ',errArgs{1}];
    case 'BadCreateInversionInstructionsNargin'
        msg = ['The "createInversionInstructions" method requires two ',...
            'input arguments, but only received ',errArgs{1}];        
    case 'BadValidateNargin'
        msg = ['The Judgements.Conditioning.Instructions "validate" ',...
            'method was not passed the right number of inputs: it ',...
            'requires 2, but only received ',errArgs{1}];
    case 'BadValidateInput1'
        msg = ['1st input passed to ',...
            'Judgements.Conditioning.Instructions "validate" method ',...
            'must be a MAPS LSS model structure'];
    case 'BadValidateInput2'
        msg = ['2nd input passed to ',...
            'Judgements.Conditioning.Instructions "validate" method ',...
            'must be a forecast run data structrure']; 
    case 'BadTargetsSet'
        msg = ['The Targets property of the ',...
            'Judgements.Conditioning.Instructions class cannot be set ',...
            'to anything other than the ',...
            'Judgements.Conditioning.Targets object that was created ',...
            'on construction of this object'];
    case 'BadInstrumentsSet'
        msg = ['The Instruments property of the ',...
            'Judgements.Conditioning.Instructions class cannot be set ',...
            'to anything other than the ',...            
            'Judgements.Conditioning.Instruments object that was ',...
            'created on construction of this object'];
    case 'BadOptionsSet'
        msg = ['The Options property of the ',...
            'Judgements.Conditioning.Instructions class cannot be set ',...
            'to anything other than the ',...                        
            'Judgements.Conditioning.Options object that was ',...
            'created on construction of this object'];        
    case 'BadConditioning'
        msg = ['A set of judgement conditioning instructions is ',...
            'invalid if: a) the target set is invalid; b) the target ',...
            'set cannot be applied; c) any of the shock instruments ',...
            'are not (even in principle) identifiable'];
    case 'NoTargets'
        msg = ['It is not possible to identify the shock ',...
            'instrument(s) because no target data has been set'];
    case 'NoInstruments'
        msg = ['It is not possible to condition the projection on the ',...
            'targets because no instruments have been set with which ',...
            'to identify them possible to apply the conditioning ',...
            'information']; 
    case 'IneffectiveInstruments'
        msg = ['It is not possible to identify one or more of the ',...
            'unanticipated shock instruments because they appear ',...
            'beyond the maximal horizon up to which the conditioning ',...
            'targets are being applied'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end   

%% JUDGEMENTS.CONDITIONING.INSTRUMENTS CLASS
function msg = get_Judgements_Conditioning_Instruments_error(errCode,~)     %#ok<DEFNU>
switch errCode
    case 'BadAnticipatedInput'
        msg = ['The "Anticipated" property of the conditioning ',...
            'instruments object can only be set to a valid judgement ',...
            'cell array. On attempting to set the property with the ',...
            'input data, MAPS'' judgement data instruments class ',...
            'returned the following error(s):'];    
    case 'BadAnticipatedSet'
        msg = ['It is not possible to set anticipated shock ',...
            'instruments because the model associated with the ',...
            'judgements object (passed in on construction) does not ',...
            'contain anticipated shocks (is not forward looking)'];
    case 'BadUnanticipatedInput'
        msg = ['The "Unanticipated" property of the conditioning ',...
            'instruments object can only be set to a valid judgement ',...
            'cell array. On attempting to set the property with the ',...
            'input data, MAPS'' judgement data instruments class ',...
            'returned the following error(s):'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% JUDGEMENTS.CONDITIONING.TARGETS CLASS
function msg = get_Judgements_Conditioning_Targets_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadModelVarInput'
        msg = ['The "ModelVariables" property of the conditioning ',...
            'targets object can only be set to a valid judgement ',...
            'cell array. On attempting to set the property with the ',...
            'input data, MAPS'' judgement data values class returned ',...
            'the following error(s):'];
    case 'BadModelObsSet'
        msg = ['It is not possible to set model observable judgements ',...
            'because the model associated with the judgements object ',...
            '(passed in on construction) does not contain model ',...
            'observables'];
    case 'BadModelObsInput'
        msg = ['The "ModelObservables" property of the conditioning ',...
            'targets object can only be set to a valid judgement ',...
            'cell array. On attempting to set the property with the ',...
            'input data, MAPS'' judgement data values class returned ',...
            'the following error(s):'];        
    case 'BadRawObsSet'
        msg = ['It is not possible to set raw observable judgements ',...
            'because the model associated with the judgements object ',...
            '(passed in on construction) does not contain raw ',...
            'observables'];
    case 'BadRawObsInput'
        msg = ['The "RawObservables" property of the conditioning ',...
            'targets object can only be set to a valid judgement ',...
            'cell array. On attempting to set the property with the ',...
            'input data, MAPS'' judgement data values class returned ',...
            'the following error(s):'];        
    case 'BadAddNargin'
        msg = ['The Judgements.Conditioning.Targets "add" method was ',...
            'not passed the right number of inputs: it requires ',...
            'either 1 or 2 inputs, but did not receive any'];
    case 'BadAddSingleInput'
        msg = ['The Judgements.Conditioning.Targets "add" method was ',...
            'invoked with 1 input in which case the input must be a ',...
            'valid judgement data cell array, but it contained the ',...
            'following error(s):'];
    case 'BadAddDoubleInput'
        msg = ['The Judgements.Conditioning.Targets "add" method was ',...
            'invoked with 2 inputs in which case the 1st input must ',...
            'be a string corresponding to a valid mnemonic (as in the ',...
            'model passed to this object on construction) and the 2nd ',...
            'must be a valid row vector (of non-inf numeric values in ',...
            'the case of judgements or logicals/numeric 0-1 values in ',...
            'the case of shock instruments) such that when ',...
            'concatenated together they constitute a valid judgement ',...
            'data cell array. They contained the following error(s):']; 
    case 'BadOverwriteNargin'
        msg = ['The Judgements.Conditioning.Targets "overwrite" ',...
            'method was not passed the right number of inputs: it ',...
            'requires 1 input, but did not receive any']; 
    case 'BadOverwriteInput1'
        msg = ['The input to the Judgements.Conditioning.Targets ',...
            '"overwrite" method must be a valid judgement data cell ',...
            'array containing valid mnemonics of the variables which ',...
            'to apply judgement to in the first column and judgement ',...
            'data vectors in the 2nd column. It contained the ',...
            'following error(s):'];
    case 'BadRemoveNargin'
        msg = ['The Judgements.Targets remove method was not passed ',...
            'the right number of inputs: it requires 1 input, but did ',...
            'not receive any']; 
    case 'BadRemoveInput1'
        msg = ['The input to the Judgements.Conditioning.Targets ',...
            '"remove" method must be a string or column cell string ',...
            'array of mnemonics corresponding to the judgement data ',...
            'to be removed. It contained the following error(s):'];        
    case 'InvalidMnems'
        msg = ['The following input mnemonic strings could not be ',...
            'found among the complete set of variable mnemonics from ',...
            'the model being used:'];
    case 'InvalidMnems:Instance'
        msg = errArgs{1};      
    case 'InvalidTargets'
        msg = ['A judgement conditioning target set is invalid if: ',...
            'a) it is impossible to transform (uniquely) all raw ',...
            'observable conditioning information to model space or ',...
            'b) it is impossible to combine all conditioning ',...
            'information into model variable space to form a single ',...
            'valid conditioning target set with no conflicting/',...
            'overlapping information. The conditioning target set ',...
            'contained the following error(s):'];
    case 'BadROtargets'
        msg = ['Conditioning targets specified in raw observable ',...
            'space must be made from the start of the forecast ',...
            'horizon in a continuous fashion (in order to guarantee ',...
            'valid data transformation). MAPS found the following ',...
            'exceptions:'];
    case 'BadROtargets:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% JUDGEMENTS.DATA.BASECLASS CLASS
function msg = get_Judgements_Data_BaseClass_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The Judgements.Data constructor method was not passed ',...
            'the right number of inputs: it requires 2 or 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['1st input received by the Judgements.Data constructor '...
            'method must be a column cell string array of mnemonics'];
    case 'BadConstructInput2'
        msg = ['2nd input received by the Judgements.Data constructor '...
            'method must be a positive real forecast horizon integer'];
    case 'BadConstructInput3'
        msg = ['Optional 3rd input received by the Judgements.Data ',...
            'constructor method must be a logical scalar describing ',...
            'whether or not the object will be locked for editing ',...
            '(i.e. remain in its initialised state)'];
    case 'BadEdit'
        msg = ['It is not possible to edit this type of judgement ',...
            'data because it was designated locked for editing on ',...
            'construction, reflecting that the model being used does ',...
            'not support the application of this type of judgement'];
    case 'BadAddNargin'
        msg = ['The judgement data "add" method was not passed the ',...
            'right number of inputs: it requires either 1 or 2 ',...
            'inputs, but did not receive any'];
    case 'BadAddSingleInput'
        msg = ['The judgement data "add" method was invoked with 1 ',...
            'input in which case the input must be a valid judgement ',...
            'data cell array, but it contained the following error(s):'];
    case 'BadAddDoubleInput'
        msg = ['The judgement data "add" method was invoked with 2 ',...
            'inputs in which case the 1st input must be a string ',...
            'corresponding to a valid model mnemonic and the 2nd ',...
            'input must be a valid judgement data row vector such ',...
            'that the inputs form a valid judgement cell array when ',...
            'concatenated together. The input data contained the ',...
            'following error(s):'];   
    case 'BadOverwriteNargin'
        msg = ['The judgement data "overwrite" method was not passed ',...
            'the right number of inputs: it requires 1 input, but did ',...
            'not receive any'];
    case 'BadOverwriteInput'
        msg = ['Input to the judgement data "overwrite" method must ',...
            'be a valid judgement data cell array. The input data was ',...
            'invalid for the following reason(s):'];
    case 'BadRemoveNargin'
        msg = ['The judgement data "remove" method was not passed the ',...
            'right number of inputs: it requires 1 input, but did not ',...
            'receive any']; 
    case 'BadRemoveInput1'
        msg = ['The input to the judgement data "remove" method must ',...
            'be a string or column cell string array of mnemonics ',...
            'corresponding to the judgement data to be removed'];
    case 'OddRemoveCommand'
        msg = ['The strings input to the judgement data "remove" ',...
            'method must be unique'];        
    case 'InvalidRemoveCommand'
        msg = ['It is not possible to remove judgement data because ',...
            'there are none to remove!'];
    case 'InvalidRemoveMnems'
        msg = ['The judgement data "remove" method did not execute ',...
            'because the following input mnemonic strings could not ',...
            'be found among the existing set of judgement data:'];
    case 'InvalidRemoveMnems:Instance'
        msg = errArgs{1};
    case 'BadJudgementData'
        msg = 'Judgement data must be a two-column cell array';
    case 'BadJudgementDataContent'
        msg = ['Judgement data cell arrays must contain mnemonic ',...
            'strings in the 1st column and row arrays of data that ',...
            'are no longer than the forecast horizon in the 2nd column'];
    case 'BadJudgementMnems'
        msg = ['The input data is invalid because the following ',...
            'judgement string mnemonics could not be found among the ',...
            'model set used to initialise the judgement data object:'];
    case 'BadJudgementMnems:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% JUDGEMENTS.DATA.INSTRUMENTS CLASS
function msg = get_Judgements_Data_Instruments_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'InvalidInstrumentsData'
        msg = ['Instruments judgement data must be comprised of ',...
            'logicals or equivalent 0-1 numeric values. The data ',...
            'cannot be comprised entirely of false or 0 values ',...
            '(cannot be entirely empty). The input data associated ',...
            'with the following shock usages was invalid:'];
    case 'InvalidInstrumentsData:Instance'
        msg = errArgs{1};
    case 'OverlappingInstrumentsData'
        msg = ['For input instruments data to be valid it must be ',...
            'non-overlapping/conflicting. The following shocks had ',...
            'overlapping "true"/1 usage data in one or more periods:'];
    case 'OverlappingInstrumentsData:Instance'
        msg = errArgs{1};    
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% JUDGEMENTS.DATA.MARGINALS CLASS
function msg = get_Judgements_Data_Marginals_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The Judgements.Data.Marginals constructor method was ',...
            'not passed the right number of inputs: it requires 3 or ',...
            '4 inputs, but only received ',errArgs{1}];
    case 'BadConstructInput2'
        msg = ['2nd input received by the Judgements.Data.Marginals ',...
            'constructor method must be a finite real, two-',...
            'dimensional matrix of base forecast data on which to ',...
            'impute the marginals'];
    case 'BadConstructInput3'
        msg = ['3rd input received by the Judgements.Data.Marginals ',...
            'constructor method must be a column vector of logicals ',...
            'indicating whether the marginal to apply each variable ',...
            'is a levels difference (true) or percentage difference ',...
            '(false)'];  
    case 'InconsistentConstructInput1Inpu2'
        msg = ['The number of rows in the model mnemonics (first ',...
            'input) must be consistent with the number of rows in ',...
            'the base forecast dataset (second input)'];
    case 'InconsistentConstructInput1Inpu3'
        msg = ['The number of rows in the model mnemonics (first ',...
            'input) must be consistent with the number of rows in ',...
            'the levels difference logicals (third input)'];
    case 'BadUpdateBaseDataNargin'
        msg = ['The "updateBaseData" method requires 1 input, but did ',...
            'not receive any'];        
    case 'BadUpdateBaseDataInput1'
        msg = ['The (optional) input to the "updateBaseData" method ',...
            'must be a finite real two-dimensional matrix of the same ',...
            'dimensions (number of variables and forecast horizon) as ',...
            'those used to construct the object'];    
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% JUDGEMENTS.DATA.VALUES CLASS
function msg = get_Judgements_Data_Values_error(errCode,errArgs)            %#ok<DEFNU>
switch errCode
    case 'InvalidValuesData'
        msg = ['Values judgement data must be comprised of non-inf ',...
            'numeric values. NaN values can be used to signify ',...
            'periods in which a judgement is not being imposed, but ',...
            'the data cannot be comprised entirely of NaNs (cannot be ',...
            'entirely empty). The input data associated with the ',...
            'following judgements was invalid:'];
    case 'InvalidValuesData:Instance'
        msg = errArgs{1};
    case 'OverlappingValuesData'
        msg = ['For input values judgement data to be valid it must ',...
            'be non-overlapping/conflicting. Judgements for the ',...
            'following variable were specified at least twice in one ',...
            'or more periods:'];
    case 'OverlappingValuesData:Instance'
        msg = errArgs{1}; 
    case 'BadApplyJudgementToForecastDatasetNargin'
        msg = ['The "applyJudgementToForecastDataset" method requires ',...
            '1 input, but did not receive any'];
    case 'BadApplyJudgementToDatasetInput1'
        msg = ['The input to the "applyJudgementToForecastDataset" ',...
            'method must be a finite real two-dimensional matrix of ',...
            'the same dimensions (number of variables and forecast ',...
            'horizon) as those used to construct the object'];    
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% JUDGMENTS.INSTRUCTIONS CLASS
function msg = get_Judgements_Instructions_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The Judgements.Instructions constructor method was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['1st input passed to Judgements.Instructions ',...
            'constructor method must be a MAPS LSS model structure'];
    case 'BadConstructInput2'
        msg = ['2nd input passed to Judgements.Instructions ',...
            'constructor method must be an LSS model forecast run ',...
            'structure'];
    case 'BadModelType'
        msg = ['The model passed into the Judgements.Instructions ',...
            'constructor must be of the LSS class'];    
    case 'BadRunData'
        msg = ['The run data structure passed into the ',...
            'Judgements.Instructions constructor was invalid. On ',...
            'attempting to access the forecast shocks and validate ',...
            'them against the model input, MATLAB/MAPS returned the ',...
            'following error(s):'];        
    case 'BadConditioningSet'
        msg = ['The Conditioning property of the ',...
            'Judgements.Instructions class cannot be set to anything ',...
            'other than the Judgements.Conditioning.Instructions ',...
            'object that was created on construction of this object'];            
    case 'BadShocksSet'
        msg = ['The Shocks property of the Judgements.Instructions ',...
            'class cannot be set to anything other than the ',...
            'Judgements.Shocks object that was created on ',...
            'construction of this object'];         
    case 'BadTimeVaryingTrendSet'
        msg = ['It is not possible to set time-varying trend ',...
            'judgements because the model associated with the ',...
            'judgements object (passed in on construction) does not ',...
            'contain time-varying trends'];
    case 'BadTimeVaryingTrendInput'
        msg = ['The "TimeVaryingTrends" property of the judgements ',...
            'instructions object can only be set to a valid judgement ',...
            'cell array. On attempting to set the property with the ',...
            'input data, MAPS'' judgement data values class returned ',...
            'the following error(s):'];
    case 'BadValidateNargin'
        msg = ['The Judgements.Instructions "validate" method was not ',...
            'passed the right number of inputs: it requires 2, but ',...
            'only received ',errArgs{1}]; 
    case 'BadJudgementInstructions'
        msg = ['A set of judgement instructions is invalid if: a) the ',...
            'conditioning instructions set is invalid; b) if there ',...
            'are conflicts (overlaps) between judgements being ',...
            'applied directly to shocks and judgements being applied ',...
            'indirectly as conditioning instruments in an inversion. ',...
            'The instructions set contains the following error(s):'];
    case 'AnticipatedShocksOverlap'
        msg = ['There were overlaps in the following anticipated ',...
            'shock judgements and conditioning instruments in one or ',...
            'more periods:'];
    case 'AnticipatedShocksOverlap:Instance'
        msg = errArgs{1};
    case 'UnanticipatedShocksOverlap'
        msg = ['There were overlaps in the following unanticipated ',...
            'shock judgements and conditioning instruments in one or ',...
            'more periods:']; 
    case 'UnanticipatedShocksOverlap:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% JUDGMENTS.SHOCKS CLASS
function msg = get_Judgements_Shocks_error(errCode,~)                       %#ok<DEFNU>
switch errCode
    case 'BadApplyJudgementToForecastRunNargin'
        msg = ['The "applyJudgementToForecastRun" method requires 1 ',...
            'input, but did not receive any'];
    case 'BadApplyJudgementToForecastRunInput1'    
        msg = ['The input passed into the ',...
            '"applyJudgementToForecastRun" method must be an LSS ',...
            'model forecast run structure'];       
    case 'BadAnticipatedSet'
        msg = ['It is not possible to set anticipated shock ',...
            'judgements because the model associated with the ',...
            'judgements object (passed in on construction) does not ',...
            'contain anticipated shocks (is not forward looking)'];
    case 'BadAnticipatedInput'
        msg = ['The "Anticipated" property of the shock judgements ',...
            'object can only be set to a valid judgement cell array. ',...
            'On attempting to set the property with the input data, ',...
            'MAPS'' judgement data values class returned the ',...
            'following error(s):']; 
    case 'BadUnanticipatedInput'
        msg = ['The "Unanticipated" property of the shock judgements ',...
            'object can only be set to a valid judgement cell array. ',...
            'On attempting to set the property with the input data, ',...
            'MAPS'' judgement data values class returned the ',...
            'following error(s):'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% JUDGMENTS.TIMEVARYINGTRENDS CLASS
function msg = get_Judgements_TimeVaryingTrends_error(errCode,~)            %#ok<DEFNU>
switch errCode
    case 'BadApplyJudgementToForecastDatasetNargin'
        msg = ['The "applyJudgementToForecastRun" method requires 1 ',...
            'input, but did not receive any'];
    case 'BadApplyJudgementToForecastDatasetInput1'    
        msg = ['The input passed into the ',...
            '"applyJudgementToForecastRun" method must be an LSS ',...
            'model forecast run structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% KALMAN FILTER
function msg = get_kalman_filter_error(errCode,errArgs)                     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['kalman_filter was not passed the right number of ',...
            'inputs: it requires either 7 (if the model being used ',...
            'does not have measurement errors) or 8 (if the model ',...
            'being used does have measurement errors) inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to kalman_filter must be a finite, ',...
            'numeric two-dimensional matrix dataset of model observables'];
    case 'BadInput3'
        msg = ['3rd input passed to kalman_filter must be a finite, ',...
            'numeric square covariance matrix for the model variables'];
    case 'BadInput9'
        msg = ['Optional 9th input passed to kalman_filter must be a ',...
            'positive real integer dictating the period in which to ',...
            'start computing the log likelihood'];
    case 'IncompatiblePf0xf0'
        msg = ['The covariance matrix for the model variable dataset ',...
            'and the vector of model variable initial conditions must ',...
            'have consistent dimensions (as measured by the number of ',...
            'rows in the matrix and vector)'];
    case 'IncompatibleYG'
        msg = ['The model observable dataset and the matrix of ',...
            'loadings on the model variables from the measurement ',...
            'equations must have consistent dimensions (as measured ',...
            'by the number of rows in the dataset and matrix)'];
    case 'IncompatibleYLLHstartPeriod'
        msg = ['The period in which to begin computing the log ',...
            'likelihood cannot exceed the number of periods in the ',...
            'model observable datatset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% KALMAN FILTER USING CHANDRASEKHAR RECURSIONS
function msg = get_kalman_filter_using_chandrasekhar_recursions_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['kalman_filter_using_chandrasekhar_recursions was not ',...
            'passed the right number of inputs: it requires either 7 ',...
            '(if the model being used does not have measurement ',...
            'errors) or 8 (if the model being used does have ',...
            'measurement errors) inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'kalman_filter_using_chandrasekhar_recursions must be a ',...
            'finite, numeric two-dimensional matrix dataset of model ',...
            'observables'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'kalman_filter_using_chandrasekhar_recursions must be a ',...
            'finite, numeric square covariance matrix for the model ',...
            'variables'];
    case 'BadInput9'
        msg = ['Optional 9th input passed to '...
            'kalman_filter_using_chandrasekhar_recursions must be a ',...
            'positive real integer dictating the period in which to ',...
            'start computing the log likelihood'];        
    case 'IncompatiblePf0xf0'
        msg = ['The covariance matrix for the model variable dataset ',...
            'and the vector of model variable initial conditions must ',...
            'have consistent dimensions (as measured by the number of ',...
            'rows in the matrix and vector)'];
    case 'IncompatibleYG'
        msg = ['The model observable dataset and the matrix of ',...
            'loadings on the model variables from the measurement ',...
            'equations must have consistent dimensions (as measured ',...
            'by the number of rows in the dataset and matrix)'];
    case 'IncompatibleYLLHstartPeriod'
        msg = ['The period in which to begin computing the log ',...
            'likelihood cannot exceed the number of periods in the ',...
            'model observable datatset'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LAYOUT CHARTS
function msg = get_layout_charts_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['layout_charts was not passed the right ',...
            'number of inputs: it requires at least 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by layout_charts'...
            ' must be a cell array of data to be plotted, structured'...
            ' with one row per chart.'];
    case 'BadInput2'
        msg = ['If the 2nd input received by layout_charts'...
            ' is a non-empty cell array, then it must be structured as'...
            ' a single row.'];
   case 'NonExistentDataPlotFunc'
        msg = ['3rd input received by layout_charts'...
            ' must be either the name of a valid Matlab function to use'...
            ' to generate each chart, or a handle to such a function.'];
   case 'BadInput4'
        msg = ['4th input received by layout_charts'...
            ' must be a positive integer representing the number of'... 
            ' rows of charts to be presented per figure.'];
   case 'BadInput5'
        msg = ['5th input received by layout_charts'...
            ' must be a positive integer representing the number of'... 
            ' columns of charts to be presented per figure.'];
   case 'BadInput6'
        msg = ['6th input received by layout_charts'...
            ' must be a string to use in the title of each figure.'];
   case 'BadInput7'
        msg = ['7th input received by layout_charts'...
            ' must be a string controlling the  display of legends'...
            ' for subplots. Valid options are {None;All;First;Last;'...
            'Standalone;Generated} - see documentation for more'...
            ' details on these.'];
   case 'BadInput8'
        msg = ['8th input received by layout_charts'...
            ' must be a string controlling the position of the'...
            ' legend/s displayed; this should be any of the valid'...
            ' ''location'' strings accepted by the Matlab legend'...
            ' function (e.g. North; SouthWest; EaseOutside; Best; etc)'];
   case 'BadInput9'
        msg = ['9th input received by layout_charts'...
            ' must either be a column cell array of strings to be'...
            ' displayed as a legend for all charts, or a column cell'...
            ' array where the nth cell contains a column cell array'...
            ' of strings to display as a legend for the nth chart.'...
            ' In the latter case, the number of rows in the array'...
            ' must match the number of rows in dataToChartByRow.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% KALMAN SMOOTH
function msg = get_kalman_smooth_error(errCode,errArgs)                     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['kalman_smooth was not passed the right number of ',...
            'inputs: it requires either 7 (if the model being used ',...
            'does not have measurement errors) or 8 (if the model ',...
            'being used does have measurement errors) inputs, but ',...
            'only received ',errArgs{1}];
    case 'InconsistentInputsOutputs'
        msg = ['The number of outputs requested from kalman_smooth was ',...
            'not consistent with the number of inputs. In order to '...
            'output smoothed measurement errors, the measurement error '...
            'loadings matrix must be provided as an input.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LINK PAST AND FORECAST DATA
function msg = get_link_past_and_forecast_data_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs received by '...
            'link_past_and_forecast_data is not right: we expected 1 '...
            'input but received ' errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by link_past_and_forecast_data is '...
            'not as expected: it must be a structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD FIX RESPONSES INSTRUCTION FROM EXCEL
function msg = get_load_fix_responses_instruction_from_excel_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_fix_responses_instruction_from_excel was not ',...
            'passed the right number of inputs: it requires 5 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'load_fix_responses_instruction_from_excel must be a MAPS ',...
            'LSS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'load_fix_responses_instruction_from_excel must be a ',...
            'positive real forecast horizon integer'];        
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'load_fix_responses_instruction_from_excel must be a ',...
            '(full path) Excel file name string'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'load_fix_responses_instruction_from_excel must be a ',...
            'string representing the name of the sheet in the ',...
            'Excel file which contains the unanticipated fixes ',...
            'instruction (and it can be empty string if no ',...
            'unanticipated fixes are required)'];  
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'load_fix_responses_instruction_from_excel must be a ',...
            'string representing the name of the sheet in the ',...
            'Excel file which contains the anticipated fixes ',...
            'instruction (and it can be an empty string if no ',...
            'anticipated fixes are required)']; 
    case 'NoFixSheetProvided'
        msg = ['Both the 3rd and 4th inputs representing the sheet ',...
            'names for the unanticipated and anticipated fixes ',...
            'instructions respectively were empty strings - this is ',...
            'invalid because there must be at least one type of fix ',...
            'to load!'];
    case 'FixLoadFailure'
        msg = ['MAPS failed to load the ',errArgs{1},' fix ',...
            'instructions from ',errArgs{2},' in the ',errArgs{3},...
            'sheet. MAPS'' Excel time series loader function returned ',...
            'the following error(s):'];
    case 'FixDataIncompatibleWithHorizon'
        msg = ['The number of data points in the ',errArgs{1},' fix ',...
            'instructions from ',errArgs{2},' in the ',errArgs{3},...
            'sheet exceeds the forecast horizon input to this ',...
            'function. Either call this function with a longer ',...
            'forecast horizon or amend the data in the spreadsheet.'];        
    case 'InvalidData'
        msg = ['The data contained in the ''',errArgs{1},''' sheet ',...
            'not constitute a valid set of fix response instructions ',...
            'data. MAPS'' fix responses instructions object returned ',...
            'the following error(s):'];   
    case 'InvalidJudgements'
        msg = ['The fix responses instruction defined in the excel ',...
            'file does not constitute a valid MAPS'' LSS model ',...
            'set of judgements to impose. It contains the following ',...
            'error(s):']; 
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD MAT FILE AS STRCUTURE
function msg = get_load_mat_file_as_structure_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_mat_file_as_structure was not passed the right ',...
            'number of inputs: it requires 1 input, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to load_mat_file_as_structure must ',...
            'be a string representing the .mat file name'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD MODEL AND RUN BAYESIAN ESTIMATION SUPER MACRO
function msg = ...
    get_load_model_and_run_bayesian_estimation_super_macro_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_model_and_run_bayesian_estimation_super_macro ',...
            'was not passed the right number of inputs: it requires ',...
            'at least 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'load_model_and_run_bayesian_estimation_super_macro ',...
            'must be a string .mat file name'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'load_model_and_run_bayesian_estimation_super_macro ',...
            'must be a string variable name for the model to be ',...
            'loaded from the .mat file'];        
    case 'BadMatFileVarName'
        msg = ['MAPS cannot proceed with the Bayesian estimation ',...
            'because it was not possible to load the model variable ''',...
            errArgs{1},''' from the .mat file ''',errArgs{2},'''. ',...
            'MAPS'' .mat file loader function returned the following ',...
            'error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end 

%% LOAD MODEL OBSERVABLE DATA FROM EXCEL
function msg = get_load_model_observable_data_from_excel_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_model_observable_data_from_excel was not passed ',...
            'passed the right number of inputs: it requires 3 or 4',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'load_model_observable_data_from_excel must be a MAPS LSS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'load_model_observable_data_from_excel must be a (full ',...
            'path) Excel file name string'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'load_model_observable_data_from_excel must be a string ',...
            'representing the name of the sheet in the Excel file ',...
            'which contains the data'];  
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'load_model_observable_data_from_excel must be a logical ',...
            'scalar dictating whether or not the function should ',...
            'attempt to load the model observables from Excel ',...
            'directly (true) or whether it should load raw ',...
            'observables (and, if applicable, time-varying trends) ',...
            'and transform them to model space']; 
    case 'UnableToLoadModelObs'
        msg = ['MAPS was unable to load the model observable data. ',...
            'MAPS'' model time series Excel loader function returned ',...
            'the following error(s):'];        
    case 'ModelDoesNotHaveRawObs'
        msg = ['MAPS cannot load the raw observable data and ',...
            'transform it to model space because the model does not ',...
            'contain raw observables. If you intend to load model ',...
            'observables directly, then please set the relevant flag ',...
            'on input to this function to true'];       
    case 'UnableToLoadRawObs'
        msg = ['MAPS was unable to load the raw observable (and/or ',...
            'time-varying trends if part of the model being used). ',...
            'MAPS'' model time series Excel loader function returned ',...
            'the following error(s):'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% LOAD MODEL TIME SERIES DATA FROM EXCEL
function msg = get_load_model_time_series_data_from_excel_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_model_time_series_data_from_excel was not passed ',...
            'the right number of inputs: it requires at least 3 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'load_model_time_series_data_from_excel must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'load_model_time_series_data_from_excel must be a string, ',...
            'a row cell string array or a column cell string array ',...
            'identifying the metadata for one or more variable types ',...
            'in the model for which to load data'];
    case 'TooManyOutputArgs'
        msg = ['load_model_time_series_data_from_excel returns one ',...
            'matrix of data for each of the variable types identified ',...
            'in the input and a vector date numbers associated with ',...
            'the data. Therefore, the number of outputs requested ',...
            'cannot exceed the number of model variable metadata ',...
            'identifiers input plus one'];             
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD PARAMETERS AND OR BOUNDS FROM EXCEL
function msg = get_load_parameters_and_or_bounds_from_excel_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_parameters_and_or_bounds_from_excel was not ',...
            'passed the right number of inputs: it requires at least ',...
            '1 input, but received ',errArgs{1}];
    case 'BadParamExcelSheetDims'
        msg = ['The data loaded from the Excel file must not be ',...
            'fewer than two columns in dimension or greater than ',...
            'four (because the sheet must contain parameter mnemonics ',...
            'and at least one column for, but no more than: values, ',...
            'lower bounds and upper bounds'];
    case 'BadMnemonicsColHeader'
        msg = ['The first column of data loaded from Excel must ',...
            'contain mnemonics for the parameter values and or bounds ',...
            'loaded and must have a valid mnemonics header, which is ',...
            'one of the following: ',...
            create_comma_separated_list(errArgs{1})];
    case 'BadMnemsCol'
        msg = ['The first column of data loaded from Excel must ',...
            'contain mnemonics for the parameter values and or bounds ',...
            'and so must be a column cell string array'];
    case 'RepeatedMnems'
        msg = ['The first column of data loaded from Excel must ',...
            'contain mnemonics for the parameter values and or bounds ',...
            'and so must be unique: one or more of the mnemonics was ',...
            'repeated at least once'];
    case 'UnrecognisedHeader'
        msg = ['The following header on a column of data loaded from ',...
            'Excel for either parameter values or bounds was not ',...
            'recognised: ',errArgs{1},'. Please consult the content ',...
            'of this function for a list of valid headers'];
    case 'RepeatedHeader'
        msg = ['The following header on a column of data loaded from ',...
            'Excel was repeated as a header for another of the ',...
            'columns loaded, which means MAPS is unable to ',...
            'distinguish between them ',errArgs{1},'. Please consult ',...
            'the content of this function for a list of valid headers'];
    case 'BadValsCol'
        msg = ['It was not possible to convert the data under ',...
            errArgs{1},' to a numeric vector, so it does not ',...
            'constitute valid parameter values or bounds. MATLAB''s ',...
            'cell2mat function returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD RAW DATA FROM EXCEL
function msg = get_load_raw_data_from_excel_error(errCode,errArgs)          %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_raw_data_from_excel was not passed the right ',...
            'number of inputs: it requires at least 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to load_raw_data_from_excel must be ',...
            'an Excel file name string'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to load_raw_data_from_excel ',...
            'must be an Excel sheet name string'];
    case 'InvalidExcelDataFile'
        msg = ['MAPS cannot load the data in the Excel file ',...
            errArgs{1},' because the file could not be found on the ',...
            'search path. MAPS'' file existence checker function ',...
            'returned the following error. Please ensure the file ',...
            'name is valid and has an xlsx extension']; 
    case 'UnableToReadData'
        if isempty(errArgs{1})
            msg = ['MAPS was unable to read the data from the 1st ',...
                'sheet in the Excel file ',errArgs{2},'. MATLAB''s ',...
                'xlsread function returned the following error. ',...
                'Please ensure the file is valid and specify a sheet ',...
                'name if necessary'];
        else
            msg = ['MAPS was unable to read the data from sheet ',...
                errArgs{1},' in the Excel file ',errArgs{2},...
                '. MATLAB''s xlsread function returned the following ',...
                'error. Please ensure the file and sheet are valid'];
        end
    case 'SheetIsEmpty'
        if isempty(errArgs{1})
            msg = ['The 1st sheet in the Excel file ',errArgs{2},...
                ' was read in as containing no data by MATLAB''s ',...
                'xlsread function. Please ensure the file is valid ',...
                'specify a sheet name if necessary'];
        else
            msg = ['The ',errArgs{1},' sheet in the Excel file ',...
                errArgs{2},' was read in as containing no data by ',...
                'MATLAB''s xlsread function. Please ensure the file ',...
                'and sheet are valid'];
        end        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD RAW DATA FROM EXCEL WITH COLUMN HEADERS
function msg = get_load_raw_data_from_excel_with_column_headers_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_raw_data_from_excel_with_column_headers was not ',...
            'passed the right number of inputs: it requires at least ',...
            '1 input, but received ',errArgs{1}];
    case 'NoDataUnderHeaders'
        msg = ['The cell array of loaded data must contain at least ',...
            'two rows: one for the headers and one for the data ',...
            'corresponding to those headers'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD REGRESSION TEST DATA
function msg = get_load_regression_test_data_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_regression_test_data was not passed the right ',...
            'number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to load_regression_test_data must be ',...
            'a string representing the test directory/folder ',...
            '(containing the test data)'];
    case 'BadInput2'
        msg = ['2nd input passed to load_regression_test_data must be ',...
            'be a string representing the name of the test'];
    case 'BadTestDataFileContent'
        msg = ['The inputs and expected outputs data in ',errArgs{1},...
            ' must be column cell arrays, the tolerances must be a ',...
            'numeric column vector and the descriptions must be a ',...
            'column cell string array. All data must be of the same ',...
            'length (representing the number of test cases for that ',...
            'MAPS function or method'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD SPECIFIED TIME SERIES DATA FROM EXCEL
function msg = get_load_specified_time_series_data_from_excel_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_specified_time_series_data_from_excel was not ',...
            'passed the right number of inputs: it requires at least ',...
            '2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'load_specified_time_series_data_from_excel must be a ',...
            'string, a row cell string array or a column cell string ',...
            'array identifying the headers for one or more variables ',...
            'to extract from the spreadsheet'];
    case 'MissingHeaders'
        msg = ['MAPS cannot load the specified variables from Excel ',...
            'because the worksheet contained no headers and so MAPS ',...
            'has no way of identifying the data for individual variables'];
    case 'NonUniqueHeaders'
        msg = ['MAPS cannot load the specified variables from Excel ',...
            'because the worksheet contained a non-unique set of ',...
            'headers. Please ensure the headers are unique and then ',...
            'try again'];            
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD TARGETS AND WEIGHTS FOR MDE FROM EXCEL
function msg = get_load_targets_and_weights_for_MDE_from_excel_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_targets_and_weights_for_MDE_from_excel was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but received ',errArgs{1}];   
    case 'BadInput1'
        msg = ['1st input received by ',...
            'load_targets_and_weights_for_MDE_from_excel must be a ',...
            'string representing the name of an excel file'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'load_targets_and_weights_for_MDE_from_excel must be a ',...
            'string representing the name of the sheet from which to ',...
            'load the targets'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'load_targets_and_weights_for_MDE_from_excel must be a ',...
            'string representing the name of the sheet from which to ',...
            'load the weights'];  
    case 'TargetsLoadFailure'
        msg = ['MAPS was unable to load the targets with their ',...
            'mnemonics (which must appear in the 1st row of the ',...
            'sheet) from Excel. It''s time series Excel loader ',...
            'function returned the following error(s):'];
    case 'WeightsLoadFailure'
        msg = ['MAPS was unable to load the targets with their ',...
            'mnemonics (which must appear in the 1st row of the ',...
            'sheet) from Excel. It''s time series Excel loader ',...
            'function returned the following error(s):'];    
    case 'TargetsWeightsDimsMismatch'
        msg = ['The dimension of the targets in number of variables ',...
            'and time periods must be the same as the dimension of ',...
            'weights'];                  
    case 'WeightsTargetsMnemsMismatch'
        msg = ['The mnemonics associated with the targets loaded from ',...
            'Excel must be the same set of mnemonics associted with ',...
            'the weights loaded from Excel'];  
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD TIME SERIES DATA FROM EXCEL
function msg = get_load_time_series_data_from_excel_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_time_series_data_from_excel was not passed the ',...
            'right number of inputs: it requires at least 1 input, ',...
            'but received ',errArgs{1}];           
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOAD VARIABLES FROM MAT FILE
function msg = get_load_variables_from_mat_file_error(errCode,errArgs)      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['load_variables_from_mat_file was not passed the right ',...
            'number of inputs: it requires at least 2 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to load_variables_from_mat_file must ',...
            'be a string representing the .mat file name'];
    case 'BadInput2'
        msg = ['2nd and further inputs passed to ',...
            'load_variables_from_mat_file must be a strings ',...
            'representing the names of variables to be extracted from ',...
            'the .mat file'];  
    case 'BadNarginNargout'
        msg = ['The number of variables requested to be extracted ',...
            'from the .mat file (the 2nd input and onwards) must ',...
            'equal the number of variables requested as output arguments'];
    case 'MissingVariables'
        msg = ['The following variables requested to be extracted ',...
            'from the .mat file did not exist among its contents - ',...
            'please check the content and format of the .mat file'];  
    case 'MissingVariables:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOOKUP INDEX NUMBERS IN ARRAY OF ROW STRING ARRAYS
function msg = ...
    get_lookup_index_numbers_in_array_of_row_string_arrays_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['lookup_index_numbers_in_array_of_row_string_arrays ',...
            'was not passed the right number of inputs: it requires ',...
            '2 or 3 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'lookup_index_numbers_in_array_of_row_string_arrays must ',...
            'be a two-dimensional cell string array (i.e. an array of ',...
            'row string arrays) in which to lookup index/row number ',...
            '(i.e. a reference array)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'lookup_index_numbers_in_array_of_row_string_arrays must ',...
            'be a two-dimensional cell string array (i.e. an array of ',...
            'row string arrays) whose index/row number(s) are to be ',...
            'looked-up in the reference set (i.e. a lookup array)'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'lookup_index_numbers_in_array_of_row_string_arrays must ',...
            'be a logical scalar dictating whether the rows in the ',...
            'lookup string array must contain a unique set of strings ',...
            'or not (the default)']; 
    case 'IncompatibleRefAndLookupArrays'
        msg = ['The reference array of row string arrays and the ',...
            'lookup array of row string arrays must have the same ',...
            'number of columns for the row lookup to be valid'];
    case 'NonUniqueRefStrArrays'
        msg = ['The rows of strings in which to lookup index numbers ',...
            '(the reference array) must be unique (otherwise it is ',...
            'not possible to return single index numbers)'];
    case 'NonUniqueLookupStrArrays'
        msg = ['If the optional input flag is set to true then the ',...
            'rows in the array of lookup strings must be unique'];
    case 'UnknownLookupStrArrays'
        msg = ['It was not possible to lookup the index number(s) of ',...
            'the following rows of string(s) because they are not ',...
            'part of the reference array in which to lookup the index ',...
            'number(s):'];
    case 'UnknownLookupStrArrays:Instance'
        allStrsInRow = create_comma_separated_list(errArgs);
        msg = allStrsInRow;
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOOKUP INDEX NUMBERS IN STRING ARRAY
function msg = get_lookup_index_numbers_in_string_array_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['lookup_index_numbers_in_string_array was not passed ',...
            'the right number of inputs: it requires 2 or 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'lookup_index_numbers_in_string_array must be a column ',...
            'cell string array of strings in which to lookup index ',...
            'numbers (i.e. a reference array)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'lookup_index_numbers_in_string_array must be a column ',...
            'cell string array or string whose index number(s) is ',...
            '(are) to be looked-up in the reference set (i.e. a ',...
            'lookup array)'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'lookup_index_numbers_in_string_array must be a logical ',...
            'scalar dictating whether the lookup string array must ',...
            'contain a unique set of strings or not (the default)'];        
    case 'NonUniqueRefStrs'
        msg = ['The strings in which to lookup index numbers (the ',...
            'reference array) must be unique (otherwise it is not ',...
            'possible to return single index numbers)'];
    case 'NonUniqueLookupStrs'
        msg = ['The array of lookup strings must be unique (given ',...
            'that the optional input flag that determines a ',...
            'requirement for this was set to true)'];
    case 'UnknownLookupStrs'
        msg = ['It was not possible to lookup the index number(s) of ',...
            'the following string(s) because they are not part of the ',...
            'reference set:'];
    case 'UnknownLookupStrs:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOOKUP STRING ARRAY IN ROW STRING ARRAYS
function msg = get_lookup_string_array_in_row_string_arrays_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['lookup_string_array_in_row_string_arrays was not passed ',...
            'the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'lookup_string_array_in_row_string_arrays must be a two-dimensional ',...
            'cell string array of strings in which to lookup index ',...
            'numbers (i.e. a reference array)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'lookup_string_array_in_row_string_arrays must be a row ',...
            'cell string array to be looked-up in the reference set (i.e. a ',...
            'lookup array)'];
    case 'IncompatibleRefAndLookupArrays'
        msg = ['The reference array of row string arrays and the ',...
            'lookup row string array must have the same ',...
            'number of columns for the row lookup to be valid'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end    

%% MAPS BAR PLOT
function msg = get_MAPS_bar_plot_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['MAPS_bar_plot was not passed the right ',...
            'number of inputs: it requires at least 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by MAPS_bar_plot'...
            ' must be a two-dimensional matrix of data to plot'...
            ' with rows representing distinct bar series to stack on ,'...
            ' the y-axis and columns representing distinct points along the'...
            ' x-axis.'];
    case 'BadInput2'
        msg = ['2nd input received by MAPS_bar_plot'...
            ' must be a column cell array of strings to display in the'...
            ' legend, containing the same number of elements as the'...
            ' number of rows in barData.'];
    case 'BadInput3'
        msg = ['3rd input received by MAPS_bar_plot'...
            ' must be a row vector of values to display along the x-axis.'];
   case 'BadInput4'
        msg = ['4th input received by MAPS_bar_plot'...
            ' must be a string to display in the chart title.'];
   case 'BadInput5'
        msg = ['5th input received by MAPS_bar_plot'...
            ' must be a structure containing name/value pairs'...
            ' controlling the layout of the chart and its content.'];
   case 'UnknownDisplayOptionName'
        msg = ['MAPS_bar_plot found an unknown option in the '...
            'displayOptions structure: ' errArgs{1}];
   case 'InconsistentXAxisLabelsDim'
        msg = ['3rd input received by MAPS_bar_plot must'...
            ' have the same number of elements as the number of columns'...
            ' in barData.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MAPS LINE CHART
function msg = get_MAPS_line_chart_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['MAPS_line_chart was not passed the right ',...
            'number of inputs: it requires at least 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by MAPS_line_chart'...
            ' must be an nSeries x nDatapoints two-dimensional matrix'...
            ' of data to plot.'];
    case 'BadInput2'
        msg = ['2nd input received by MAPS_line_chart'...
            ' must be a vector of values to display along the x-axis.'];
    case 'BadInput3'
        msg = ['3rd input received by MAPS_line_chart'...
            ' must be a string to display in the chart title.'];
    case 'BadInput4'
        msg = ['4th input received by MAPS_line_chart'...
            ' must be a structure containing name/value pairs'...
            ' controlling the layout of the chart and its content.'];
   case 'InconsistentXAxisLabelsDim'
        msg = ['2nd input received by MAPS_line_chart must'...
            ' have the same number of elements as the number of columns'...
            ' in barData.'];
   case 'UnknownDisplayOptionName'
        msg = ['MAPS_line_chart found an unknown option in the '...
            'displayOptions structure: ' errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% LOOKUP MODEL INDEX NUMBERS
function msg = get_lookup_model_index_numbers_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['lookup_model_index_numbers was not passed the right ',...
            'number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MEASUREMENT EQUATION DECOMPOSITION
function msg = ...
    get_measurement_equation_decomposition_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['measurement_equation_decomposition was not passed the '...
            'right number of inputs: it requires 5 or 6 inputs, but ',...
            'receieved ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to measurement_equation_decomposition '...
            'must be a MAPS model structure with field .Constructor'];
    case 'BadInput2'
        msg = ['2nd input passed to measurement_equation_decomposition',...
            ' must be a string containing a variable name'];
    case 'BadInput3'
        msg = ['3rd input passed to measurement_equation_decomposition',...
            ' must be a matrix with finite numeric entries '...
            'representing the model variables'];
    case 'BadInput4'
        msg = ['4th input passed to measurement_equation_decomposition',...
            ' must be a matrix with finite numeric entries '...
            'measurement equations'];
    case 'BadInput5'
        msg = ['5th input passed to measurement_equation_decomposition',...
            ' must be a matrix with finite numeric entries '...
            'representing the measurement errors'];
    case 'BadInput6'
        msg = ['6th input passed to measurement_equation_decomposition',...
            ' must be a matrix with finite numeric entries'];
    case 'ObservableDoesNotExist'
        msg = ['Measurement equation and variable name to be '...
            'decomposed cannot be associated'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MERGE POSTERIOR SIMULATION CHAINS
function msg = get_merge_posterior_simulation_chains_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['merge_posterior_simulation_chains was not passed the ',...
            'right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];     
    case 'BadInput1'
        msg = ['1st input received by ',...
            'merge_posterior_simulation_chains must be a finite, real ',...
            'two- or three-dimensional matrix of data from a ',...
            'posterior simulation (where the 2nd dimension measures ',...
            'number of draws in each chain and the third dimension ',...
            'number of chains (which can equal 1)'];     
    otherwise
        throw_missing_error_code_error(errCode);
end
end 

%% MINIMISE LOSS FOR MDE
function msg = get_minimise_loss_for_MDE_error(errCode,errArgs)             %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['minimise_loss_for_MDE was not passed the right number ',...
            'of inputs: it requires 7 or 8 inputs but received ',...
            errArgs{1}];
    case 'BadInput6'
        msg = ['6th input passed to minimise_loss_for_MDE must be a ',...
            'string representing the name of the model analysis ',...
            'function to call to compute the model property or ',...
            'properties for MDE'];
    case 'BadInput7'
        msg = ['7th input passed to minimise_loss_for_MDE must be a ',...
            'row cell array of non-model inputs to the model analysis ',...
            'function to call to compute the model property or ',...
            'properties for MDE'];
    case 'BadInput8'
        msg = ['Optional 8th input passed to minimise_loss_for_MDE ',...
            'must be structure of options for the MDE'];
    case 'BadModelClass'
        msg = 'The model input must be a valid MAPS LSS model structure';
    case 'BadEstimationParamMnems'
        msg = ['The mnemonics identifying the parameters to estimate ',...
            'in the MDE are invalid either because they are not ',...
            'unique or because one or more of them could not be found ',...
            'among the full set of parameter mnemonics in the model. ',...
            'MAPS'' model mnemonic index lookup function returned ',...
            'the following error(s):'];
    case 'ParameterInitialisationIsInvalid'
        msg = ['The vector of initialisation values for the ',...
            'parameters in the MDE is invalid because the LSS model ',...
            'could not be resolved under that parameterisation. The ',...
            'function in MAPS which updates the model parameters and ',...
            'resolves the model returned the following error(s):'];
    case 'InvalidOptimiser'
        msg = ['The optimisation routine ''',errArgs{1},''' passed in ',...
            'as part of the MDE options structure is invalid. Please ',...
            'choose from among the following: ',...
            create_comma_separated_list(errArgs{2})];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MINIMISE LOSS FOR MDE USING CMAES_MAPS
function msg = get_minimise_loss_for_MDE_using_CMAES_MAPS_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['minimise_loss_for_MDE_using_CMAES_MAPS was not passed ',...
            'the right number of inputs: it requires 12 inputs but ',...
            'received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MINIMISE LOSS FOR MDE USING CSMINWEL_MAPS
function msg = get_minimise_loss_for_MDE_using_csminwel_MAPS_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['minimise_loss_for_MDE_using_csminwel_MAPS was not passed ',...
            'the right number of inputs: it requires 12 inputs but ',...
            'received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MINIMISE LOSS FOR MDE USING FMINCON
function msg = get_minimise_loss_for_MDE_using_fmincon_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['minimise_loss_for_MDE_using_fmincon was not passed ',...
            'the right number of inputs: it requires 12 inputs but ',...
            'received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MODEL EQUATION DECOMPOSITION
function msg = get_model_equation_decomposition_error(errCode,errArgs)      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs ',...
            'received by model_equation_decomposition is not ',...
            'right: we expected 7 or 8 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'model_equation_decomposition is not as expected: ',...
            'it must be a structure representing a MAPS model'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a string containing the name of the',...
            ' variable to decompose'];
    case 'BadInput3'
        msg = ['3nd input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a string containing the name of the ',...
            'equation wrt to which we decompose'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'model_equation_decomposition is not as expected: ',...
            '  it must be a numeric and finite column vector ',...
            'representing the smoothed estimates of the model variables'];
    case 'BadInput5'
        msg = ['5th input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a numeric and finite column vector ',...
            'representing the forecast for the model variables'];
    case 'BadInput6'
        msg = ['6th input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a numeric and finite column vector ',...
            'representing the estimates of the shock over the past'];
    case 'BadInput7'
        msg = ['7th input received by ',...
            'model_equation_decomposition is not as expected: ',...
            ' it must be a structure describing the shocks over the ',...
            'forecast'];
    case 'BadInput8'
        msg = ['8th input passed to measurement_equation_decomposition',...
            ' must be a matrix with finite numeric entries'];
    case 'ValidateDecompositionInputs'
        msg = ['The variable/equation pair for the decomposition',...
            ' are incompatible: the following exceptions were found'];
    case 'ValidateDecompositionInputs:VariableDoesNotExist'
        msg = ['The name of the variable to decompose does not ',...
            'correspond to the model variable mnemonics: ',errArgs{1}];
    case 'ValidateDecompositionInputs:EquationDoesNotExist'
        msg = ['The name of the equation wrt which you want to ',...
            'decompose does not correspond any of the model ',...
            'equations: ',errArgs{1}];
    case 'ValidateDecompositionInputs:BadVariableEquationPair'
        msg = ['The variable (',errArgs{1},') and the equation ('...
            ,errArgs{2},') you choose for the ',...
            'decomposition are incompatible'];
    case 'BadShockFields'
        msg = ['The shocks structure should have fields '...
            '.anticipated and/or .unanticipated'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MODIFY MODEL FROM FILE
function msg = get_modify_model_from_file_error...
    (errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['modify_model_from_file was not'...
            ' passed the right number of inputs: it requires 2 but '...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by modify_model_from_file'...
            ' must be a string representing'...
            ' the name of the MAPS text file to be modified.'];
    case 'BadInput2'
        msg = ['2nd input received by modify_model_from_file'...
            ' must be a string representing'...
            ' the name of the modification info file.'];
    case 'BadInput3'
        msg = ['3rd input received by modify_model_from_file'...
            ' must be a string representing'...
            ' a name for the new modified model text file.'];
    case 'BadNewModelName'
        msg = ['3rd input received by modify_model_from_file'...
            ', the name of the new modified model'...
            ' must be different from the name of the original model,'...
            ' the 1st input.'];
    case 'NLBLmodelError'
        msg = ['Only Linear State Space models can be modified using '...
            'the model modifier. The model provided was not LSS.'];
    case 'OldModelCreationError'
        msg = ['MAPS could not create the model which you requested to '...
            'modify for the following reasons:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% MODIFY MODEL FROM STRUCT
function msg = get_modify_model_from_struct_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['modify_model_from_struct was not passed the right number'...
            ' of inputs: it requires 2 but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by modify_model_from_struct must be'...
            ' a MAPS model structure to be modified.'];
    case 'BadInput2'
        msg = ['2nd input received by modify_model_from_struct must be a '...
            'string representing the name of the modification info file.'];
    case 'BadInput3'
        msg = ['3rd input received by modify_model_from_struct most be '...
            'a string representing the name of the MAPS file for the '...
            'modified model.'];
    case 'ModifiedModelValidationError'
        msg = ['When MAPS tried to create the new model with your '...
            ' requested modifications it found the following errors:'];       
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% OPTIMISE POSTERIOR
function msg = get_optimise_posterior_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['optimise_posterior was not passed the right number of ',...
            'inputs: it requires 4 or 5 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by optimise_posterior must be a ',...
            'MAPS LSS model structure'];
    case 'BadInput2'
        msg = ['2nd input received by optimise_posterior must be a ',...
            'structure of information about the estimation priors'];     
    case 'BadInput3'
        msg = ['3rd input received by optimise_posterior must be a ',...
            'finite, real two-dimensional matrix of model observable ',...
            'data'];
    case 'BadInput4'
        msg = ['4th input received by optimise_posterior must be a ',...
            'finite, real column vector of initial conditions ',...
            '(guesses) for the vector of parameters being estimated'];
    case 'BadInput5'
        msg = ['Optional 5th input received by optimise_posterior ',...
            'must be a structure of optimisation options'];
    case 'BadModelClass'
        msg = 'The model input is not of the LSS class';
    case 'BadModelCharacteristic'
        msg = ['The LSS model input must have measurement equations ',...
            'to be valid for use in the MAPS Bayesian estimation toolkit'];
    case 'InvalidOptimiser'
        msg = ['The optimisation routine ''',errArgs{1},''' passed in ',...
            'as part of the Bayesian posterior optimisation options ',...
            'structure is invalid. Please choose from among the ',...
            'following: ',create_comma_separated_list(errArgs{2})];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% OPTIMISE POSTERIOR USING CMAES_MAPS
function msg = get_optimise_posterior_using_CMAES_MAPS_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['optimise_posterior_using_CMAES_MAPS was not passed ',...
            'the right number of inputs: it requires 4 inputs, but ',...
            'only received ',errArgs{1}];
    case 'InvalidInputs'
        msg = ['Preparation of inputs for CMAES failed with the ',...
            'following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% OPTIMISE POSTERIOR USING CSMINWEL_MAPS
function msg = get_optimise_posterior_using_csminwel_MAPS_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['optimise_posterior_using_csminwel_MAPS was not passed ',...
            'the right number of inputs: it requires 4 inputs, but ',...
            'only received ',errArgs{1}];
    case 'InvalidInputs'
        msg = ['Preparation of inputs for csminwel failed with the ',...
            'following error(s):'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% OPTIMISE POSTERIOR USING FMINCON
function msg = get_optimise_posterior_using_fmincon_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['optimise_posterior_using_fmincon was not passed the ',...
            'right number of inputs: it requires 4 inputs, but only ',...
            'received ',errArgs{1}];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% OVERLAY DEFAULT STRUCTURE
function msg = get_overlay_default_structure_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['overlay_default_structure was not passed the right ',...
            'number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by overlay_default_structure must ',...
            'be a structure to overlay on to the defaults structure'];
    case 'BadInput2'
        msg = ['2nd input received by overlay_default_structure must ',...
            'be a structure of defaults'];
    case 'InvalidFields'
        msg = ['The structure of options passed in contained the ',...
            'following invalid option fields'];
    case 'InvalidFields:Instance'
        msg = ['''',errArgs{1},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% OVERLAY ONE INCOMPLETE DATASET ON TO ANOTHER
function msg = get_overlay_one_incomplete_dataset_on_to_another_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['overlay_one_incomplete_dataset_on_to_another was not ',...
            'passed the right number of inputs: it requires 4 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'overlay_one_incomplete_dataset_on_to_another ',...
            'representing the first model dataset must be a real, two-',...
            'dimensional matrix with no infinite values'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'overlay_one_incomplete_dataset_on_to_another ',...
            'must be column cell string array or column vector of ',...
            'index numbers representing the model metadata for the ',...
            'first dataset input'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'overlay_one_incomplete_dataset_on_to_another ',...
            'representing the second model dataset must be a real, ',...
            'two-dimensional matrix with no infinite values'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'overlay_one_incomplete_dataset_on_to_another ',...
            'must be column cell string array or column vector of ',...
            'index numbers representing the model metadata for the ',...
            'second dataset input'];
    case 'Dataset1DimsInconsistentWithDataset2'
        msg = ['The number of columns (indexing time periods) in the ',...
            'first dataset was not consistent with the number of ',...
            'columns in the second dataset'];
    case 'Metadata1DimsInconsistentWithData1'
        msg = ['The number of rows (indexing variables) in the first ',...
            'dataset was not consistent with the number of rows in ',...
            'the model metadata for the first dataset'];
    case 'Metadata2DimsInconsistentWithData2'
        msg = ['The number of rows (indexing variables) in the second ',...
            'dataset was not consistent with the number of rows in ',...
            'the model metadata for the second dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% OVERLAY STRUCTURE
function msg = get_overlay_structure_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['overlay_structure was not passed the right number of ',...
            'inputs: it requires 2 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by overlay_structure must be a ',...
            'structure to overlay on to the reference structure'];
    case 'BadInput2'
        msg = ['2nd input received by overlay_structure must be a ',...
            'reference structure on which to do the overlay'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PACKAGE OUTPUTS FROM CMAES_MAPS
function msg = get_package_outputs_from_CMAES_MAPS_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['package_outputs_from_CMAES_MAPS was not passed the ',...
            'right number of inputs: it requires 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to package_outputs_from_CMAES_MAPS ',...
            'must be a numeric scalar value for the objective ',...
            'function on termination'];
    case 'BadInput2'
        msg = ['2nd input passed to package_outputs_from_CMAES_MAPS ',...
            'must be a positive numeric integer for the number of ',...
            'function evaluations made during the optimisation'];
    case 'BadInput3'
        msg = ['3rd input passed to package_outputs_from_CMAES_MAPS ',...
            'must be a scalar cell containing a string describing the ',...
            'reason for termination (and yes this is a very strange ',...
            'format for a single string - there are many oddities in ',...
            'CMAES)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PACKAGE OUTPUTS FROM FMINCON
function msg = get_package_outputs_from_fmincon_error(errCode,errArgs)      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['package_outputs_from_fmincon was not passed the ',...
            'right number of inputs: it requires 6 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to package_outputs_from_fmincon ',...
            'must be a numeric scalar value for the objective ',...
            'function on termination'];
    case 'BadInput2'
        msg = ['2nd input passed to package_outputs_from_fmincon ',...
            'must be a numeric integer (flag) describing the reason ',...
            'for termination'];
    case 'BadInput3'
        msg = ['3rd input passed to package_outputs_from_fmincon ',...
            'must be a structure of additional output information ',...
            '(like number of function evaluations etc)']; 
    case 'BadInput4'
        msg = ['4th input passed to package_outputs_from_fmincon ',...
            'must be a structure of Lagrange multipliers'];
    case 'BadInput5'
        msg = ['5th input passed to package_outputs_from_fmincon ',...
            'must be a TO BE COMPLETED'];  
    case 'BadInput6'
        msg = ['6th input passed to package_outputs_from_fmincon ',...
            'must be a TO BE COMPLETED'];          
    case 'BadOutputInfoStruct'
        msg = ['The structure of additional output information (like ',...
            'number of function evaluations etc) passed in as 3rd ',...
            'input to package_outputs_from_fmincon was not as ',...
            'expected. On attempting to unpack the expected fields to ',...
            'package as output, the following error was caught:'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PACK MODEL
function msg = get_pack_model_error(errCode,errArgs)                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['pack_model was not passed the right number of inputs: ',...
            'it requires 3 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to pack_model must be a MAPS model ',...
            'structure which must have a ''Constructor'' field'];
    case 'BadInput2'
        msg = ['2nd input passed to pack_model must be a vector ',...
            'cell string array of model component identifiers'];
    case 'BadInput3'
        msg = ['3rd input passed to pack_model must be a vector ',...
            'cell string array of data to pack into the model'];
    case 'InconsistentIdentifierDataDims'
        msg = ['The number of identifiers passed in (identifying ',...
            'model components to pack) must equal the number of data ',...
            'components passed in (to pack into the model)'];
    case 'PackFailure'
        msg = 'MAPS was unable to pack the following model component(s):';
    case 'PackFailure:NonExistentID'
        msg = ['The identifier ''',errArgs{1},''' could not be found ',...
            'among the list of valid MAPS model component identifiers ',...
            'in the model input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PARSE DECOMP ADD ON
function msg = get_parse_decomp_add_on_error(errCode,errArgs)               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['parse_decomp_add_on was not passed the right number ',...
            'of inputs: it requires 2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to parse_decomp_add_on must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to parse_decomp_add_on must be a ',...
            'full path file name string to the decomposition add on file'];
    case 'BadModelClass'
        msg = ['Model input passed to parse_decomp_add_on must be of ',...
            'the linear state space class'];
    case 'AddOnFileSyntaxErrors'
        msg = ['MAPS was unable to parse the decomposition add-on ',...
            'information in ''',errArgs{1},''' due to the following ',...
            'add-on file syntax exceptions:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PARSE ESTIMATION INFORMATION
function msg = get_parse_estimation_info_file_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
case 'BadNargin'
        msg = ['parse_estimation_info_file was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to parse_estimation_info_file must ',...
            'be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to parse_estimation_info_file must ',...
            'be a full path file name string to the estimation info file'];
    case 'BadModelClass'
        msg = ['Model input passed to parse_estimation_info_file ',...
            'must be of the linear state space class'];
    case 'InfoFileSyntaxErrors'
        msg = ['MAPS was unable to parse the estimation info in ''',...
            errArgs{1},''' due to the following info file syntax ',...
            'exceptions:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PARSE LSS MODEL
function msg = get_parse_LSS_model_error(errCode,errArgs)                   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['parse_LSS_model was not passed the right mumber of ',...
            'inputs: it requires 1 input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to parse_LSS_model must be a string ',...
            'representing the full path file name for a MAPS linear ',...
            'state space model'];
    case 'ModelFileSyntaxErrors'
        msg = ['MAPS was unable to parse the model in ''',errArgs{1},...
            ''' due to the following model file syntax exceptions:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PARSE NLBL MODEL
function msg = get_parse_NLBL_model_error(errCode,errArgs)                   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['parse_NLBL_model was not passed the right mumber of ',...
            'inputs: it requires 1 input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to parse_NLBL_model must be a string ',...
            'representing the full path file name for a MAPS ',...
            'non-linear backward looking model'];
    case 'ModelFileSyntaxErrors'
        msg = ['MAPS was unable to parse the model in ''',errArgs{1},...
            ''' due to the following model file syntax exceptions:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PARSE MAPS MODEL TEXT INFO
function msg = get_parse_MAPS_model_text_info_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['parse_MAPS_model_text_info was not passed the right ',...
            'number of inputs: it requires 2 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to parse_MAPS_model_text_info ',...
            'must be a four column cell array containing information ',...
            'about the format of the MAPS model file'];
    case 'BadInput2'
        msg = ['2nd input passed to parse_MAPS_model_text_info ',...
            'must be a string representing the full path file name ',...
            'for MAPS model'];
    case 'FileFormatError'
        msg = ['MAPS was unable to parse the model owing to the ',...
            'following file format syntax errors:'];
    case 'FileFormatError:RepeatedKeyword'
        msg = ['MAPS found more than one instance of model file ',...
            'keyword ''',errArgs{1},''' on lines: ',errArgs{2}];
    case 'FileFormatError:MissingKeyword'
        msg = ['MAPS was unable to find compulsory model file ',...
            'keyword ''',errArgs{1},''''];
    case 'FileFormatError:MissingInfo'
        msg = ['MAPS could not find any information under ',...
            'compulsory model file key word: ''',errArgs{1},''''];
    case 'FileFormatError:BadlyFormattedInfo'
        msg = ['Information under ''',errArgs{1},''' must be ',...
            'formatted in the following way: ''',errArgs{2},''''];
    case 'BadLines'
        msg = ['The following lines under the model field ID were ',...
            'not formatted correctly: ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PCT
function msg = get_pct_error(errCode,~)                                     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['pct was not passed the right number of inputs: it '...
            'requires 1 but did not receive any'];
    case 'BadInput1'
        msg = ['1st input received by pct must be a real numeric ',...
            'two-dimensional matrix of time series data'];
    case 'ContainsZeros'
        msg = ['It is not possible to calculate percentage changes ',...
            'for at least one of the time series input because it/',...
            'they have zero values in one or more periods'];
    case 'TooShort'
        msg = ['It is not possible to compute percentage changes for ',...
            'the time series input because they contained fewer than ',...
            '2 data points (as measured by number of columns)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PLAIN VANILLA PROJECT LSS MODEL VARIABLES
function msg = get_plain_vanilla_project_LSS_model_variables_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['plain_vanilla_project_LSS_model_variables was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'plain_vanilla_project_LSS_model_variables must be a ',...
            'positive numeric scalar representing the number of ',...
            'periods in the projection'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PLAIN VANILLA PROJECT USING LSS MODEL
function msg = get_plain_vanilla_project_using_LSS_model_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['plain_vanilla_project_using_LSS_model was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'plain_vanilla_project_using_LSS_model must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'plain_vanilla_project_using_LSS_model must be a ',...
            'structure containing an existing forecast run dataset'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'plain_vanilla_project_using_LSS_model must be a ',...
            'positive numeric integer representing the forecast ',...
            'horizon over which to project'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PLOT LINES WITH DASHED FORECASTS
function msg = get_plot_lines_with_dashed_forecasts_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['plot_lines_with_dashed_forecasts was not passed the right '...
            'number of inputs: it requires 3 but received ' errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by plot_lines_with_dashed_forecasts '...
            'must be a real two dimensional numeric matrix containing the '...
            'series to be plotted.'];
    case 'BadInput2'
        msg = ['2nd input received by plot_lines_with_dashed_forecasts '...
            'must be a string to be used for the chart title (it can be an '...
            'empty string).'];
    case 'BadInput3'
        msg = ['3rd input received by plot_lines_with_dashed_forecasts '...
            'must be a real positive integer representing the number of '...
            'periods in the forecast horizon.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PRE PARSE MODEL
function msg = get_pre_parse_model_error(errCode,errArgs)                   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['pre_parse_model was not passed the right number of ',...
            'inputs: it requires 1 input, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to pre_parse_model must be a string ',...
            'representing the full path file name for a MAPS model'];
    case 'BadModelFile'
        msg = ['You have tried to parse a model. The model must be ',...
            'either linear state space (LSS) or non-linear backward-',...
            'looking (NLBL): the model in ''',errArgs{1},''' is not ',...
            'a valid LSS or NLBL model'];
    case 'UncategorisableModelFile'
        msg = ['You have tried to parse a model. The model must be ',...
            'either linear state space (LSS) or non-linear backward-',...
            'looking (NLBL): the model in ''',errArgs{1},''' could ',...
            'not be categorised as either LSS or NLBL'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PREPARE ANONYMOUS FUNCTION HANDLE FOR FMINCON
function msg = get_prepare_anonymous_function_handle_for_fmincon_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['prepare_anonymous_function_handle_for_fmincon was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'prepare_anonymous_function_handle_for_fmincon must be ',...
            'a string objective function name'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'prepare_anonymous_function_handle_for_fmincon must be a ',...
            'row cell array of (fixed) inputs to the objective function'];
    case 'UnableToCreateFuncHandle'
        msg = ['MAPS was unable to create the function handle. On ',...
            'attempting to do so MATLAB returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PREPARE INPUTS FOR CMAES_MAPS
function msg = get_prepare_inputs_for_CMAES_MAPS_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['prepare_inputs_for_CMAES_MAPS was not passed the ',...
            'right number of inputs: it requires 3 inputs, but only ',...
            'received ',errArgs{1}];         
    case 'InvalidOptimisationOptions'
        msg = ['One or more of the required optimisation options was ',...
            'missing. On attempting to unpack them, MATLAB returned ',...
            'the following error:'];
    case 'InvalidSTDinitialisationScalar'    
        msg = ['The initialisation value for the search variance must ',...
            'be a postive, numeric scalar'];
    case 'InvalidBounds'
        msg = ['It was not possible to initialise the search vector ',...
            'because the input bounds were not as expected. MATLAB ',...
            'returned the following error:'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PREPARE INPUTS FOR CSMINWEL_MAPS
function msg = get_prepare_inputs_for_csminwel_MAPS_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['prepare_inputs_for_csminwel_MAPS was not passed the ',...
            'right number of inputs: it requires 4 inputs, but only ',...
            'received ',errArgs{1}];       
    case 'InvalidOptimisationOptions'
        msg = ['One or more of the required optimisation options was ',...
            'missing. On attempting to unpack them, MATLAB returned ',...
            'the following error:'];
    case 'UnableToSetupHessianInitialisation'
        msg = ['It was not possible to initialise the inverse Hessian ',...
            'because either the input parameter initialisation was ',...
            'not a numeric column vector as expected or the input ',...
            'inverse Hessian scalar option field did not contain a ',...
            'numeric scalar as expected'];
    case 'UnableToTransformParams'
        msg = ['It was not possible to transform the parameters to ',...
            'the unbounded domain either because MAPS'' model ',...
            'unpacker function failed to unpack the patrameter lower ',...
            'and upper bounds for estimation or because the function ',...
            'which performs the parameter transformation returned an ',...
            'error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PREPARE PRIOR DISTRIBUTION DATA
function msg = get_prepare_prior_distribution_data_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['prepare_prior_distribution_data was not passed the right ',...
            'number of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by prepare_prior_distribution_data'...
            ' must be a MAPS Priors structure, as used in the'...
            ' estimation toolkit. In particular, it must contain'...
            ' fields for: distribution name; two shape parameters;'...
            ' lower and upper bounds.'];
    case 'BadInput2'
        msg = ['2nd input received by prepare_prior_distribution_data'...
            ' must be a positive integer indicating the number of'...
            ' points at which to evaluate each prior distribution'...
            ' between the bounds.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PRODUCE DATA BASED NEWS DECOMP
function msg = get_produce_data_based_news_decomp_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['produce_data_based_news_decomp was not passed the right'...
            ' number of inputs: it requires 3 but received ' errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by produce_data_based_news_decomp '...
            'must be a MAPS model structure.'];
    case 'BadInput2'
        msg = ['2nd input received by produce_data_based_news_decomp '...
            'must be a MAPS data structure containing the base run data.'];
    case 'BadInput3'
        msg = ['3rd input received by produce_data_based_news_decomp '...
            'must be a MAPS data structure containing the provisional '...
            'run data.'];
    case 'BadModelClass'
        msg = ['Model provided to produce_data_based_news_decomp was '...
            'invalid. It must be an LSS model with data transformation '...
            'equations. One of these conditions was violated.'];
    case 'BadDataNews'
        msg = ['The provisional run provided to produce_data_based_news'...
            '_decomp does not contain any backdata news to be '...
            'decomposed.'];
    case 'BadProvJudgements'
        msg = ['The provisional run provided to produce_data_based_news'...
            '_decomp includes judgements to shocks over the forecast '...
            'horizon. This function only handles changes to the '...
            'backdata, or time trends over the forecast.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PRODUCE SHOCK BASED NEWS DECOMP
function msg = get_produce_shock_based_news_decomp_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['produce_shock_based_news_decomp was not passed the '...
            'right number of inputs: it requires 4 but received ' ...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by produce_shock_based_news_decomp '...
            'must be a MAPS model structure.'];
    case 'BadInput2'
        msg = ['2nd input received by produce_shock_based_news_decomp '...
            'must be a MAPS data structure containing the base run data.'];
    case 'BadInput3'
        msg = ['3rd input received by produce_shock_based_news_decomp '...
            'must be a MAPS data structure containing the provisional '...
            'run data.'];
    case 'BadInput4'
        msg = ['4th input received by produce_shock_based_news_decomp '...
            'must be a two column cell string array containing the '...
            'mnemonics of raw observables in the first column, and '...
            'the difference type in the second (PD or YTYPCT).'];
    case 'BadModelClass'
        msg = ['Model provided to produce_shock_based_news_decomp was '...
            'invalid. It must be an LSS model with data transformation '...
            'equations. One of these conditions was violated.'];
    case 'BadDataNews'
        msg = ['The provisional run provided to produce_shock_based_'...
            'news_decomp does not contain any backdata news to be '...
            'decomposed.'];
    case 'BadProvJudgements'
        msg = ['The provisional run provided to produce_shock_based_'...
            'news_decomp includes judgements to shocks over the '...
            'forecast horizon. This function only handles changes to '...
            'the backdata, or time trends over the forecast.'];
    case 'InvalidDataTransforms'
        msg = ['The following transformation types (listed in '...
            'requested variable transformations) were not valid: '];
    case 'InvalidDataTransforms:Instance'
        msg = errArgs{1};
    case 'InvalidTransformMnems'
        msg = ['The following variable mnemonics (listed in requested '...
            'variable transformations) were not found in the model: '];
    case 'InvalidTransformMnems:Instance'
        msg = errArgs{1};        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PROJECT LSS MODEL VARIABLES
function msg = get_project_LSS_model_variables_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['project_LSS_model_variables was not passed the right ',...
            'number of inputs: it requires 5 inputs, but only ',...
            'received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PROJECT USING LSS MODEL
function msg = get_project_using_LSS_model_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['project_using_LSS_model was not passed the right ',...
            'number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to project_using_LSS_model must be ',...
            'a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to project_using_LSS_model must be a ',...
            'structure containing an existing forecast run dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% PROJECT USING NLBL MODEL
function msg = get_project_using_NLBL_model_error(errCode,errArgs)          %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['project_using_NLBL_model was not passed the right ',...
            'number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to project_using_NLBL_model must be ',...
            'a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to project_using_NLBL_model must be a ',...
            'structure containing an existing forecast run dataset'];
    case 'NLBLprojectionDatasetErrors'
        msg = ['The NLBL model forecast dataset ',...
            'contains one or more non-real and/or ',...
            'non-finite values - see details below.',...
            '\n\nThere are two common causes of this:',...
            '\n\n First, a variable may have blown up to ',...
            'infinity if its equation involves a division by zero.',...
            '\n\n Second, a variable could take on NaN,',...
            '-inf or complex (non-real) values if its equation ',...
            'involves taking the log of zero or a negative number.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% RANDOM WALK METROPOLIS HASTINGS DCT WRAPPER
function msg = get_random_walk_metropolis_hastings_dct_wrapper_error(...
    errCode,~)                                                              %#ok<DEFNU>
switch errCode
    case 'UnableToUnpackJobAndOrWorkerData'
        msg = ['random_walk_metropolis_hastings_dct_wrapper could not ',...
            'get the job data and/or the worker name. On attempting ',...
            'retrieve these objects and data, MATLAB returned the ',...
            'following error'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% RANDOM WALK METROPOLIS HASTINGS
function msg = get_random_walk_metropolis_hastings_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['random_walk_metropolis_hastings was not passed the ',...
            'right number of inputs: it requires 18 inputs, but only ',...
            'received ',errArgs{1}];
    case 'UnableToInitialise'
        msg = ['The random-walk metropolis-hastings algorithm could ',...
            'not initialise because the number of draws made exceeded ',...
            'the input maximum number of initialisation draws to make ',...
            errArgs{1},' and not one of them delivered a log ',...
            'posterior value that exceeded the penalty value imputed ',...
            'when either: a) the parameters fell outside of their ',...
            'prior bounds; b) the model would not solve; c) the ',...
            'Kalman filter returned a non-real, or non-finite likelihood'];
    case 'MaximumDrawsExceeded'
        msg = ['The random-walk metropolis-hastings algorithm could ',...
            'not continue because the number of draws made exceeded ',...
            'the input maximum number of draws to make ',errArgs{1},...
            ' and not one of them delivered a proposed parameter ',...
            'vector that was within the parameter bounds. The most ',...
            'likely cause of this is that the combination of the ',...
            'covariance matrix and scaling factor deliver draws that ',...
            'jump the parameters too far from the previous draw'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% READ FROM CSV
function msg = get_read_from_CSV_error(errCode,errArgs)                     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['read_from_CSV was not passed the right number of ',...
            'inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by read_from_CSV must be a ',...
            'string representing a .csv file to read from'];
    case 'FileOpenFailure'
        msg = ['It was not possible to open the .csv file. On ',...
            'attempting to open the file, MATLAB returned the ',...
            'following error message:'];
    case 'FileCloseFailure'
        msg = ['For some unknown reason, it was not possible to close ',...
            'the file after reading its content'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% REARRANGE EQUATION
function msg = get_rearrange_equation_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['rearrange_equation was not passed the right number of ',...
            'inputs: it requires 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by rearrange_equation must be a ',...
            'string representing an equation'];
    case 'BadInput2'
        msg = ['2nd input received by rearrange_equation must be a ',...
            'string representing a variable on which to normalise ',...
            'the equation'];
    case 'InvalidEquation'
        msg = ['The equation to rearrange ''',errArgs{1},''' is not ',...
            'a valid equation in MAPS - MAPS'' equation string ',...
            'checker returned the following error(s):'];
    case 'WrongVarToNormOn'
        msg = ['The equation to rearrange must contain one and ',...
            'only one instance of the variable to normalise on. The ',...
            'input equation ''',errArgs{1},''' contains ',errArgs{2},...
            ' instances of the variable to normalise on ''',...
            errArgs{3},''''];
    case 'BadEqRearrangement'
        msg = ['MAPS'' symbolic equation rearranger function failed - ',...
            'as part of the rearrangement algorithm, it was unable to ',...
            'rearrange ''',errArgs{1},''' to normalise on ''',...
            errArgs{2},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% REBUILD JOURNEY WITH ADDITIONAL JUDGEMENTS
function msg = get_rebuild_journey_with_additional_judgements_error...
    (errCode,errArgs)                                                       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['rebuild_journey_with_additional_judgements was not '...
            'passed the correct number of inputs: it requires 3 but '...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['The first input passed to rebuild_journey_with_'...
            'additional_judgements must be a MAPS model structure.'];
    case 'BadInput2'
        msg = ['The second input passed to rebuild_journey_with_'...
            'additional_judgements must be a MAPS run structure '...
            'for the run before the macro was launched.'];
    case 'BadInput3'
        msg = ['The third input passed to rebuild_journey_with_'...
            'additional_judgements must be a MAPS provisional run '...
            'structure for the run before the macro was launched.'];
    case 'ModelNotLSS'
        msg = ['The rebuild_journey_with_additional_judgement macro '...
            'can only be used with linear state space models'];
    case 'BadValidationOldJourney'
        msg = ['When validating the first run of the journey to be '...
            'rebuilt, MAPS returned the following error:'];
    case 'InconsistentJudgementsSize'
        msg = ['The number of runs to rebuild, as specified in the '...
            'exported mat file, does not match the number of runs to '...
            'apply additional judgements to, as specified in the CSV '...
            'file.'];
    case 'InconsistentRunNumbers'
        msg = ['The run numbers in the CSV file containing additional '...
            'judgements to apply to runs did not match the run numbers '...
            'in the journey to rebuild which has been exported '...
            'from EASE.'];
    case 'InconsistentForecastHorizons'
        msg = ['The forecast horizon in the journey to rebuild must be '...
            'equal to the forecast horizon in the journey in which it '...
            'is being rebuilt. The horizon of the former is ',...
            errArgs{2},' quarters, but the horizon of the latter is ',...
            errArgs{1},' quarters.'];
    case 'BadAdditionalJudgementHorizon'
        msg = ['The horizon over which additional judgements are being '...
            'made cannot exceed the horizon of the journey being '...
            'rebuilt. The maximum horizon of the former is ',errArgs{2},...
            ' quarters, but the horizon of the latter is ',errArgs{1},...
            ' quarters.'];
    case 'TooManyRuns'
        msg = ['A maximum of 100 runs can be rebuilt by the rebuild_'...
            'journey macro at one time, to avoid EASE timeouts.'];
    case 'InconsistentJudgementHorizon'
        msg = ['The horizon over which additional judgements are '...
            'specified is longer than the horizon of the forecast '...
            'journey. The judgement horizon was ',errArgs{1},' quarters'...
            ' but the horizon of the forecast was ',errArgs{2},...
            ' quarters.'];
    case 'ErrorOnRunExecution'
        msg = ['The rebuild_journey_with_additional_judgements macro '...
            'failed on trying to apply additional judgements to run '...
            errArgs{1},' of the journey being rebuilt. The MAPS '...
            'exception returned was: '];
    case 'BadJudgementsCell'
        msg = ['The additional judgements found in the CSV file were '...
            'invalid. They must contain a minimum of 6 columns: 1) run '...
            'number, 2) variable type, 3) fix type (e.g. Anticipated), '...
            '4) the variable to fix, 5) shocks used to apply fix, 6 '...
            'onwards) the value of the fix.'];
    case {'RunNumbersNotNumeric','UnableToConvertRunNumbersToMatrix'}
        msg = ['The run numbers contained in the first column of the '...
            'additional judgements CSV file were not all numeric. This '...
            'column must only contain the numbers of the runs in which '...
            'to apply the additional fixes.'];
    case {'FixValuesNotNumeric','UnableToConvertFixValsToMatrix'}
        msg = ['The values for the fixes to apply contained in '...
            'sixth columns (and beyond) of the additional judgements '...
            'CSV file were not all numeric. These columns must contain '...
            'only the values to fix the variables to.'];
    case 'NaNsInAdditionalFixes'
        msg = ['All the additional fixes specified in rebuild_journey_'...
            'with_additional_judgements must be of the same length, '...
            'starting from the beginning of the forecast horizon and '...
            'with no gaps (although they may be shorter than the '...
            'forecast horizon). These rules were violated in the CSV '...
            'provided.'];
    case 'FixesNotUnique'
        msg = ['The CSV file specifying additional judgements for the '...
            'rebuild_journey_with_additional_judgements macro '...
            'contained more than one fix to the same variable for run '...
            errArgs{1}];
    case 'InvalidVarTypes'
        msg = ['The CSV file specifying additional judgements for the '...
            'rebuild_journey_with_additional_judgements macro '...
            'contained a request for a fix to an invalid variable type '...
            'for run ', errArgs{1},'. Valid variable types are '...
            'rawObservables, modelObservables and modelVariables.'];
    case 'InvalidFixType'
        msg = ['The CSV file specifying additional judgements for the '...
            'rebuild_journey_with_additional_judgements macro '...
            'contained an invalid fix type in its third column for run '...
            errArgs{1},'. Valid fix types are Anticipated and '...
            'Unanticipated.'];
    case 'VarTypeNotInModel'
        msg = ['The CSV file specifying additional judgements for the '...
            'rebuild_journey_with_additional_judgements macro contained'...
            ' a request for a fix to a ',errArgs{1},' but this model '...
            'part could not be found in the model provided.'];
    case 'InvalidFixMnems'
        msg = ['The fourth column of the CSV file specifying additional '...
            'judgements for the rebuild_journey_with_additional_'...
            'judgements macro to apply to run ',errArgs{1},' contained '...
            'the following requests for fixes to variables which could '...
            'not be not found in the model for the variable type '...
            'specified in the second column:'];
    case 'InvalidFixMnems:Instance'
        msg = errArgs{1};
    case 'InvalidShocksAcrossRows'
        msg = ['Where the additional judgements CSV file contains more '...
            'than one additional judgement for a run, the fifth column '...
            'must contain the same shock mnemonics in all the rows '...
            'corresponding to that run. This was not the case for run '...
            errArgs{1}];
    case 'InvalidShockStrs'
        msg = ['The fifth column of the CSV file specifying additional '...
            'judgements to apply should only contain the mnemonics of '...
            'the shocks with which to apply the additional judgements.'];
    case 'NoShockSuffix'
        msg = ['The fifth column of the CSV file specifying shocks to '...
            'use when applying additional judgements to run ',errArgs{1}...
            ',contains instances where shocks do not have a suffix '...
            'indicating whether it should be anticipated (_a), or '...
            'unanticipated (_u).'];
    case 'BadAnticipatedType'
        msg = ['The shock specified in the additonal judgements CSV '...
            'file for run ',errArgs{1},' had an invalid suffix. Valid '...
            'suffixes are _a (for anticipated), and _u (for '...
            'unanticipated).'];
    case 'InvalidShockMnem'
        msg = ['The fifth column of the CSV file containing '...
            'additional judgements to apply to run ',errArgs{1},...
            ' contained the following instances of shocks which could '...
            'not be found in the model.'];
    case 'InvalidShockMnem:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);        
end
end

%% RECONSTRUCT EQUATION
function msg = get_reconstruct_equation_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['reconstruct_equation was not passed the right number ',...
            'of inputs: it requires 2 or 3 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by reconstruct_equation must be a ',...
            'row cell string array of equation terms'];
    case 'BadInput2'
        msg = ['2nd input received by reconstruct_equation must be a ',...
            'row cell string array of equation delimiters'];
    case 'InconsistentTermsDelimsSizes'
        msg = ['The row cell string array of equation delimiters ',...
            'passed in as 2nd input must have 1 fewer elements than ',...
            'the row cell string array of terms passed in as 1st input'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by reconstruct_equation ',...
            'must be a row cell string array of time subscripts ',...
            'associated with each of the terms'];
    case 'InconsistentTermsTimeSubsSizes'
        msg = ['The row cell string array of time subscripts passed ',...
            'in as 3rd input must have the same number of elements as ',...
            'the row cell string array of terms passed in as 1st input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% REORDER EQUATIONS
function msg = get_reorder_equations_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['reorder_equations was not passed the right number ',...
            'of inputs: it requires 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to reorder_equations must be a ',...
            'column cell array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to reorder_equations must be a ',...
            'column cell string array of mnemonics to compute the ',...
            'incidence matrix for'];
    case 'BadEqSpec'
        msg = ['In order to reorder a set of equations, this function ',...
            'requires that the endogenous variables to reorder by be ',...
            'uniquely identified on the LHS of the equations. MAPS'' ',...
            'index lookup function returned the following error'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% REORDERING OPERATOR
function msg = get_reordering_operator_error(errCode,errArgs)               %#ok<INUSD,DEFNU>
switch errCode
    case 'InfeasibleInversion'
        msg = 'The selected inversion(s) is(are) not feasible';
    case 'ValidityOutput'
        msg = 'The Reordering Operators are not properly defined';
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% REPLACE TIME SUBSCRIPTS IN EQUATIONS
function msg = get_replace_time_subscripts_in_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['replace_time_subscripts_in_equations was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'replace_time_subscripts_in_equations must be a column ',...
            'cell array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% REPORT BUILDER
function msg = get_ReportBuilder_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The ReportBuilder constructor method was not passed the '...
            'right number of inputs: it requires at least 3 inputs, but '...
            'received ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['The first input provided to the ReportBuilder constructor '...
            'method must be a string, representing the report title.'];
    case 'BadConstructInput2'
        msg = ['The second input provided to the ReportBuilder constructor '...
            'method must be a string, representing the path to write the '...
            'report to.'];
    case 'BadConstructInput3'
        msg = ['The third input provided to the ReportBuilder '...
            'constructor method must be a string, representing the '...
            'stylesheet for the report.'];
    case 'BadConstructInput4'
        msg = ['The fourth (optional) input provided to the ReportBuilder '...
            'constructor method must be a string, representing the report '...
            'format. The options are pdf-fop and doc-rtf.'];
    case 'BadStyleSheet'
        msg = ['The third input provided to ReportBuilder is not a valid'...
            ' stylesheet name. See the valid stylesheets config for '...
            'supported stylesheets.'];
    case 'BadAddInputClass'
        msg = ['The input provided to the AddComponent method in '...
            'ReportBuilder must be of the ReportComponent class.'];
    otherwise
        throw_missing_error_code_error(errCode);        
end
end

%% REPORT TITLE COMPONENT
function msg = get_ReportTitleComponent_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The ReportTitleComponent constructor method was not '...
            'passed the right number of inputs: it requires at least 1 '...
            'input, but received ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['The first input provided to the ReportTitleComponent '...
            'constructor method must be a string, representing the report '...
            'title.'];
    case 'BadConstructInput2'
        msg = ['The (optional) second input provided to the '...
            'ReportTitleComponent constructor method must be a string, '...
            'representing the report abstract.'];
    case 'BadConstructInput3'
        msg = ['The (optional) third input provided to the '...
            'ReportTitleComponent constructor method must be a string, '...
            'representing the author of the report.'];
    case 'AddToBadNargin'
        msg = ['The AddTo method in ReportTitleComponent requires one '...
            'input (beyond the object ReportTitle object itself). It only '...
            'received ',errArgs{1}];
    case 'AddToBadInput1'
        msg = ['The first input provided to the AddTo method in '...
            'ReportTitleComponent must be of the ReportBuilder class.'];
    otherwise
        throw_missing_error_code_error(errCode);        
end
end

%% RUN DISTRIBUTED COMPUTING JOB
function msg = get_run_distributed_computing_job_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['run_distributed_computing_job was not passed the ',...
            'right number of inputs: it requires 5 or 6 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to run_distributed_computing_job ',...
            'must be a string naming the function to be executed ',...
            'by each task in the job'];
    case 'BadInput2'
        msg = ['2nd input passed to run_distributed_computing_job ',...
            'must be either a row cell array of strings naming .m ',...
            'files (functions) to be passed to the workers for the ',...
            'execution of the tasks or an empty cell if the workers ',...
            'do not require any files for the execution of the tasks ',...
            '(eg if you are providing paths rather than files)'];
    case 'BadInput3'
        msg = ['3rd input passed to run_distributed_computing_job ',...
            'must be either a row cell array of strings naming ',...
            'folders/paths to be passed to the workers for the ',...
            'execution of the tasks or an empty cell if the workers ',...
            'do not need access to code for the execution of the ',...
            'tasks (eg if you are providing files rather than paths)'];
    case 'BadInput4'
        msg = ['4th input passed to run_distributed_computing_job ',...
            'must be either a row cell array of data required for the ',...
            'execution of the tasks (i.e. input data that does not ',...
            'vary by task) or an empty cell if no such data is required'];
    case 'BadInput5'
        msg = ['5th input passed to run_distributed_computing_job ',...
            'must be a row cell array (with number of elements equal ',...
            'the number of tasks to be executed) containing row cell ',...
            'arrays of input data required for execution of each task ',...
            '(with number of elements equal the number of inputs - ',...
            'i.e. input data that varies by task'];
    case 'BadInput6'
        msg = ['Optional 6th input passed to ',...
            'run_distributed_computing_job must be a logical (true/',...
            'false) scalar describing whether or not to throw an ',...
            'exception if a subset of the tasks executed return an error'];
    case 'BadInput7'
        msg = ['Optional 7th input passed to ',...
            'run_distributed_computing_job must be a logical (true/',...
            'false) scalar describing whether or not to destroy the ',...
            'job on completion'];    
    case 'BadInput8'
        msg = ['Optional 8th input passed to ',...
            'run_distributed_computing_job must be a structure of ',...
            'user-defined job options (eg number of workers to use)'];   
    case 'BadInput9'
        msg = ['Optional 9th input passed to ',...
            'run_distributed_computing_job must be a MATLAB ',...
            'distributed computing job object of the ',...
            '''parallel.cluster.MJS'' class'];         
    case 'FailedTasks'
        msg = ['The following workers returned the following errors ',...
            'on attempted execution of the tasks. If only a subset of ',...
            'the tasks failed and you would not like an exception ',...
            'to be thrown at this point, then please set the optional ',...
            'error flag input to this function accordingly'];
    case 'FailedTasks:Instance'
        msg = ['Worker ',errArgs{1},' returned: ',errArgs{2}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% RUN BAYESIAN ESTIMATION
function msg = get_run_bayesian_estimation_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['run_bayesian_estimation was not passed the right ',...
            'number of inputs: it requires at least 6 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by run_bayesian_estimation must be ',...
            'a MAPS LSS model structure'];
    case 'BadInput2'
        msg = ['2nd input received by run_bayesian_estimation must be ',...
            'a string representing a MAPS estimation info file'];        
    case 'BadInput3'
        msg = ['3rd input received by run_bayesian_estimation must be ',...
            'a finite real two-dimensional matrix of model observable ',...
            'data'];
    case 'BadInput4'
        msg = ['4th input received by run_bayesian_estimation must be ',...
            'row vector of numeric dates for the model observable ',...
            'data of the same dimension as the observable dataset'];        
    case 'BadInput5'
        msg = ['5th input received by run_bayesian_estimation must be ',...
            'a logical indicator describing whether to run a ',...
            'posterior optimisation or not'];
    case 'BadInput6'
        msg = ['6th input received by run_bayesian_estimation must be ',...
            'a logical indicator describing whether to run a ',...
            'posterior simulation or not'];
    case 'BadInput7'
        msg = ['Optional 7th input received by ',...
            'run_bayesian_estimation must be a logical indicator ',...
            'describing whether or not to save intermediate outputs'];
    case 'BadInput8'
        msg = ['Optional 8th input received by ',...
            'run_bayesian_estimation must be a logical indicator ',...
            'describing whether or not to save the final outputs'];        
    case 'BadInput9'
        msg = ['Optional 9th input received by ',...
            'run_bayesian_estimation must be a string representing ',...
            'the name of a mat file to save estimation outputs to'];
    case 'BadInput10'
        msg = ['Optional 10th input received by ',...
            'run_bayesian_estimation must be a logical indicator ',...
            'describing whether or not to generate an estimation ',...
            'results report'];         
     case 'BadInput11'
        msg = ['Optional 11th input received by ',...
            'run_bayesian_estimation must be a string representing ',...
            'the name of a pdf file to save the estimation results ',...
            'report'];  
    case 'MissingOutputFileName'
        msg = ['At least one of the indicators describing whether or ',...
            'not to save intermediate and final outputs is set to ',...
            'true, so you must provide a .mat file name for the output'];
    case 'MissingReportFileName'
        msg = ['The indicator describing whether or not to generate ',...
            'an estimation results report is set to true, so you must ',...
            'provide a .pdf file name for the report'];        
    case 'InvalidInstructions'
        msg = ['The content of the estimation info file is ',...
            'incompatible with the input estimation instructions for ',...
            'the following reasons:'];
    case 'InvalidInstructions:Optimisation'
        msg = ['It is not possible to run a posterior optimisation ',...
            'because no optimisation input information was provided ',...
            'in the estimation info file'];
    case 'InvalidInstructions:Simulation'
        msg = ['It is not possible to run a posterior simulation ',...
            'because no simulation input information was provided ',...
            'in the estimation info file'];    
    case 'BadCalibratedParams'
        msg = ['MAPS cannot proceed with the estimation because the ',...
            'model could not be updated with the calibrated parameter ',...
            'values from the estimation info file. MAPS'' update ',...
            'parameters and resolve model function returned the ',...
            'following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end     

%% RUN BAYESIAN ESTIMATION SUPER MACRO
function msg = get_run_bayesian_estimation_super_macro_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['run_bayesian_estimation_super_macro was not passed ',...
            'the right number of inputs: it requires at least 7 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'run_bayesian_estimation_super_macro must be a MAPS LSS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'run_bayesian_estimation_super_macro must be a string ',...
            'representing a MAPS estimation info file'];        
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'run_bayesian_estimation_super_macro must be a string ',...
            'representing the name of an excel spreadsheet ',...
            'containing the observable data'];
    case 'BadInput4'
        msg = ['4th input received by ',...
            'run_bayesian_estimation_super_macro must be a string ',...
            'representing the name of a sheet in the excel ',...
            'spreadsheet containing the observable data'];        
    case 'BadInput5'
        msg = ['5th input received by ',...
            'run_bayesian_estimation_super_macro must be a logical ',...
            'true/false indicator describing whether or model ',...
            'observable data should be loaded directly or whether raw ',...
            'observable / time-varying trend data (if applicable) ',...
            'should be loaded and then transformed to model ',...
            'observable space'];
    case 'BadInput6'
        msg = ['6th input received by ',...
            'run_bayesian_estimation_super_macro must be a logical ',...
            'indicator describing whether to run a posterior ',...
            'optimisation or not'];
    case 'BadInput7'
        msg = ['7th input received by ',...
            'run_bayesian_estimation_super_macro must be a logical ',...
            'indicator describing whether to run a posterior ',...
            'simulation or not'];               
    otherwise
        throw_missing_error_code_error(errCode);
end
end     

%% RUN POSTERIOR SIMULATION USING EXISTING OUTPUT
function msg = get_run_posterior_simulation_using_existing_output_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['run_posterior_simulation_using_existing_output was ',...
            'not passed the right number of inputs: it requires at ',...
            'least 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'run_posterior_simulation_using_existing_output must be ',...
            'an existing estimation output structure'];
    case 'BadInput2'
        msg = ['Optional 2nd input received by ',...
            'run_posterior_simulation_using_existing_output must be a ',...
            'logical indicator describing whether or not to save the ',...
            'outputs to .mat file'];        
    case 'BadInput3'
        msg = ['Optional 3rd input received by ',...
            'run_posterior_simulation_using_existing_output must be a ',...
            'string representing the name of a mat file to save ',...
            'estimation outputs to'];
    case 'BadInput4'
        msg = ['Optional 4th input received by ',...
            'run_posterior_simulation_using_existing_output must be a ',...
            'logical indicator describing whether or not to generate ',...
            'an estimation results report'];         
     case 'BadInput5'
        msg = ['Optional 5th input received by ',...
            'run_posterior_simulation_using_existing_output must be a ',...
            'string representing the name of a pdf file to save the ',...
            'estimation results report'];   
     case 'BadInput6'
        msg = ['Optional 6th input received by ',...
            'run_posterior_simulation_using_existing_output must be a ',...
            'structure comntaining options for the simulation'];         
    case 'MissingOutputFileName'
        msg = ['The indicator describing whether or not to save ',...
            'outputs to .mat is set to true, so you must provide a ',...
            '.mat file name for the output'];
    case 'MissingReportFileName'
        msg = ['The indicator describing whether or not to generate ',...
            'an estimation results report is set to true, so you must ',...
            'provide a .pdf file name for the report'];        
    case 'BadEstimationOutputStruct'
        msg = ['MAPS cannot proceed with the posterior simulation ',...
            'because it was not possible to unpack at least one of ',...
            'the required fields in the estimation output structure ',...
            'passed into this function. MAPS encountered the ',...
            'following error:'];
    case 'MissingSimulationInputInfo'
        msg = ['MAPS cannot proceed with the posterior simulation ',...
            'because no information about the posterior simulation ',...
            'inputs (the parameter initialisation and covariance ',...
            'matrix) was provided. If that information is not part of ',...
            'the estimation outputs input (because it did not form ',...
            'part of the original estimation info file), then you ',...
            'must pass in a set of simulation inputs and options as ',...
            'input to this function.'];   
    case 'CannotAlterLikelihoodTraining'
        msg = ['It is not possible to alter the option dictating the ',...
            'number of periods to use in the training sample for ',...
            'computation of the likelihood in the Kalman filter ',...
            'because that would decouple the results of the ',...
            'simulation from the results of the pre-existing ',...
            'posterior optimisation invalidating the logic of this ',...
            'macro'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end 

%% SAMPLE FROM POSTERIOR AND COMPUTE FIX RESPONSES
function msg = ...
    get_sample_from_posterior_and_compute_fix_responses_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['sample_from_posterior_and_compute_fix_responses was ',...
            'not passed the right number of inputs: it requires 7, 8 ',...
            'or 9 inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SAMPLE FROM POSTERIOR AND COMPUTE IMPULSE RESPONSES
function msg = ...
    get_sample_from_posterior_and_compute_impulse_responses_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['sample_from_posterior_and_compute_impulse_responses ',...
            'was not passed the right number of inputs: it requires ',...
            '7, 8 or 9 inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SAMPLE FROM POSTERIOR AND COMPUTE SMOOTHED STATE VARIABLES
function msg = ...
    get_sample_from_posterior_and_compute_smoothed_states_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
    msg = ['sample_from_posterior_and_compute_smoothed_states was not '...
        'passed the right number of inputs: it requires 5, 6 or 7 ',...
        'inputs but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end    

%% SAMPLE FROM PRIORS AND COMPUTE FIX RESPONSES
function msg = get_sample_from_priors_and_compute_fix_responses_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['sample_from_priors_and_compute_fix_responses was ',...
            'not passed the right number of inputs: it requires 6, 7 ',...
            'or 8 inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SAMPLE FROM PRIORS AND COMPUTE IMPULSE RESPONSES
function msg = ...
    get_sample_from_priors_and_compute_impulse_responses_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['sample_from_priors_and_compute_impulse_responses ',...
            'was not passed the right number of inputs: it requires ',...
            '6, 7 or 8 inputs, but received ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SAMPLE PARAMETERS FROM POSTERIOR
function msg = get_sample_parameters_from_posterior_error(errCode,errArgs)  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['sample_parameters_from_posterior was not passed the ',...
            'right number of inputs: it requires 4 or 5 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'sample_parameters_from_posterior must be a MAPS LSS ',...
            'model structure'];        
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'sample_parameters_from_posterior must be a finite, real ',...
            'two- or three-dimensional matrix of parameters from a ',...
            'posterior simulation (where the 2nd dimension measures ',...
            'number of draws in each chain and the third dimension ',...
            'number of chains (which can equal 1)'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'sample_parameters_from_posterior must be either a column ',...
            'cell string array of mnemonics or a vector of positive ',...
            'integer index numbers identifying the sub-set of ',...
            'parameters that were estimated (as opposed to those ',...
            'calibrated)']; 
    case 'BadInput4'
        msg = ['4th input received by ',...
            'sample_parameters_from_posterior must be a positive, ',...
            'real integer for the number of draws to make in the ',...
            'posterior sample'];
    case 'BadInput5'
        msg = ['Optional 5th input received by ',...
            'sample_parameters_from_posterior must be a string ',...
            'mnemonic or vector cell string array of mnemonics for ',...
            'parameters that were estimated but which are to be held ',...
            'fixed in the draws (at the values in the model structure ',...
            'input) (it can be an empty string)']; 
    case 'BadInput6'
        msg = ['Optional 6th input received by ',...
            'sample_parameters_from_posterior must be a logical ',...
            'scalar dictating whether the seed for the random number ',...
            'generator should be reset or not'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end    

%% SAMPLE PARAMETERS FROM PRIORS
function msg = get_sample_parameters_from_priors_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['sample_parameters_from_priors was not passed the ',...
            'right number of inputs: it requires 3 or 4 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by sample_parameters_from_priors ',...
            'must be a MAPS LSS model structure'];        
    case 'BadInput2'
        msg = ['2nd input received by sample_parameters_from_priors ',...
            'must be a structure (consistent with the MAPS Bayesian ',...
            'estimation toolkit) of priors information'];
    case 'BadInput3'
        msg = ['3rd input received by sample_parameters_from_priors ',...
            'must be a positive, real integer for the number of draws ',...
            'to make from the priors']; 
    case 'BadInput4'
        msg = ['Optional 4th input received by ',...
            'sample_parameters_from_priors must be a string ',...
            'mnemonic or vector cell string array of mnemonics for ',...
            'parameters that were estimated but which are to be held ',...
            'fixed in the draws (at the values in the model structure ',...
            'input) (it can be an empty string)']; 
    case 'BadInput5'
        msg = ['Optional 5th input received by ',...
            'sample_parameters_from_priors must be a logical ',...
            'scalar dictating whether the seed for the random number ',...
            'generator should be reset or not'];          
    case 'BadPriorsStruct'
        msg = ['The priors structure passed in as 2nd input does not ',...
            'have the expeected content: one or more of the expected ',...
            'fields could not be found in the structure. On ',...
            'attempting to unpack the required fields, MATLAB ',...
            'returned the following error:'];   
    case 'MaxDrawsExceeded'
        msg = ['MAPS was unable to sample from all of the priors ',...
            'because the maximum number of draws of ',errArgs{1},...
            ' was exceeded in attempting to find draws for ',...
            errArgs{2},' from the ',errArgs{3},' distribution that ',...
            'fall inside the bounds supplied'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SAVE CONTENT OF STRUCTURE TO MAT FILE
function msg = get_save_content_of_structure_to_mat_file_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['save_content_of_structure_to_mat_file was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'save_content_of_structure_to_mat_file must be a string ',...
            'representing the .mat file name'];        
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'save_content_of_structure_to_mat_file must be a ',...
            'structure whose contents to save out'];
    case 'BadFileName'
        msg = ['MAPS cannot save the contents of the structure to mat ',...
            'file because the file name input ''',errArgs{1},''' is ',...
            'not a valid file name - MAPS'' file name checker ',...
            'returned the following exception:'];
    case 'UnableToSaveStruct'
        msg = ['MAPS cannot save the contents of the structure to the ',...
            'mat file name ''',errArgs{1},''' because the MATLAB ',...
            '''save'' function returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SCAN MAPS TEXT FILE
function msg = get_scan_MAPS_text_file_error(errCode,errArgs)               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['scan_MAPS_text_file was not passed the right number ',...
            'of inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by scan_MAPS_text_file must be a ',...
            'string representing a .maps file to scan in'];
    case 'MissingFileNameAppendage'
        msg = 'File name passed in must have a ''.maps'' appendage';
    case 'UnknownFile'
        msg = ['The file corresponding to the file name passed in ',...
            'could not be found on the current MATLAB search path'];
    case 'FileOpenFailure'
        msg = ['It was not possible to open the .maps file. On ',...
            'attempting to open the file, MATLAB returned the ',...
            'following error message:'];
    case 'FileCloseFailure'
        msg = ['For some unknown reason, it was not possible to close ',...
            'the file after reading its content'];
    case 'EmptyScannedContent'
        msg = ['The scanned content of the .maps file appears as ',...
            'empty in MAPS. Please check the content and the format ',...
            'of the file against the requirements of the MATLAB ',...
            '''textscan'' function'];
    case 'UnexpectedScannedContent'
        msg = ['The scanned content of the .maps file does not appear ',...
            'as a column cell array in MAPS as expected. Please check ',...
            'the content and the format of the file against the ',...
            'requirements of the MATLAB ''textscan'' function'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SECTION COMPONENT
function msg = get_SectionComponent_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The constructor method for SectionComponent requires '...
            'two inputs: it was only passed ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['The first input passed to the SectionComponent constructor '...
            'method must be a string representing the section heading.'];
    case 'BadConstructInput2'
        msg = ['The second input passed to the SectionComponent constructor '...
            'method must be a column cell array containing only '...
            'ReportComponent objects.'];
    case 'BadReportComp'
        msg = ['One or more of the report components provided in the '...
            'second input to the SectionComponent constructor method were '...
            'not valid ReportComponent objects.'];
    case 'AddToBadNargin'
        msg = ['The AddTo method of SectionComponent requires one input '...
            '(in addition to the SectionComponent object) but received ',...
            errArgs{1}];
    case 'AddToBadInput1'
        msg = ['The first input (excluding the SectionComponent object '...
            'itself) passed to the AddTo method of SectionComponent must '...
            'be the ReportBuilder object which the SectionComponent is '...
            'being added to.'];
    otherwise
        throw_missing_error_code_error(errCode);        
end
end

%% SELECT ITEM FROM POPUP COMBO
function msg = get_select_item_from_popup_combo_error(errCode,errArgs)               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['select_item_from_popup_combo was not passed the right ',...
            'number of inputs: it requires 2 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by select_item_from_popup_combo',...
            ' must be a string to display as a message in the popup'...
            ' window.'];
    case 'BadInput2'
        msg = ['2nd input received by select_item_from_popup_combo',...
            ' must be a single column cell array containing strings'...
            ' to be displayed in a dropdown, from which the user needs'...
            ' to choose one.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SEND EMAIL
function msg = get_send_email_error(errCode,errArgs)                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['send_email was not passed the right number of inputs: ',...
            'it requires at least 2 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to send_email must be an email ',...
            'address string'];
    case 'BadInput2'
        msg = ['2nd input passed to send_email must be a string to ',...
            'print to the body of the email']; 
    case 'BadInput3'
        msg = ['Optional 3rd input passed to send_email must be a ',...
            'string to print to the subject of the email']; 
    case 'BadInput4'
        msg = ['Optional 4th input passed to send_email must be a ',...
            'string or vector cell string array of file names for ',...
            'files to attach to the email']; 
    case 'EmailSendFailure'
        msg = ['MAPS was unable to send the email. On attempting to ',...
            'do so, MATLAB returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SETUP AND RUN FIX RESPONSE MDE
function msg = get_setup_and_run_fix_response_MDE_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['setup_and_run_fix_response_MDE was not passed the ',...
            'right number of inputs: it requires 4 or 5 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'setup_and_run_fix_response_MDE must be a MAPS LSS model ',...
            'structure'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'setup_and_run_fix_response_MDE must be a structure ',....
            'containing information (mnemonics, lower and upper ',...
            'bounds) about the parameters to be estimated in the MDE'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'setup_and_run_fix_response_MDE must be a structure ',....
            'containing information about the Excel file and sheets ',...
            'in which to find the fix instructions, target responses ',...
            'and weights'];      
    case 'BadInput4'
        msg = ['4th input received by ',...
            'setup_and_run_fix_response_MDE must be a structure ',...
            'containing instructions for the retrieval of the ',...
            'initialialisation of the parameters in the estimation'];
    case 'BadInput5'
        msg = ['Optional 5th input received by ',...
            'setup_and_run_fix_response_MDE must be a structure ',...
            'of options for the MDE']; 
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SETUP AND RUN IMPULSE RESPONSE MDE
function msg = get_setup_and_run_impulse_response_MDE_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['setup_and_run_impulse_response_MDE was not passed the ',...
            'right number of inputs: it requires 5 or 6 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'setup_and_run_impulse_response_MDE must be a MAPS LSS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'setup_and_run_impulse_response_MDE must be a structure ',....
            'containing information (mnemonics, lower and upper ',...
            'bounds) about the parameters to be estimated in the MDE'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'setup_and_run_impulse_response_MDE must be a structure ',....
            'containing information about the Excel file and sheets ',...
            'in which to find the target responses and weights'];      
    case 'BadInput4'
        msg = ['4th input received by ',...
            'setup_and_run_impulse_response_MDE must be a structure ',...
            'containing instructions for the retrieval of the ',...
            'initialialisation of the parameters in the estimation'];
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'setup_and_run_impulse_response_MDE must be a numeric ',...
            'integer set equal 0 if unanticipated impulse responses ',...
            'are required and greater than zero (representing the ',...
            'period in which the anticipated shock occurs) if ',...
            'anticipated impulse responses are required'];        
    case 'BadInput6'
        msg = ['Optional 6th input received by ',...
            'setup_and_run_impulse_response_MDE must be a structure ',...
            'of options for the MDE']; 
    case 'BadlyFormattedResponseIdentifiers'
        msg = ['The headers on the targets and weights in the Excel ',...
            'file must be formatted as either ''varMnem|shockMnem'' ',...
            'or ''varMnem,shockMnem'' eg (''c|etac'') to idenify the ',...
            'variable and shock pairs for the impulse response ',...
            'targets. The following headers in the Excel file you ',...
            'provided are formatted incorrectly:'];
    case 'BadlyFormattedResponseIdentifiers:Instance'
        msg = errArgs{1};
    case 'UnknownVarMnemonic'
        msg = ['The following variable mnemonics supplied as the 1st ',...
            'part in the variable-shock header pairs associated with ',...
            'the targets and weights in the Excel file you provided ',...
            'do not exist among the model variables and, if ',...
            'applicable model observables in the model you are using:'];
    case 'UnknownVarMnemonic:Instance'
        msg = errArgs{1};
    case 'UnknowShockMnemonic'
        msg = ['The following shock mnemonics supplied as the 2nd ',...
            'part in the variable-shock header pairs associated with ',...
            'the targets and weights in the Excel file you provided ',...
            'do not exist among the shocks in the model you are using:'];
    case 'UnknowShockMnemonic:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SETUP AND RUN POSTERIOR OPTIMISATION
function msg = get_setup_and_run_posterior_optimisation_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['setup_and_run_posterior_optimisation was not passed ',...
            'the right number of inputs: it requires 5 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'setup_and_run_posterior_optimisation must be a structure ',...
            'of estimatiuon results to add posterior optimisation ',...
            'results to'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'setup_and_run_posterior_optimisation must be a MAPS LSS ',...
            'model structure'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'setup_and_run_posterior_optimisation must be a structure ',...
            'of information about the estimation priors'];        
    case 'BadInput4'
        msg = ['4th input received by ',...
            'setup_and_run_posterior_optimisation must be a finite ',...
            'numeric two-dimensional matrix of model observable data ',...
            'for the posterior optimisation'];
    case 'BadInput5'
        msg = ['5th input received by ',...
            'setup_and_run_posterior_optimisation must be a structure ',...
            'of posterior optimisation inputs and options (optional)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SETUP AND RUN POSTERIOR SIMULATION
function msg = get_setup_and_run_posterior_simulation_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['setup_and_run_posterior_simulation was not passed ',...
            'the right number of inputs: it requires 5 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by ',...
            'setup_and_run_posterior_simulation must be a structure ',...
            'of estimatiuon results to add posterior simulation ',...
            'results to'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'setup_and_run_posterior_simulation must be a MAPS LSS ',...
            'model structure'];
    case 'BadInput3'
        msg = ['3rd input received by ',...
            'setup_and_run_posterior_simulation must be a structure ',...
            'of information about the estimation priors'];          
    case 'BadInput4'
        msg = ['4th input received by ',...
            'setup_and_run_posterior_simulation must be a finite ',...
            'numeric two-dimensional matrix of model observable data ',...
            'for the posterior simulation'];
    case 'BadInput5'
        msg = ['5th input received by ',...
            'setup_and_run_posterior_simulation must be a structure ',...
            'of posterior simulation inputs and options (optional)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SHOCK BASED DECOMPOSITION
function msg = get_shock_based_decomposition_error(errCode,errArgs)         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['shock_based_decomposition was not passed the right ',...
            'number of inputs: it requires 4 inputs but received '...
            ,errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to shock_based_decomposition must ',...
            'be a MAPS model structure with the field .Constructor'];
    case 'BadInput2'
        msg = ['2nd input passed to shock_based_decomposition must ',...
            'contain finite numeric entries.'];
    case 'BadInput3'
        msg = ['3rd input passed to shock_based_decomposition must ',...
            'contain finite numeric entries.'];
    case 'BadInput4'
        msg = ['4th input passed to shock_based_decomposition must ',...
            'be a structure'];
    case 'BadShockFields'
        msg = ['The structure ''Shocks'' must contain the fields '...
            '.anticipated and/or .unanticipated'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SHOW PROGRESS
function msg = get_show_progress_error(errCode,errArgs)               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['show_progress was not passed the right ',...
            'number of inputs: it requires at least 3 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by show_progress',...
            ' must be a positive scalar indicating the duration of one'...
            ' scroll loop within the popup window. (This should be'...
            ' the approximate time that actionHandle will take to'...
            ' complete execution).'];
    case 'BadInput2'
        msg = ['2nd input received by show_progress',...
            ' must be a string to display as a message to the user'...
            ' while actionHandle is being invoked.'];
    case 'BadInput3'
        msg = ['3rd input received by show_progress',...
            ' must be a function handle to invoke while the progress'...
            ' indicator is displayed.'];
    case 'InsufficientInputArgsToActionHandle'
        msg = ['4th and subsequent input arguments to show_progress'...
            ' must correspond to the inputs required by actionHandle'...
            ' The handle requires ' errArgs{1} ' inputs, but you'...
            ' provided ' errArgs{2} '.'];
    case 'InsufficientOutputArgsFromActionHandle'
        msg = ['The outputs from show_progress will be the outputs from'...
            ' actionHandle. That function returns ' errArgs{1}...
            ' outputs, but you have requested ' errArgs{2} '.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SIMULATE POSTERIOR
function msg = get_simulate_posterior_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['simulate_posterior was not passed the right number of ',...
            'inputs: it requires 5 or 6 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by simulate_posterior must be a ',...
            'MAPS LSS model structure'];
    case 'BadInput2'
        msg = ['2nd input received by ',...
            'setup_and_run_posterior_optimisation must be a structure ',...
            'of information about the estimation priors'];        
    case 'BadInput3'
        msg = ['3rd input received by simulate_posterior must be a ',...
            'finite, real two-dimensional matrix of model observable ',...
            'data'];       
    case 'BadInput4'
        msg = ['4th input received by simulate_posterior must be a ',...
            'finite, real column vector of initial conditions for the ',...
            'vector of parameters being estimated'];
    case 'BadInput5'
        msg = ['5th input received by simulate_posterior must be a ',...
            'finite, real square covaraince matrix for the vector of ',...
            'parameters being estimated'];        
    case 'BadInput6'
        msg = ['Optional 6th input received by simulate_posterior ',...
            'must be a structure of optimisation options'];
    case 'BadModelClass'
        msg = 'The model input is not of the LSS class';
    case 'BadModelCharacteristic'
        msg = ['The LSS model input must have measurement equations ',...
            'to be valid for use in the MAPS Bayesian estimation toolkit'];   
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SIMULATE POSTERIOR USING RWMH
function msg = get_simulate_posterior_using_RWMH_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['simulate_posterior_using_RWMH was not passed the ',...
            'right number of inputs: it requires 6 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by simulate_posterior_using_RWMH ',...
            'must be a structure of information about the estimation ',...
            'priors'];      
    case 'BadInput2'
        msg = ['2nd input received by simulate_posterior_using_RWMH ',...
            'must be a  finite, real column vector of initial ',...
            'conditions for the vector of parameters being estimated'];
    case 'BadInput3'
        msg = ['3rd input received by simulate_posterior_using_RWMH ',...
            'must be a finite, real square covaraince matrix for the ',...
            'vector of parameters being estimated'];
    case 'BadInput4'
        msg = ['4th input received by simulate_posterior_using_RWMH ',...
            'must be a string posterior evaluation function name'];
    case 'BadInput5'
        msg = ['5th input received by simulate_posterior_using_RWMH ',...
            'must be a row cell array of (fixed) posterior evaluation ',...
            'function inputs'];    
    case 'BadInput6'
        msg = ['6th input received by simulate_posterior_using_RWMH',...
            'must be a structure of options for execution of the ',...
            'random-walk metropolis-hastings algoirthm'];
    case 'CovMatNotConsistentWithInit'
        msg = ['The dimension of the input vector of parameters ',...
            'being estimated is not consistent with the dimension of ',...
            'the covariance matrix for those parameters'];
    case 'UnableToUnpackBounds'
        msg = ['MAPS cannot proceed with the RWMH posterior ',...
            'simulation because it was unable to unpack the parameter ',...
            'bounds from the estimation priors structure. On ',...
            'attempting to do so, MATLAB returned the following error:']; 
    case 'BadCovarMatFromTraining'
        msg = ['The covariance matrix computed from the training ',...
            'sample is invalid for the following reason. This may be ',...
            'because the number of draws in the training sample is ',...
            'not large enough and/or that the combination of the ',...
            'initialised covariance matrix and scaling factor did not ',...
            'deliver enough variability in the parameters across the ',...
            'sample (i.e. the rejection rate may have been too high)'];
    case 'RWMHerror'
        msg = ['The random-walk metropolis-hastings algorithm failed ',...
            'on chain ',errArgs{1},' with the following error:'];
    case 'RWMHtrainingError'
        msg = ['On attempting to compute a training sample of ',...
            'parameter draws with which to estimate an in-sample ',...
            'covariance matrix, the random-walk metropolis-hastings ',...
            'algorithm failed with the following error:'];        
    case 'BadCovarMat'
        msg = ['MAPS was unable to compute a cholesky factorisation ',...
            'of the input covariance matrix. The most common reason ',...
            'for this is that the matrix is not positive definite, ',...
            'which is a requirement for the simulation routine. ',...
            'MATLAB''s chol function returned the following error:'];        
    case 'BadnChains'
        msg = ['The option dictating the number of chains to run must ',...
            'be a positive numeric integer']; 
    case 'BadnDraws'
        msg = ['The option dictating the number of draws in each ',...
            'chain must be a positive numeric integer'];   
    case 'BadnBurns'
        msg = ['The option dictating the number of draws to burn in ',...
            'each chain must be a positive numeric integer'];  
    case 'BadthinRate'
        msg = ['The option dictating the rate at which to thin the ',...
            'draws must be a real number greater than or equal to 0, ',...
            'but less than 1'];    
    case 'BadscalingFactor'
        msg = ['The option dictating the scaling factor to apply to ',...
            'parameter draws must be a postive, real, numeric scalar'];  
    case 'BadmaxTries'
        msg = ['The option dictating the maximum number of draws to ',...
            'make to find a parameterisation in bounds on each ',...
            'iteration must be a positive real integer'];        
    case 'BadscalingFactorInit'
        msg = ['The option dictating the scaling factor to apply to ',...
            'parameter draws in the initialisation of each chain must ',...
            'be a postive, real, numeric scalar'];
    case 'BadmaxTriesInit'
        msg = ['The option dictating the maximum number of draws to ',...
            'make to find an initialisation must be a positive, ',...
            'numeric integer']; 
    case 'BadcomputeCovMatInTrainingSample'
        msg = ['The option dictating whether or not to compute an in- ',...
            'training sample covariance matrix must be a scalar logical']; 
    case 'BadnDrawsInTrainingSample'
        msg = ['The option dictating how many draws to make in the ',...
            'training sample must be a positive real integer'];
    case 'BadscalingFactorInTrainingSample'
        msg = ['The option dictating the scaling factor to apply to ',...
            'parameter draws in the training sample must be a ',...
            'postive, real, numeric scalar'];  
    case 'BadmaxTriesInTrainingSample'
        msg = ['The option dictating the maximum number of draws to ',...
            'make to find a parameterisation in bounds on each ',...
            'iteration in the training sample must be a positive real ',...
            'integer'];        
    case 'BaddisplayProgress'
        msg = ['The option dictating whether or not to display ',...
            'progress must be a scalar logical']; 
    case 'BadprogressReportRate'
        msg = ['The option dictating the rate at which to report ',...
            'progress in computing the chains must be a real number ',...
            'greater than or equal to 0, but less than 1'];     
    case 'BademailProgress'
        msg = ['The option dictating whether or not to email progress ',...
            'must be a scalar logical'];  
    case 'BademailAddress'
        msg = ['The option dictating the email address to use in any ',...
            'email reporting of progress must be a string'];          
    case 'BadresetSeed'
        msg = ['The option dictating whether or not to reset the seed ',...
            'for random number generation (to that which prevails on ',...
            'opening MATLAB) must be a scalar logical'];     
    case 'BadcomputeInParallel'
        msg = ['The option dictating whether or not to compute the ',...
            'chains in parallel must be a scalar logical'];
    case 'BadparallelCodeDir'
        msg = ['The option dictating the root folder containing the ',...
            'code to be executed by the workers in the parallel ',...
            'execution (such that the MATLAB genpath command will ',...
            'generate the full set of necessary folders) must be a ',...
            'string name to a valid directory (such that the MATLAB ',...
            'command isdir returns true)']; 
    case 'BadcomputeMarginalDataDensity'
        msg = ['The option dictating whether or not to compute the ',...
            'marginal data density must be a scalar logical'];        
    case 'EmailProgressNotPossible'
        msg = ['The option to email progress in computing the chains ',...
            'is set to true, but it was not possible to successfully ',...
            'send an email to the address provided. The most likely ',...
            'cause of this is that the email address provided is ',...
            'invalid. MAPS'' email message function returned the ',...
            'following error:'];
    case 'nBurnsNotConsistentWithnSims'
        msg = ['The option dictating how many parameter draws to burn ',...
            'in each chain cannot qual or exceed the option dictating ',...
            'the number of draws in each chain'];         
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SOLVE LSS MODEL
function msg = get_solve_LSS_model_error(errCode,errArgs)                               %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['solve_LSS_model was not passed the right number of',...
            'inputs: it requires 1 or 2 inputs but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to solve_LSS_model must be a ',...
            'MAPS linear state space model structure.'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to solve_LSS_model must be ',...
            'a column vector of finite, real, numeric parameters'];
    case 'BadCustomSolverModelField'
        msg = ['The MAPS model structure passed to solve_LSS_model ',...
            'contains a custom solver field (implying that the model ',...
            'should be solved in a bespoke way), but its content is ',...
            'not a function handle as expected'];
    case 'CustomSolveE'
        msg = ['The custom solver ''',errArgs{1},''' failed with ',...
            'the following error message:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SOLVE LSS MODEL RE DYNAMICS
function msg = get_solve_LSS_model_RE_dynamics_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['solve_LSS_model_RE_dynamics was not passed the ',...
            'right number of inputs: it requires 4 inputs but ',...
            'received ',errArgs{1}];
    case 'NoContemporaneousVars'
        msg = ['The model passed to solve_LSS_model_RE_dynamics is ',...
            'not valid because it contains no loadings on ',...
            'contemporaneously-dated model variables'];
    case 'AIMunstableSolution'
        msg = ['The rational expectations solution to the model ',...
            'passed to solve_LSS_model_RE_dynamics could not be ',...
            'solved using the AIM algorithm'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SOLVE LSS MODEL STEADY STATE
function msg = get_solve_LSS_model_steady_state_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['solve_LSS_model_steady_state was not passed the ',...
            'right number of inputs: it requires 2 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to solve_LSS_model_steady_state ',...
            'must be a function handle containing steady state & ',...
            'parameter transformation expressions'];
    case 'BadInput2'
        msg = ['2nd input passed to solve_LSS_model_steady_state ',...
            'must be a column vector of finite real numeric parameters'];
    case 'SteadyStateEvalFailure'
        msg = ['It was not possible to evaluate the steady state ',...
            '& parameter transformation expressions. In attempting to ',...
            'evaluate the steady state expressions, MATLAB returned ',...
            'the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SOLVE RECURSIVE SYSTEM OF EQUATIONS
function msg = get_solve_recursive_system_of_equations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['solve_recursive_system_of_equations was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'solve_recursive_system_of_equations must be a column ',...
            'cell array of equation strings'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'solve_recursive_system_of_equations must be a column ',...
            'cell string array of mnemonics of endogenous variables ',...
            'to solve for'];
    case 'BadEqSpec'
        msg = ['In order to reorder a set of equations, this function ',...
            'requires that the endogenous variables to reorder by be ',...
            'uniquely identified on the LHS of the equations. MAPS'' ',...
            'index lookup function returned the following error'];
    case 'NonRecursiveEqSystem'
        msg = ['The system of equations is not recursive. The ',...
            'following equations constitute a non-recursive block:'];
    case 'NonRecursiveEqSystem:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SOLVE SYMBOLIC NLBL MODEL
function msg = get_solve_symbolic_NLBL_model_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['solve_symbolic_NLBL_model was not passed ',...
            'the right number of inputs: it requires 4 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'solve_symbolic_NLBL_model must be a column ',...
            'cell string array of the mnemonics for the ',...
            'variables that system will be solved for'];
    case 'BadInput2'
        msg = ['2st input passed to ',...
            'solve_symbolic_NLBL_model must be a real, finite column ',...
            'vector containing the index number(s) of the equation(s) ',...
            'that is (are) to be solved for the endogenous variables ',...
            'specified in the 1st input'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'solve_symbolic_NLBL_model must be a column ',...
            'cell string array of equations to be solved'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'solve_symbolic_NLBL_model must be a structure ',...
            'containing the information about the variables included',...
            'in the model'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SORT BARS BY ABSOLUTE MAGNITUDE
function msg = get_sort_bars_by_absolute_magnitude_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['sort_bars_by_absolute_magnitude was not passed the '...
            'right number of inputs: it requires 2 but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to sort_bars_by_absolute_magnitude '...
            'must be a real two dimensional matrix containing the bar '...
            'data to be sorted.'];
    case 'BadInput2'
        msg = ['2nd input passed to sort_bars_by_absolute_magnitude '...
            'must be a column cell array of strings containing the names '...
            'of the bars for the legend.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% SPLIT EQUATION
function msg = get_split_equation_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['split_equation was not passed the right number of ',....
            'inputs: it requires 1 or 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to split_equation must be an ',...
            'equation string'];
    case 'BadInput2'
        msg = ['Optional 2nd input passed to split_equation must be a ',...
            'structure of execution options for the equation split ',...
            'operation'];
    case 'BadOptionFieldName'
        msg = ['The ''',errArgs{1},''' field in the split equations ',...
            'options structure is not a recognised option field - ',...
            'please check your input'];
    case 'BadOptionField'
        msg = ['Fields in the split equation options structure must ',...
            'contain true/false logicals describing whether or not a ',...
            'particular split equation option should be carried out ',...
            'or not. The ''',errArgs{1},''' field contains an invalid ',...
            'data type'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SPLIT EQUATION SYSTEM STRINGS
function msg = get_split_equation_system_strings_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['split_equation_system_strings was not passed the right number of ',....
            'inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to split_equation must be a column ',...
            'cell array of equation strings'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SPLIT FILE NAME INTO CONSTITUENT PARTS
function msg = get_split_file_name_into_consituent_parts_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['split_file_name_into_consituent_parts was not passed ',...
            'the right number of inputs: it requires 1 input, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'split_file_name_into_consituent_parts must be a string ',...
            'representing a file name'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SUBAXIS
function msg = get_subaxis_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['Number of inputs received by subaxis ',...
            'is not right: we expected at least 3 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by subaxis is not as ',...
            'expected: it must be a positive integer representing ',...
            'the number of rows of charts to show per figure.'];
    case 'BadInput2'
        msg = ['2nd input received by subaxis is not as ',...
            'expected: it must be a positive integer representing ',...
            'the number of columns of charts to show per figure.'];
    case 'BadAxesIdentifierArgs'
        msg = ['Numeric arguments to identify the axes ',...
            'within the figure must all be positive integers.'];        
    case 'AxesIndexTooLarge'
        msg = ['3rd input received by subaxis to identify a specific' ,...
            'set of axes within the figure is too large; it cannot ',...
            'be greater than nRows x nCols.'];   
    case 'AxesXIndexTooLarge'
        msg = ['Invalid index specifying the x-position of the axes; ',...
            'it cannot be greater than nCols. Check ''cellx'' input ',...
            'argument (and ''spanx'', if provided.'];   
    case 'AxesYIndexTooLarge'
        msg = ['Invalid index specifying the y-position of the axes; ',...
            'it cannot be greater than nRows. Check ''celly'' input ',...
            'argument (and ''spany'', if provided.'];   
    case 'WrongNumberOfAxesIdentifierArgs'
        msg = ['You passed in an invalid set of numeric arguments to ',...
            'identify the axes within the figure. The axes must be ',...
            'identified using 1, 2 or 4 arguments - see the function '...
            'documentation for details.'];
    case 'BadWidthMarginOrSpacing'
        msg = ['Unable to layout all sets of axes with these ',...
            'horizontal margin and spacing settings - there is no ',...
            'space remaining for the axes! Check nCols, ',...
            'SpacingHorizontal, MarginLeft and MarginRight.'];
    case 'BadHeightMarginOrSpacing'
        msg = ['Unable to layout all sets of axes with these ',...
            'vertical margin and spacing settings - there is no ',...
            'space remaining for the axes! Check nRows, ',...
            'SpacingVertical, MarginTop and MarginBottom.'];
    case 'ExcessWidthPadding'
        msg = ['Unable to layout all sets of axes with these ',...
            'settings - the padding is larger than the axes'' width ',...
            '(after margin and spacing settings have been applied! ',...
            'Check nCols, SpacingHorizontal, MarginLeft, MarginRight, ',...
            'PaddingLeft and PaddingRight.'];
    case 'ExcessHeightPadding'
        msg = ['Unable to layout all sets of axes with these ',...
            'settings - the padding is larger than the axes'' height ',...
            '(after margin and spacing settings have been applied! ',...
            'Check nRows, SpacingVertical, MarginTop, MarginBottom, ',...
            'PaddingTop and PaddingBottom.'];
    case 'UnknownParameterIdentifier'
        msg = ['Unknown argument identifier passed to subaxis in ',...
            'settings varargin list: ' errArgs{1} '. Check function ',...
            'documentation for details of valid identifier strings.'];
    case 'NonStringParameterIdentifier'
        msg = ['Argument identifiers passed to subaxis in settings ',...
            'as varargin must be strings. See function documentation ',...
            'function documentation for more information and examples.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% SUBSTITUTE IN DECOMPOSITION
function msg = get_substitute_in_decomposition_error(errCode,errArgs)       %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['test_substitute_in_decomposition was not passed the ',...
            'right number of inputs: it requires 9 inputs, but only ',...
            'receieved ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to substitute_in_decomposition ',...
            ' must be a MAPS model structure with field .Constructor'];
    case 'BadInput2'
        msg = ['2nd input passed to substitute_in_decomposition ',...
            'must be a vector with finite numeric entries'];
    case 'BadInput3'
        msg = ['3rd input passed to substitute_in_decomposition ',...
            'must be a matrix with finite numeric entries'];
    case 'BadInput4'
        msg = ['4th input passed to substitute_in_decomposition ',...
            'must be a cell including strings representing variables'];
    case 'BadInput5'
        msg = ['5th input passed to substitute_in_decomposition ',...
            'must be a structure including information about the '...
            'desired decomposition'];
    case 'BadInput6'
        msg = ['6th input passed to substitute_in_decomposition ',...
            'must be a matrix with finite numeric entries'];
    case 'BadInput7'
        msg = ['7th input passed to substitute_in_decomposition ',...
            'must be a matrix with finite numeric entries'];
    case 'BadInput8'
        msg = ['8th input passed to substitute_in_decomposition ',...
            'must be a matrix with finite numeric entries'];
    case 'BadInput9'
        msg = ['9th input passed to substitute_in_decomposition ',...
            'must be a structure with the fields .unanticipated '...
            'and/or .anticipated'];
    case 'BadInput10'
        msg = ['10th input passed to substitute_in_decomposition ',...
            'must be a matrix with finite numeric entries'];
    case 'BadDecompVar'
        msg = ['Variable to be decomposed is not coherent with the '...
            'information in input 4'];
    case 'CannotSubstituteShocks'
        msg = ['Cannot substitute shocks as the structure '...
            '.Substitutions is empty'];
    case 'BadSubsType'
        msg = ['Invalid decomposition type. The  string decompType in '...
            '.Substitutions has to be either ''shock_based'' '...
            'or ''model_equation'''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TABLE COMPONENT
function msg = get_TableComponent_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadConstructNargin'
        msg = ['The constructor method for TableComponent requires a minimum '...
            'of 2 inputs. It was only passed ',errArgs{1}];
    case 'BadConstructInput1'
        msg = ['The first input passed to the constructor method for '...
            'TableComponent must be row cell array containing the column '...
            'headers for the table.'];
    case 'BadConstructInput2'
        msg = ['The second input passed to the constructor method for '...
            'TableComponent must be cell array containing the data to '...
            'display in the table.'];
    case 'BadConstructInput3'
        msg = ['The (optional) third input passed to the constructor method for '...
            'TableComponent must be a vector of positive finite numbers '...
            'indicating the relative column widths.'];
    case 'ConstructDimMismatch'
        msg = ['The number of columns in the headers, data for the table '...
            'and (if provided) the relative width of the columns must '...
            'be the same.'];
    case 'AddToBadNargin'
        msg = ['The AddTo method in ReportTableComponent requires 1 input'...
            '(beyond the ReportTableComponent itself), which is the '...
            'ReportBuilder to which to add the component.'];
    case 'AddToBadInput1'
        msg = ['The first input to the AddTo method in ReportTableComponent must '...
            'be a ReportBuilder object to which to add the table component.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TEST FUNCTION OR METHOD AGAINST EXPECTATIONS
function msg = get_test_function_or_method_against_expectations_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['test_function_or_method_against_expectations was not ',...
            'passed the right number of inputs: it requires 5 or 6 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'test_function_or_method_against_expectations must be a ',...
            'string representing the name of the function or method ',...
            'to test'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'test_function_or_method_against_expectations must be a ',...
            'logical scala describing whether the test of of a method ',...
            '(true) or function (false)'];        
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'test_function_or_method_against_expectations must be a ',...
            'row cell array of input data for the function or method ',...
            'to test'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'test_function_or_method_against_expectations must be a ',...
            'row cell array of expected output data for the function ',...
            'or method to test'];
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'test_function_or_method_against_expectations must be a ',...
            'positive, numeric scalar representing a tolerance within ',...
            'which the outputs generated by running the function or ',...
            'method are considered the same as the expected outputs'];
    case 'BadInput6'
        msg = ['Optional 6th input passed to ',...
            'test_function_or_method_against_expectations must be a ',...
            'logical scalar describing whether or not to resume ',...
            'running of the profiler on execution of the test']; 
    case 'InvalidFirstInputForMethod'
        msg = ['The object on which the method being testes resides ',...
            'must be the first of the input arguments passed in'];
    case 'InvalidInputsCellForMethod'
        msg = ['In order to test a method at least one input must be ',...
            'provided with that being the object on which the method ',...
            'resides - well durr, it''s obvious now you think about it!'];
    case 'UnknownMethod'
        msg = ['The method could not be found on the object that was ',...
            'passed in as the first of the inputs (which is assumed ',...
            'to be the object pertaining to the method'];
    case 'UnexpectedExpectedOutputs'
        msg = ['There must be only one expected output if the set of ',...
            'expected outputs contains an exception'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TEST_MAPS
function msg = get_test_MAPS_error(errCode,errArgs)                         %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['test_MAPS was not passed the right number of inputs: ',...
            'it requires at least 2 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to test_MAPS must be a string ',...
            'directory for ''inner'' MAPS'];
    case 'BadInput2'
        msg = ['2nd input passed to test_MAPS must be a string ',...
            'representing a file name in which to print out the test ',...
            'results'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to test_MAPS must be a ',...
            'logical scalar indicating whether or not to run profiler ',...
            'with the tests']; 
    case 'BadInput4'
        msg = ['Optional 4th input passed to test_MAPS must be a row ',...
            'cell array of strings representing the names of tests to ',...
            'run or not to run as dictated by the 5th input passed in']; 
    case 'BadInput5'
        msg = ['Optional 5th input passed to test_MAPS must be a ',...
            'logical scalara dictating whether the list of test names ',...
            'passed in as 4th input represents a list of tests to run ',...
            'or a list of tests not to run'];         
    case 'BadOutputNargProfileInput'
        msg = ['If test_MAPS is called with just 2 input arguments or ',...
            'the 3rd ''runProfiler'' input is set to false, then only ',...
            'one output argument should be specified in the function ',...
            'call (because it is necessary to run the profiler in ',...
            'order to gather the test execution statistics which ',...
            'constitute the 2nd output argument'];
    case 'InvalidResultsFileNameExtension'
        msg = ['The results file name passed in as 2nd input had an ',...
            'extension, but it was not a ''.maps'' extension - either ',...
            'change the extension to ''.maps'' or do not specify one'];
    case 'NoMatFilesInTestDirectory'
        msg = ['There were no ''.mat'' test files in the test ',...
            'directory ''',errArgs{1},'''. Please check the ',...
            'innerMAPSdir string passed in as input and the content ',...
            'of this directory - it''s possible you may a typo in ',...
            'providing the inner MAPS directory name or that the ',...
            'inner MAPS directory does not mirror the VSS directory ',...
            'or that the test directory is empty'];
    case 'UnknownTests'
        msg = ['The following test names (passed in as 4th input etc) ',...
            'could not be found among the set loaded from the test ',...
            'directory:'];
    case 'UnknownTests:Instance'
        msg = errArgs{1};
    case 'UnableToExecuteTestCases'
        msg = ['It is not possible to execute one or more of the ',...
            'automated tests:'];
    case 'UnableToFindFunction'
        msg = ['The following functions (implied by the regression ',...
            'test data .mat files found in the test directory) ',...
            'could not be found on the MATLAB search path:'];
        case 'UnableToFindFunction:Instance'    
            msg = errArgs{1};
    case 'UnableToFindClass'
        msg = ['The following classes (implied by the text ',...
            'appearing between the square brackets in the test data ',...
            '.mat files found in the test directory) could not be ',...
            'found on the MATLAB search path:'];
        case 'UnableToFindClass:Instance'    
            msg = errArgs{1};     
    case 'UnableToFindMethodOnClass'
        msg = ['The following methods (implied by the text ',...
            'appearing after the square brackets in the test data ',...
            '.mat files found in the test directory) could not be ',...
            'found in the associated class:'];
    case 'UnableToFindMethodOnClass:Instance'
            msg = [errArgs{1} 'on class ',errArgs{2}];              
    case 'FileOpenFailure'
        msg = ['It was not possible to open ',errArgs{1},' to print ',...
            'out the automated test results. On attempting to open ',...
            'the file, MATLAB returned the following error: ',errArgs{2}];
    case 'FileCloseFailure'
        msg = ['For some unspecified reason, it was not possible to ',...
            'close the automated test results file - ',errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TEXT COMPONENT
function msg = get_TextComponent_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
case 'BadConstructNargin'
    msg = ['The constructor method for TextComponent requires one input '...
        'but only received ',errArgs{1}];
    case 'BadConstructInput1'
    msg = ['The first input passed to the constructor method for '...
        'TextComponent must be a string containing the text to include.'];
    case 'AddToBadNargin'
        msg = ['The AddTo method in TextComponent requires one '...
            'input (beyond the Text Component object itself). It only '...
            'received ',errArgs{1}];
    case 'AddToBadInput1'
        msg = ['The first input passed to the AddTo method in the '...
            'TextComponent must be of the ReportBuilder class ('...
            'the report to which to add the text component).'];
    otherwise 
        throw_missing_error_code_error(errCode);
end
end

%% TIDY EQUATION
function msg = get_tidy_equation_error(errCode,errArgs)                     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['tidy_equation was not passed the right number of ',...
            'inputs: it requires 1 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by tidy_equation must be a string ',...
            'representing an equation'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM AND PACKAGE OUTPUTS FROM CSMINWEL_MAPS
function msg = ...
    get_transform_and_package_outputs_from_csminwel_MAPS_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_and_package_outputs_from_csminwel_MAPS was ',...
            'not passed the right number of inputs: it requires 9 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'transform_and_package_outputs_from_csminwel_MAPS must be ',...
            'a numeric scalar value for the objective function on ',...
            'termination']; 
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'transform_and_package_outputs_from_csminwel_MAPS must be ',...
            'a To BE COMPLETED']; 
    case 'BadInput7'
        msg = ['7th input passed to ',...
            'transform_and_package_outputs_from_csminwel_MAPS must be ',...
            'a positive numeric integer for the number of iterations ',...
            'taken'];
    case 'BadInput8'
        msg = ['8th input passed to ',...
            'transform_and_package_outputs_from_csminwel_MAPS must be ',...
            'a positive numeric integer for the number of function ',...
            'evaluations made'];
    case 'BadInput9'
        msg = ['9th input passed to ',...
            'transform_and_package_outputs_from_csminwel_MAPS must be ',...
            'a numeric integer (flag) describing the reason for ',...
            'termination'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM INDICES FROM OBSERVABLE TO MODEL VAR SPACE
function msg = ...
    get_transform_indices_from_observable_to_model_var_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_indices_from_observable_to_model_var_space ',...
            'was not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_indices_from_observable_to_model_var_space ',...
            'must be a MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_indices_from_observable_to_model_var_space ',...
            'must column vector of model observable indices'];
    case 'BadInds'
        msg = ['It was not possible to convert the model observable ',...
            'indices to model variable space because the input ',...
            'model observable indices could not be mapped into the ',...
            'complete set of transformed model observable indices. ',...
            'MATLAB returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM INDICES FROM RAW TO MODEL OBSERVABLE SPACE
function msg = ...
    get_transform_indices_from_raw_to_model_observable_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_indices_from_raw_to_model_observable_space ',...
            'was not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_indices_from_raw_to_model_observable_space ',...
            'must be a MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_indices_from_raw_to_model_observable_space ',...
            'must column vector of model raw observable indices'];
    case 'BadInds'
        msg = ['It was not possible to convert the raw observable ',...
            'indices to model observable space because the input ',...
            'raw observable indices could not be mapped into the ',...
            'transformed raw observable model indices. MATLAB ',...
            'returned the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM INVERSE HESSIAN TO ORIGINAL DOMAIN
function msg = get_transform_inverse_hessian_to_original_domain_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_inverse_hessian_to_original_domain was not ',...
            'pased the right number of inputs: it requires 4 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_inverse_hessian_to_original_domain must be a ',...
            'finite, real square inverse Hessian matrix on the ',...
            'unbounded domain'];        
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_inverse_hessian_to_original_domain must be a ',...
            'finite, real column vector of objective function ',...
            'arguments on the unbounded domain'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'transform_inverse_hessian_to_original_domain must be a ',...
            'finite, real column vector of objective function ',...
            'argument lower bounds'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'transform_inverse_hessian_to_original_domain must be a ',...
            'finite, real column vector of objective function ',...
            'argument upper bounds'];
    case 'InconsistentInputs'
        msg = ['1st, 2nd, 3rd & 4th inputs passed to ',...
            'transform_inverse_hessian_to_original_domain ',...
            'representing an inverse Hessian, a vector of objective ',...
            'function arguments and bounds for those arguments must ',...
            'have the same dimensions'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM OBJECTIVE FUNCTION ARGS TO ORIGINAL DOMAIN
function msg = ...
    get_transform_objective_function_args_to_original_domain_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_objective_function_args_to_original_domain ',...
            'was not pased the right number of inputs: it requires 3 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_objective_function_args_to_original_domain ',...
            'must be a finite, real column vector of parameters on ',...
            'the unbounded domain'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_objective_function_args_to_original_domain ',...
            'must be a finite, real column vector of parameter lower ',...
            'bounds'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'transform_objective_function_args_to_original_domain ',...
            'must be a finite, real column vector of parameter upper ',...
            'bounds'];
    case 'InconsistentInputs'
        msg = ['1st, 2nd and 3rd inputs passed to ',...
            'transform_objective_function_args_to_original_domain ',...
            'representing a parameter vector and bounds for that ',...
            'parameter vector must have the same dimensions'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM OBJECTIVE FUNCTION ARGS TO UNBOUNDED DOMAIN
function msg = ...
    get_transform_objective_function_args_to_unbounded_domain_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_objective_function_args_to_unbounded_domain ',...
            'was not pased the right number of inputs: it requires 3 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_objective_function_args_to_unbounded_domain ',...
            'must be a finite, real column vector of parameters'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_objective_function_args_to_unbounded_domain ',...
            'must be a finite, real column vector of parameter lower ',...
            'bounds'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'transform_objective_function_args_to_unbounded_domain ',...
            'must be a finite, real column vector of parameter upper ',...
            'bounds'];
    case 'InconsistentInputs'
        msg = ['1st, 2nd and 3rd inputs passed to ',...
            'transform_objective_function_args_to_unbounded_domain ',...
            'representing a parameter vector and bounds for that ',...
            'parameter vector must have the same dimensions'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM OBSERVABLES FROM MODEL TO RAW SPACE
function msg = get_transform_observables_from_model_to_raw_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_observables_from_model_to_raw_space was not ',...
            'passed the right number of inputs: it requires either ',...
            '3 or 5 inputs (depending on whether deterministic time ',...
            'trends form part of the model being used), but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'data transformation function handle'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'finite two-dimensional numeric matrix of model observables'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'finite numeric column vector of initial conditions for ',...
            'the raw observables'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'finite two-dimensional numeric matrix of deterministic ',...
            'time-varying trends'];
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'transform_observables_from_model_to_raw_space must be a ',...
            'finite numeric column vector of initial conditions for ',...
            'the deterministic time-varying trends'];
    case 'InconsistentObsDims'
        msg = ['The dimensions of the raw observables initial ',...
            'conditions and the model observable dataset are not ',...
            'consistent: they must have the same number of rows ',...
            '(representing the number of observables in the model)'];
    case 'InconsistentTimeTrendDims'
        msg = ['The dimensions of the deterministic time-varying ',...
            'trend initial conditions and dataset are not consistent: ',...
            'they must have the same number of rows (representing the ',...
            'number of separate deterministic time-varying trends in ',...
            'the model)'];
    case 'InconsistentRawObsTimeTrendDims'
        msg = ['The dimensions of the model observables dataset and ',...
            'the deterministic time-varying trends dataset are not ',...
            'consistent: they must have the same number of columns ',...
            '(representing the number of time periods of data)'];
    case 'FunHandleEvalFailure'
        msg = ['On evaluation of the data transformation function ',...
            'handle, MATLAB returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSFORM OBSERVABLES FROM RAW TO MODEL SPACE
function msg = get_transform_observables_from_raw_to_model_space_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['transform_observables_from_raw_to_model_space was not ',...
            'passed the right number of inputs: it requires either ',...
            '3 or 5 inputs (depending on whether deterministic time ',...
            'trends form part of the model being used), but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'data transformation function handle'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'finite two-dimensional numeric matrix of raw observables'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'finite numeric column vector of initial conditions for ',...
            'the raw observables'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'finite two-dimensional numeric matrix of deterministic ',...
            'time-varying trends'];
    case 'BadInput5'
        msg = ['5th input passed to ',...
            'transform_observables_from_raw_to_model_space must be a ',...
            'finite numeric column vector of initial conditions for ',...
            'the deterministic time-varying trends'];
    case 'InconsistentRawObsDims'
        msg = ['The dimensions of the raw observables initial ',...
            'conditions and dataset are not consistent: they must ',...
            'have the same number of rows (representing the number of ',...
            'observables in the model)'];
    case 'InconsistentTimeTrendDims'
        msg = ['The dimensions of the deterministic time-varying ',...
            'trend initial conditions and dataset are not consistent: ',...
            'they must have the same number of rows (representing the ',...
            'number of separate deterministic time-varying trends in ',...
            'the model)'];
    case 'InconsistentRawObsTimeTrendDims'
        msg = ['The dimensions of the raw observables dataset and the ',...
            'deterministic time-varying trends dataset are not ',...
            'consistent: they must have the same number of columns ',...
            '(representing the number of time periods of data)'];
    case 'FunHandleEvalFailure'
        msg = ['On evaluation of the data transformation function ',...
            'handle, MATLAB returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSLATE DECOMP INSTRUCTION STRING
function msg = get_translate_decomp_instruction_string_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['translate_decomp_instruction_string was not pased the ',...
            'right number of inputs: it requires 3 inputs, but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'translate_decomp_instruction_string must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'translate_decomp_instruction_string must be a ',...
            'decomposition name string'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'translate_decomp_instruction_string must be a MAPS ',...
            'decomposition instruction string'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% TRANSLATE EASE DECOMP INSTRUCTION FROM
function msg = get_translate_EASE_decomp_instruction_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['translate_EASE_decomp_instruction was not passed the ',...
            'right number of inputs: it requires 2 inputs but ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to translate_EASE_decomp_instruction ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to translate_EASE_decomp_instruction ',...
            'must be a cell array containing the information required '...
            'for the decompositions to be performed'];
    case 'NotValidNestedDecomp'
        msg = ['The information in the 2nd input passed to '...
            'translate_EASE_decomp_instruction (',errArgs{2},') does '...
            'not coincide with the name of the variable to be used in '...
            'the decomposition (',errArgs{1},') provided in '...
            ' the structure Model.Decompositions.DecompInfo.nestedDecomp'];
    case 'BadVarForDecomp'
        msg = ['The information in the 2nd input passed to '...
            'translate_EASE_decomp_instruction does not coincide with '...
            'the name of the variable to be used in the grouped '...
            'decomposition provided in the structure '...
            'Model.Decompositions.DecompInfo.groupedDecomp'];
    case 'BadEASEinstruction'
        msg = ['The 2nd input passed to '...
            'translate_EASE_decomp_instruction does not allow '...
            'performing the decomposition. It probably does not have '...
            'the correct size'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNDO OVERLAY OF ONE INCOMPLETE DATASET ON TO ANOTHER
function msg = ...
    get_undo_overlay_of_one_incomplete_dataset_on_to_another_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'was not passed the right number of inputs: it requires 4 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'representing the model dataset must be a real, two-',...
            'dimensional matrix with no infinite values'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'must be column cell string array or column vector of ',...
            'index numbers representing the model metadata for the ',...
            'dataset input'];
    case 'BadInput3'
        msg = ['3rd inputs passed to ',...
            'undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'must be a two-dimensional logical matrix describing ',...
            'which of the components of the combined dataset were ',...
            'taken from the first dataset'];
    case 'BadInput4'
        msg = ['4th inputs passed to ',...
            'undo_overlay_of_one_incomplete_dataset_on_to_another ',...
            'must be a two-dimensional logical matrix describing ',...
            'which of the components of the combined dataset were ',...
            'taken from the second dataset'];
    case 'MetadataDimsInconsistentWithData'
        msg = ['The number of rows (indexing variables) in the ',...
            'dataset was not consistent with the number of rows in ',...
            'the model metadata for the dataset'];
    case 'Logical1DimsInconsistentWithData'
        msg = ['The dimensions of the logical matrix describing ',...
            'which of the components of the combined dataset were ',...
            'taken from the first dataset were not consistent with ',...
            'the dimensions of the combined dataset'];
    case 'Logical2DimsInconsistentWithData'
        msg = ['The dimensions of the logical matrix describing ',...
            'which of the components of the combined dataset were ',...
            'taken from the second dataset were not consistent with ',...
            'the dimensions of the combined dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNPACK DATA FROM MAPS DATASET
function msg = get_unpack_data_from_MAPS_dataset_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['unpack_data_from_MAPS_dataset was not passed the ',...
            'right number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to unpack_data_from_MAPS_dataset ',...
            'must be a MAPS dataset structure'];
    case 'BadInput2'
        msg = ['2nd input passed to unpack_data_from_MAPS_dataset ',...
            'must be a row vector cell string array of data ',...
            'series identifiers in the dataset'];
    case 'BadField'
        msg = ['The ''',errArgs{1},''' field was not a structure as ',...
            'expected'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNPACK DECOMP GROUP STRING
function msg = get_unpack_decomp_group_string_error(errCode,errArgs)        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['unpack_decomp_group_string was not passed the right ',...
            'number of inputs: it requires 1 inputs, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to unpack_decomp_group_string must ',...
            'be a group definition or grouping instruction string'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNPACK EXCEL FIX INFO STRUCTURE AND LOAD INSTRUCTION
function msg = ...
    get_unpack_excel_fix_info_structure_and_load_instruction_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['unpack_excel_fix_info_structure_and_load_instruction ',...
            'was not passed the right number of inputs: it requires 3 ',...
            'inputs, but received ',errArgs{1}];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'unpack_excel_fix_info_structure_and_load_instruction ',...
            'must be a structure containing information about the ',...
            'Excel file and sheet(s) containing the fix instruction'];
    case 'MissingFileNameField'
        msg = ['The structure containing the information about the ',...
            'Excel file and sheet(s) containing the fix instruction ',...
            'must contain either a ''FileName'' field'];
    case 'MissingFixSheetName'
        msg = ['The structure containing the information about the ',...
            'Excel file and sheet(s) containing the fix instruction ',...
            'must contain either an ''unanticipatedFixesSheetName'' ',...
            'or an ''anticipatedFixesSheetName'' or both'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNPACK MODEL
function msg = get_unpack_model_error(errCode,errArgs)                      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['unpack_model was not passed the right number of ',...
            'inputs: it requires 2 inputs, but only received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to unpack_model must be a MAPS ',...
            'model structure which must have a ''Constructor'' field'];
    case 'BadInput2'
        msg = ['2nd input passed to unpack_model must be a vector ',...
            'cell string array of model component identifiers'];
    case 'NarginNargoutMismatch'
        msg = ['The number of identifiers passed in (identifying ',...
            'model components to unpack) must equal the number ',...
            'of outputs in the output argument list'];
    case 'UnpackFailure'
        msg = ['MAPS was unable to unpack the following model ',...
            'component(s):'];
    case 'UnpackFailure:ConstructorEvalFailure'
        msg = ['On evaluation of the model constructor field ''',....
            errArgs{1},''' MATLAB returned the following error:'];
    case 'UnpackFailure:NonExistentID'
        msg = ['The identifier ''',errArgs{1},''' could not be found ',...
            'among the list of valid MAPS model component identifiers ',...
            'in the model input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UNPACK MODEL METADATA AND LOOKUP INDEX NUMBERS
function msg = get_unpack_model_metadata_and_lookup_index_numbers_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['unpack_model_metadata_and_lookup_index_numbers was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'unpack_model_metadata_and_lookup_index_numbers must be ',...
            'a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'unpack_model_metadata_and_lookup_index_numbers must be ',...
            'a string identifying metadata for a particular variable ',...
            'type in the model'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'unpack_model_metadata_and_lookup_index_numbers must be ',...
            'a column cell string array of metadata whose index ',...
            'numbers to lookup in the model'];
    case 'UnpackMetadataFailure'
        msg = ['It was not possible to lookup the index numbers of ',...
            'the metadata passed in because of the following error in ',...
            'unpacking the model metadata in which to lookup the ',...
            'index numbers:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE EASE INFO IN LSS MODEL FOR DECOMP ADD ON
function msg = ...
    get_update_EASE_info_in_LSS_model_for_decomp_add_on_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_EASE_info_in_LSS_model_for_decomp_add_on was ',...
            'not passed the right number of inputs: it requires 1 ',...
            'input but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'update_EASE_info_in_LSS_model_for_decomp_add_on must be ',...
            'a MAPS model structure'];
    case 'BadModelClass'
        msg = ['Model input passed to ',...
            'update_EASE_info_in_LSS_model_for_decomp_add_on must be ',...
            'of the linear state space class'];
    case 'NoDecompAddOn'
        msg = ['Linear state space model input passed to ',...
            'update_EASE_info_in_LSS_model_for_decomp_add_on must ',...
            'have a decomposition add-on'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE FORECAST DATASET WITH JUDGEMENTS
function msg = get_update_forecast_dataset_with_judgements_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_forecast_dataset_with_judgements was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'update_forecast_dataset_with_judgements must be a cell ',...
            'string array of model metadata for the forecast dataset ',...
            'input'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'update_forecast_dataset_with_judgements must be a ',...
            'finite, real, two-dimensional, numeric forecast dataset'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'update_forecast_dataset_with_judgements must be a ',...
            'two-column judgement cell array'];
    case 'DatasetIncompatibleWithMetadata'
        msg = ['The dimension of the forecast dataset is not ',...
            'consistent with the dimension of the model metadata for ',...
            'that dataset'];
    case 'IndexLookupFailure'
        msg = ['It was not possible to update the forecast dataset ',...
            'with the judgements because of the following error(s) in ',...
            'converting the judgement metadata to model index numbers'];
    case 'CellDataConversionFailure'
        msg = ['It was not possible to update the forecast dataset ',...
            'with the judgements because of the following error(s) in ',...
            'converting the individual judgement data vectors to a ',...
            'matrix equivalent'];
    case 'JudgementHorizonError'
        msg = ['It was not possible to update the forecast dataset ',...
            'with the judgements because the horizon of the ',...
            'judgements exceeded the forecast horizon consistent with ',...
            'the forecast dataset input'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE LSS MODEL STRUCTURE CONFIG WITH DECOMP ADD ON
function msg = ...
    get_update_LSS_model_structure_config_with_decomp_add_on_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_LSS_model_structure_config_with_decomp_add_on ',...
            'was not passed the right number of inputs: it requires 1 ',...
            'input but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'update_LSS_model_structure_config_with_decomp_add_on ',...
            'must be a MAPS linear state space model constructor ',...
            'structure'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE MODEL METADATA
function msg = get_update_model_metadata_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_model_metadata was not passed the right number ',...
            'of inputs: it requires 2 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to update_model_metadata must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to update_model_metadata must be a ',...
            'two-column cell array of strings, with metadata field ',...
            'names in the first column, and updated metadata field ',...
            'values in the second.'];
    case 'BadFieldNames'
        msg = ['The following metadata field names provided were not ',...
            'found in the model:'];
    case 'BadFieldNames:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE PARAMETERS
function msg = get_update_parameters_error(errCode,errArgs)                 %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_parameters was not passed the right number of ',...
            'inputs: it requires 3, 4, or 5 inputs but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to update_parameters must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to update_parameters must be a ',...
            'finite real column vector of parameter values with which ',...
            'to update/overwrite existing parameter values'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to update_parameters must ',...
            'be either a column vector of positive integer index ',...
            'numbers or a column cell string array (or simgle string) ',...
            'of parameter mnemonics identifying the parameters whose ',...
            'values are to be updated/overwritten'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to update_parameters must ',...
            'be a finite real column vector of existing values for ',...
            'all the parameters in the model (in model order)'];  
    case 'BadInput5'
        msg = ['Optional 5th input passed to update_parameters must ',...
            'be a column cell string array of mnemonics for all the ',...
            'parameters in the model with the same dimension as the ',...
            'complete vector of parameter values'];    
    case 'IdentifiersParametersDimMismatch'
        msg = ['The vector of parameter values with which to update/ ',...
            'overwrite existing parameter values (passed in as 2nd ',...
            'input) must have the same dimension as the vector of ',...
            'the vector of index number or mnemonic identifiers for ',...
            'the parameters whose values are to be updated/',...
            'overwriteen (passed in as 3rd input)']; 
    case 'UpdateVectorIsTooLarge'
        msg = ['The vector of values with which to update/overwrite a ',...
            'subset of the existing parameter values (passed in as ',...
            '2nd input) cannot be larger in dimension than the ',...
            'complete vector of existing parameter values'];
    case 'BadMnems'
        msg = ['It was not possible to compute the index numbers of ',...
            'the parameters to be updated using the mnemonic ',...
            'identifiers (passed in as 3rd input) because either: ',...
            'a) one or more of those mnemonics were repeated or do ',...
            'not exist among the complete set of parameter mnemonics ',...
            'in the model; b) if the complete set of model parameter ',...
            'mnemonics were passed in as 5th input, they are not the ',...
            'correct/valid set (ie do not match those in the model ',...
            'structure input). MAPS'' model index lookup function ',...
            'returned the following error(s):'];
    case 'IndexIdentifiersOutOfRange'
        msg = ['At least one of the index numbers identifying the ',...
            'parameter values to update (passed in as 3rd input to ',...
            'this function) is larger than the number of parameters ',...
            'in the model (i.e. is out of bounds)']; 
    case 'IndexIdentifiersNonUnique'
        msg = ['One or more of the index numbers identifying the ',...
            'parameter values to update (passed in as 3rd input to ',...
            'this function) is repeated (non-unique)'];        
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE PARAMETERS AND RESOLVE LSS MODEL
function msg = get_update_parameters_and_resolve_LSS_model_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_parameters_and_resolve_LSS_model was not ',...
            'passed the right number of inputs: it requires 3, 4, or ',...
            '5 inputs but received ',errArgs{1}];
    case 'UnableToResolve'
        msg = ['The model failed to resolve after successful update ',...
            'of the parameters. MAPS'' LSS model solver returned ',...
            'the following error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE SHOCKS FORECAST DATASET WITH JUDGEMENTS
function msg = get_update_shocks_forecast_dataset_with_judgements_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_shocks_forecast_dataset_with_judgements was ',...
            'not passed the right number of inputs: it requires 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'update_shocks_forecast_dataset_with_judgements must be a ',...
            'MAPS linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'update_shocks_forecast_dataset_with_judgements must be a ',...
            'shocks forecast dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'update_shocks_forecast_dataset_with_judgements must be a ',...
            'shocks judgement dataset structure'];
    case 'ShockDatasetUpdateFailure'
        msg = ['It was not possible to update the forecast data for ',...
            errArgs{1},' shocks for the following reason(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE TEST CASE EXPECTED OUTPUTS WITH FAILURE CASES
function msg = ...
    get_update_test_case_expected_outputs_with_failure_cases_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_test_case_expected_outputs_with_failure_cases ',...
            'was not passed the right number of inputs: it requires ',...
            '3 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'update_test_case_expected_outputs_with_failure_cases ',...
            'must be a string representing the test directory/folder ',...
            '(containing the test data)'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'update_test_case_expected_outputs_with_failure_cases ',...
            'must be a string representing the function for which ',...
            'the test data pertains'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'update_test_case_expected_outputs_with_failure_cases ',...
            'must be a column vector of test case numbers to update'];
    case 'UnknownFailCaseFile'
        msg = ['The test failure data file ''',errArgs{1},''' could ',...
            'not be found'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% UPDATE TIME TRENDS FORECAST DATASET WITH JUDGEMENTS
function msg = ...
    get_update_time_trends_forecast_dataset_with_judgements_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['update_time_trends_forecast_dataset_with_judgements ',...
            'was not passed the right number of inputs: it requires 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'update_time_trends_forecast_dataset_with_judgements must ',...
            'be a MAPS linear state space model structure'];
    case 'TimeTrendDatasetUpdateFailure'
        msg = ['It was not possible to update the forecast data for ',...
            'the determinstic time-varying trends for the following ',...
            'reason(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE CELL ARRAY INCOMPLETE MODEL DATASET
function msg = get_validate_cell_array_incomplete_model_dataset_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_cell_array_incomplete_model_dataset was not ',...
            'passed the right number of inputs: it requires 3 or 4 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_cell_array_incomplete_model_dataset must be a ',...
            'MAPS model structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'validate_cell_array_incomplete_model_dataset must be a ',...
            'string identifying metadata for a particular variable ',...
            'type in the model'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'validate_cell_array_incomplete_model_dataset must be an ',...
            'exception'];
    case 'ValidationFailure'
        msg = ['The dataset passed in failed validation for the ',...
            'following reason(s):'];
    case 'BadDatasetFormat'
        msg = ['Dataset (2nd input passed to ',...
            'validate_cell_array_incomplete_model_dataset) must be a ',...
            'two-column cell array incomplete model dataset'];
    case 'BadColumn1'
        msg = ['The 1st column in the two-column cell array ',...
            'incomplete model dataset must be a cell string array of ',...
            'metadata relating each of the separate time series of ',...
            'data in the second column to a variable from the model'];
    case 'BadColumn2'
        msg = ['The 2nd column in the two-column cell array ',...
            'incomplete model dataset must contain individual row ',...
            'vectors of numeric data for each of the variables in the ',...
            'incomplete set'];
    case 'BadMetadata'
        msg = ['The following problem(s) were encountered in ',...
            'associating the metadata for the data with variables in ',...
            'the model'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE CELL ARRAY MODEL DATASET OF LOGICALS
function msg = get_validate_cell_array_model_dataset_of_logicals_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_cell_array_model_dataset_of_logicals was not ',...
            'passed the right number of inputs: it requires 3 or 4 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_cell_array_model_dataset_of_logicals must be a ',...
            'MAPS model structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'validate_cell_array_model_dataset_of_logicals must be a ',...
            'string identifying metadata for a particular variable ',...
            'type in the model'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'validate_cell_array_model_dataset_of_logicals must be a ',...
            'MATLAB exception object'];
    case 'ValidationFailure'
        msg = ['The dataset passed in failed validation for the ',...
            'following reason(s):'];
    case 'BadDatasetFormat'
        msg = ['Dataset (2nd input passed to ',...
            'validate_cell_array_incomplete_model_dataset) must be a ',...
            'two-column cell array incomplete model dataset'];
    case 'BadColumn1'
        msg = ['The 1st column in the two-column cell array ',...
            'incomplete model dataset must be a cell string array of ',...
            'metadata relating each of the separate time series of ',...
            'data in the second column to a variable from the model'];
    case 'BadColumn2'
        msg = ['The 2nd column in the two-column cell array ',...
            'incomplete model dataset must contain individual row ',...
            'vectors of numeric or logical data for each of the ',...
            'variables in the incomplete set'];
    case 'BadMetadata'
        msg = ['The following problem(s) were encountered in ',...
            'associating the metadata for the data with variables in ',...
            'the model'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE COMPLETE MODEL DATASET
function msg = get_validate_complete_model_dataset_error(errCode,errArgs)   %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_complete_model_dataset was not passed the ',...
            'right number of inputs: it requires 3 or 4 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_complete_model_dataset ',...
            'must be a MAPS model structure'];
    case 'BadInput3'
        msg = ['3rd input passed to validate_complete_model_dataset ',...
            'must be a string representing the model dataset metadata ',...
            'name (eg ''xMnems'')'];
    case 'BadInput4'
        msg = ['Optional 4th input passed to ',...
            'validate_complete_model_dataset must be an exception'];
    case 'ValidationFailure'
        msg = ['The dataset passed in failed validation for the ',...
            'following reason(s):'];
    case 'BadDatasetFormat'
        msg = ['Dataset (2nd input passed to ',...
            'validate_complete_model_dataset) must be a numeric two-',...
            'dimensional matrix dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE DATA IN MAPS DATASET
function msg = get_validate_data_in_MAPS_dataset_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_data_in_MAPS_dataset was not passed the ',...
            'right number of inputs: it requires 5 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_data_in_MAPS_dataset ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to validate_data_in_MAPS_dataset ',...
            'must be a MAPS dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to validate_data_in_MAPS_dataset ',...
            'must be a two-dimensional cell string array of ',...
            'configuration information for the dataset with at least ',...
            '8 columns'];
    case 'BadInput4'
        msg = ['4th input passed to validate_data_in_MAPS_dataset ',...
            'must be a positive numeric integer representing the ',...
            'number of expected periods in any past data in the dataset'];
    case 'BadInput5'
        msg = ['5th input passed to validate_data_in_MAPS_dataset ',...
            'must be a positive numeric integer representing the ',...
            'number of expected periods in any forecast data in the ',...
            'dataset'];
    case 'BadData'
        msg = 'The following data in the dataset failed validation:';
    case 'UnknownStorageType'
        msg = ['It was not possible to validate the data because ',...
            'of the following unknown and unhandled storage type ',...
            'associated with that data in the input MAPS dataset ',...
            'configuration cell array: ''',errArgs{1},''''];
    case 'BadDataset'
        nonEmptySeriesIds = errArgs(~cellfun(@isempty,errArgs));
        seriesIdsString = create_comma_separated_list(nonEmptySeriesIds);
        seriesStructureFields = strrep(seriesIdsString,', ','.');
        msg = ['''',seriesStructureFields,''' for the following ',...
            'reason(s):'];
    case 'UnknownStorageSubType'
        msg = ['It was not possible to validate the data (given the ',...
            'storage type associated with it) because of the ',...
            'following unknown and unhandled storage sub-type ',...
            'associated with that data in the input MAPS dataset ',...
            'configuration cell array: ''',errArgs{1},''''];
    case 'BadDataDims'
        msg = ['The number of periods in the dataset is not equal to ',...
            errArgs{1},' as expected'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE DECOMP GROUP DEFINITION STRING
function msg = get_validate_decomp_group_definition_string_error(...
    errCode,errArgs)                                                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_decomp_group_definition_string was not ',...
            'passed the right number of inputs: it requires 2, 3 or ',...
            '4 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_decomp_group_definition_string must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_decomp_group_definition_string must be a MAPS ',...
            'decomposition group definition string'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'validate_decomp_group_definition_string must be a ',...
            'structure of parsed decomposition add-on information'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'validate_decomp_group_definition_string must be an ',...
            'exception to add validation failure causes to'];
    case 'BadDecompGroupDef'
        msg = ['The decomposition group definition string must be of ',...
            'the following form: ''[component1;component2;etc]'' ',...
            'where component1 etc are the shocks and model variables ',...
            'to group together in the decomposition appended with the ',...
            'correct time subscripts (''{t}'' for shocks & ''{t-1}'', ',...
            '''{t}'' or ''{t+1}'' for model variables ) or the shock-',...
            'based decomposition component convention of ''sum(shock1)',...
            ''' etc. MAPS found the following syntax errors:'];
    case 'BadGroupKeyDelims'
        msg = ['The definition string must begin with ''['' and end ',...
            'with '']'''];
    case 'MissingGroupContent'
        msg = ['Group components in the definition string must be ',...
            'separated by one and only one semi-colon'];
    case 'RepeatedGroupComponents'
        msg = ['All components of the group must be unique. The ',...
            'following components appear at least twice:'];
    case 'RepeatedGroupComponents:Instance'
        msg = errArgs{1};
    case 'InvalidGroupComponents'
        msg = ['All components must exist in the model (or add-on ',...
            'file) and must have the correct time subscripts. The ',...
            'following components could not be identified:'];
    case 'InvalidGroupComponents:Instance'
        msg = ['''',errArgs{1},''''];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE DECOMP INSTRUCTION STRING
function msg = get_validate_decomp_instruction_string_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_decomp_instruction_string was not passed the ',...
            'right number of inputs: it requires 2, 3 or 4 inputs, ',...
            'but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_decomp_instruction_string must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_decomp_instruction_string must be a MAPS ',...
            'decomposition group definition string'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'validate_decomp_instruction_string must be a structure ',...
            'of parsed decomposition add-on information'];
    case 'BadInput4'
        msg = ['4th input passed to ',...
            'validate_decomp_instruction_string must be an exception ',...
            'to add validation failure causes to'];
    case 'BadDecompInstruction'
        msg = ['Decomposition instruction strings must be of the ',...
            'following form: ''var{t}|decompMethodStr[<nestedInstr1>;',...
            '<nestedInstr2>]:[<group1>;<group2>]'' where the decomp ',...
            'method string is a valid equation name or an instruction ',...
            'to compute a shock-based decomposition or use an ',...
            'existing decomposition instruction and where the nested ',...
            'instructions take the same format of var{t} or var{t-1} ',...
            'followed by a valid decomposition method string. MAPS ',...
            'found the following syntax errors:'];
    case 'BadInstructionStringSyntax'
        msg = ['The decomposition instruction string failed ',...
            'validation of the following basic syntax rule(s):'];
    case 'BadBaseDecompInstruction'
        msg = ['Instructions must begin with a valid base ',...
            'decomposition instruction (i.e. ''var{t}|decompMethodStr'')'];
    case 'BadAdvancedKeyDelim'
        msg = ['Base instructions (i.e. ''var{t}|decompMethodStr'') ',...
            'must be followed by either ''['' to signify a nesting ',...
            'instruction or '':'' to signify a grouping instruction'];
    case 'BadGroupingKeyDelim'
        msg = ['Instructions must contain 1 and only 1 '':'' ',...
            'grouping delimiter symbol, signifying that one or more ',...
            'groups should be applied to the decomposition'];
    case 'BadGroupingKeyDelims'
        msg = ['Grouping instructions must begin with ''['' and end ',...
            'with '']'''];
    case 'MissingGroupNames'
        msg = ['Names in grouping instructions must be separated by ',...
            'one and only one semi-colon'];
    case 'BadNestingKeyDelims'
        msg = ['Nesting instructions must begin with ''['' and end ',...
            'with '']'''];
    case 'UnbalancedNestingDelims'
        msg = ['Nesting instructions must contain balanced ''['' and ',...
            ''']'' brackets'];
    case 'BadCloseBrackets'
        msg = [''']'' in nested instructions must be followed by a ',...
            ''']'' or a '';'''];
    case 'BadOpenBrackets'
        msg = ['''['' in nested instructions must be followed by a ',...
            'variable mnemonic with appropriate time subscript and ',...
            'then ''|'''];
    case 'BadSemiColons'
        msg = [''';'' in nested instructions must be followed by a ',...
            'variable mnemonic with appropiate time subscript and ',...
            'then ''|'''];
    case 'BadDividers'
        msg = ['''|'' within nested instructions must be followed by ',...
            'a decomposition method'];
    case 'BadBaseDecompTimeSubs'
        msg = ['A (base) decomposition (in which terms can be ',...
            'susbstituted out using other decomposition) must be ',...
            'specified as contemporaneous (i.e. the variable to ',...
            'decompose must have a time ''{t}'' subscript'];
    case 'UnknownDecompMethodForModVar'
        msg = ['The decomposition method ''',errArgs{1},''' specified ',...
            'in a decomposition of ''',errArgs{2},''' is not a valid ',...
            'decomposition for a model variable'];
    case 'UnknownDecompMethodForModObs'
        msg = ['The decomposition method ''',errArgs{1},''' specified ',...
            'in a decomposition of ''',errArgs{2},''' is not a valid ',...
            'decomposition for a model observable'];
    case 'UnknownDecompVar'
        msg = ['It is not possible to decompose ''',errArgs{1},''' ',...
            'because it could not be found among the model variables ',...
            'or observables'];
    case 'BadModelEqDecompTimeSubs'
        msg = ['Decompositions of model variables using model ',...
            'equations can either be contemporaneous or lagged, so ',...
            '''',errArgs{1},''' on ''',errArgs{2},''' is not a ',...
            'valid time subscript'];
    case 'BadMeasurementEqDecompTimeSubs'
        msg = ['Decompositions of model observables using measurement ',...
            'must be contemporaneous, so ''',errArgs{1},''' on ''',...
            errArgs{2},''' is not a valid time subscript'];
    case 'BadShockDecompTimeSubs'
        msg = ['Decompositions of model variables into model shocks ',...
            'must be contemporaneous, so ''',errArgs{1},''' on ''',...
            errArgs{2},''' is not a valid time subscript'];
    case 'BadNestedDecompTimeSubs'
        msg = ['Nested decompositions of model variables must be ',...
            'contemporaneous, so ''',errArgs{1},''' on ''',errArgs{2},...
            ''' is not a valid time subscript'];
    case 'InvalidDecompInstruction'
        msg = ['The decomposition of ''',errArgs{1},''' using ',...
            'equation ''',errArgs{2},''' is invalid because the ',...
            'variable (with time subscript) does not appear in that ',...
            'equation'];
    case 'NonUniqueInnerNestedDecomp'
        msg = ['The nested decomposition of ''',errArgs{1},''' using ',...
            '''',errArgs{2},' could not be fully validated because ',...
            'there is more than one nested decomposition of the same ',...
            'name in the list'];
    case 'UnkownInnerNestedDecomp'
        msg = ['The nested decomposition of ''',errArgs{1},''' using ',...
            '''',errArgs{2},''' is invalid because that nested ',...
            'decomposition is specified for ''',errArgs{3},''''];
    case 'BadInnerNestedDecomp'
        msg = ['The nested decomposition of ''',errArgs{1},''' using ',...
            '''',errArgs{2},''' is invalid because that nested ',...
            'decomposition fails the following basic syntax validation:'];
    case 'InvalidUseOfGroups'
        msg = ['The decomposition instruction contains grouping but ',...
            'there are no groups defined in the model or add-on'];
    case 'UnknownGroup'
        msg = ['''',errArgs{1},''' group could not be found among the ',...
            'list of valid groups'];
    case 'NonUniqueGroup'
        msg = ['The grouping instruction ''',errArgs{1},''' could not ',...
            'be validated because more than one group of that name ',...
            'could be found among the list of valid groups'];
    case 'BadGroupingDefinition'
        msg = ['The grouping instruction ''',errArgs{1},''' is ',...
            'invalid because that group fails the following syntax ',...
            'validation'];
    case 'InvalidNestedDecompInstruction'
        msg = ['The instruction to substitute out ''',errArgs{1},...
            ''' is invalid because (after taking into account all ',...
            'other substitutions) it does not appear in the ',...
            'decomposition in which it is to be substituted out'];
    case 'BadGroupCombination'
        msg = ['The combination of groupings in the decomposition is ',...
            'invalid. The following components of the group were ',...
            'found in two or more groups:'];
    case 'BadGroupCombination:Instance'
        msg = ['''',errArgs{1},''''];
    case 'GroupingIncompatibleWithDecomp'
        msg = ['The specified grouping is incompatible with the ',...
            'decomposition. The following components of the group are ',...
            'are not valid in the decomposition:'];
    case 'GroupingIncompatibleWithDecomp:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE FORECAST RUN DATASET OUTPUT
function msg = get_validate_forecast_run_dataset_output_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_forecast_run_dataset_output was not passed the ',...
            'right number of inputs: it requires 5 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_forecast_run_dataset_output must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_forecast_run_dataset_output must be a MAPS ',...
            'forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to validate_data_in_MAPS_dataset ',...
            'must be a positive numeric integer representing the ',...
            'number of expected periods in any past data in the ',...
            'dataset'];
    case 'BadInput4'
        msg = ['4th input passed to validate_data_in_MAPS_dataset ',...
            'must be a positive numeric integer representing the ',...
            'number of expected periods in any forecast data in the ',...
            'dataset'];
    case 'BadRunData'
        msg = ['The forecast run dataset contained the following ',...
            'error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE INCOMPLETE MODEL DATASET
function msg = get_validate_incomplete_model_dataset_error(errCode,errArgs) %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_incomplete_model_dataset was not passed the ',...
            'right number of inputs: it requires 2 or 3 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput2'
        msg = ['2nd input passed to validate_incomplete_model_dataset ',...
            'column cell string array of model metadata'];
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'validate_incomplete_model_dataset must be an exception'];
    case 'ValidationFailure'
        msg = ['The dataset passed in failed validation for the ',...
            'following reason(s):'];
    case 'BadDatsetFormat'
        msg = ['Dataset (2nd input passed to ',...
            'validate_incomplete_model_dataset) must be a numeric two-',...
            'dimensional matrix dataset'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE LSS MODEL EQUATION MATRICES
function msg = get_validate_LSS_model_equation_matrices_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_LSS_model_equation was not passed the right ',...
            'number of inputs: it requires 4 inputs, but received ',...
            errArgs{1}];
    case 'BadHB'
        msg = ['The backward loadings from the linear state space ',...
            'model''s model equations (''HB'' - the 1st input passed ',...
            'to the validation function) must be a finite, real, ',...
            'square matrix'];
    case 'BadHC'
        msg = ['The contemporaneous loadings from the linear state ',...
            'space model''s model equations (''HC'' - the 2nd input ',...
            'passed to the validation function) must be a finite, ',...
            'real, square matrix'];
    case 'BadHF'
        msg = ['The forward loadings from the linear state space ',...
            'model''s model equations (''HF'' - the 3rd input passed ',...
            'to the validation function) must be a finite, real, ',...
            'square matrix'];
    case 'BadPSI'
        msg = ['The loadings on shocks from the linear state space ',...
            'model''s model equations (''PSI'' - the 4th input passed ',...
            'to the validation function) must be a finite, real, ',...
            'two-dimensional, numeric matrix'];
    case 'HBincompatibleHC'
        msg = ['The backward loadings  (''HB'' - the 1st input passed ',...
            'to the validation function) and the contemporaneous ',...
            'loadings (''HC'' - the 2nd input passed to the ',...
            'validation function) from the linear state space ',...
            'model''s model equations are incompatible with each ',...
            'other because they do not have the same number of rows'];
    case 'HFincompatibleHC'
        msg = ['The forward loadings  (''HF'' - the 3rd input passed ',...
            'to the validation function) and the contemporaneous ',...
            'loadings (''HC'' - the 2nd input passed to the ',...
            'validation function) from the linear state space ',...
            'model''s model equations are incompatible with each ',...
            'other because they do not have the same number of rows'];
    case 'PSIincompatibleHC'
        msg = ['The shock loadings  (''PSI'' - the 4th input passed ',...
            'to the validation function) and the contemporaneous ',...
            'loadings (''HC'' - the 2nd input passed to the ',...
            'validation function) from the linear state space ',...
            'model''s model equations are incompatible with each ',...
            'other because they do not have the same number of rows'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE LSS MODEL
function msg = get_validate_LSS_model_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_LSS_model was not passed the right number of ',...
            'inputs: it requires 2 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_LSS_model must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to validate_LSS_model must be a ',...
            'string representing the name of a .maps file to create ',...
            'as part of the validation'];
    case 'BadModelClass'
        msg = ['MAPS model input to validate_LSS_model must be of the ',...
            'linear state space model class'];
    case 'ModelFileCreationFailure'
        msg = ['MAPS was unable to validate the model input because ',...
            'its model file creation function (used as part of the ',...
            'validation) failed with the following error'];
    case 'ParseFailure'
        msg = ['The input linear state space model failed validation ',...
            'because it could not be (re-)parsed into MAPS. MAPS'' ',...
            'linear state space model parser returned the following ',...
            'error'];
    case 'ModelNumericsDifferences'
        msg = ['The input linear state space model failed validation ',...
            'because its numerical content could not be reproduced ',...
            'within a tolerance of ',errArgs{1}];
    case 'ModelNumericsProblem'
        msg = ['The input linear state space model failed validation ',...
            'because it could not be re-solved.  MAPS'' linear state ',...
            'space model numeric creater returned the following error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE LSS MODEL JUDGEMENTS DATASET
function msg = get_validate_LSS_model_judgements_dataset_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_LSS_model_judgements_dataset was not passed ',...
            'the right number of inputs: it requires 2 inputs, but ',...
            'only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_LSS_model_judgements_dataset must be a MAPS ',...
            'linear state space model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_LSS_model_judgements_dataset must be a linear ',...
            'state space model judgements dataset structure'];
    case 'BadModelClass'
        msg = ['MAPS model input to ',...
            'validate_LSS_model_judgements_dataset must be of the ',...
            'linear state space model class'];
    case 'MissingField'
        msg = ['Judgements dataset structure must have at least one ',...
            'of the following fields: ''AnticipatedFixes'', ',...
            '''UnanticipatedFixes'', ''Shocks'' or ''timeVaryingTrends'''];
    case 'BadJudgementsInput'
        msg = ['MAPS found the following errors in the input ',...
            'judgements dataset structure:'];
    case 'BadJudgementsInput:BadField'
        msg = ['The ''',errArgs{1},''' field contained the following ',...
            'error(s):'];
    case 'BadJudgementsInput:BadShocksField'
        msg = 'The ''Shocks'' field must be a structure';
    case 'BadJudgementsInput:MissingShocksField'
        msg = ['The ''Shocks'' field must be a structure with an ',...
            '''anticipated'' field and/or an ''unanticipated'' field'];
    case 'BadJudgementsInput:UnexpectedAnticipatedJudgement'
        msg = ['The judgement dataset structure included anticipated ',...
            'fixes, but the input linear state space model is ',...
            'backward-looking'];
    case 'BadJudgementsInput:UnexpectedModelObservableJudgement'
        msg = ['The judgement dataset structure included fixes to ',...
            'model observables, but the input linear state space ',...
            'model does not have measurement equations'];
    case 'BadJudgementsInput:UnexpectedRawObservableJudgement'
        msg = ['The judgement dataset structure included fixes to ',...
            'raw observables, but the input linear state space ',...
            'model does not have data transformation equations'];
    case 'BadJudgementsInput:UnexpectedTimeVaryingTrendJudgement'
        msg = ['The judgement dataset structure included fixes to ',...
            'time-varying deterministic trends, but the input linear ',...
            'state space model does not have data transformation ',...
            'equations containing time-varying trends'];
    case 'BadFixesInput'
        msg = 'The fix instructions must be represented as a structure';
    case 'BadFixesStructure'
        msg = 'The fixes structure contained the following error(s):';
    case 'BadFixesStructure:MissingShockUsagesField'
        msg = ['Fix instructions must contain a ''shockUsages'' field ',...
            'containing information about the shocks to be used to ',...
            'implement the fixes'];
    case 'BadFixesStructure:MissingFieldInFixes'
        msg = ['Fix instructions must contain either a ',...
            '''modelVariables'' field or a ''modelObservables'' field ',...
            'or a ''rawObservables'' (i.e. at least one variable ',...
            'must be being fixed)'];
    case 'BadFixesStructure:BadFieldInFixes'
        msg = ['''',errArgs{1},''' field contained the following ',...
            'error(s):'];
    case 'BadJudgementField'
        msg = ['The field containing the judgement instructions must ',...
            'represented as a two-column cell array'];
    case 'BadJudgementCell'
        msg = 'The judgement cell contained the following error(s):';
    case 'BadJudgementCell:BadMetadata'
        msg = ['First column of information in judgement cell must ',...
            'be a non-empty cell string array of metadata ',...
            'describing the variables to impose judgement on'];
    case 'BadJudgementCell:BadData'
        msg = ['Second column of information in judgement cell must ',...
            'contain non-empty, numeric row vectors with at least one ',...
            'element in each row vector being non-NaN. The following ',...
            'elements of the second column of the cell were invalid: ',...
            errArgs{1}];
    case 'BadShockUsageCell'
        msg = ['Shock usage cell arrays in fixes input must ',...
            'contain row vectors of 0 and 1 indicators with at ',...
            'least one element in each row vector being non-zero. The ',...
            'following rows of the cell were invalid: ',errArgs{1}];
    case 'InvalidJudgementMetadata'
        msg = ['One or more of the judgement metadata inputs are ',...
            'inconsistent with the model input. MAPS encountered ',...
            'the following error(s):'];
    case 'InvalidJudgementMetadata:Instance'
        msg = ['The model index number lookup function returned the ',...
            'following excepions when trying to convert string ',...
            'metadata for ',errArgs{1},' to index numbers'];
    case 'RulesValidationFailure'
        msg = ['The judgements dataset structure failed to meet the ',...
            'following rule(s) of imposing judgement on linear state ',...
            'space model projections:'];
    case 'Rule1ValidationFailure'
        msg = ['The total number of variables being fixed cannot ',...
            'exceed the number of shocks used to achieve those fixes ',...
            '(except where there are no fixes in which case, there ',...
            'should be no shocks) in any period of the projection. ',...
            'MAPS found the following exception(s):'];
    case 'Rule1ValidationFailure:numFixesExceedsShocks'
        msg = ['The following fix type contained instances where ',...
            'the number of fixes exceeded the number of shocks used:'];
    case 'Rule1ValidationFailure:numShocksExceedsZeroFixes'
        msg = ['The following fix type contained instances where ',...
            'there were no fixes, but some shocks were specified:'];
    case 'Rule1ValidationFailure:Instance'
        msg = ['In the fixes specified as ',errArgs{1},' in forecast ',...
            'quarters ',errArgs{2}];
    case 'Rule2ValidationFailure'
        msg = ['The same variable cannot be simultaneously fixed ',...
            'under both the anticipated and unanticipated assumptions ',...
            'in the same period. Similarly, the same shock cannot be ',...
            'used to implement both an anticipated and an ',...
            'unanticipated fix in the same period. MAPS found the ',...
            'following exceptions:'];
    case 'Rule2ValidationFailure:Instance'
        msg = ['The following exceptions were found in ',errArgs{1},...
            ' and ',errArgs{2},':'];
    case 'Rule3ValidationFailure'
        msg = ['Judgements cannot be made to the same endogenous ',...
            'variable in different spaces in the same period. MAPS ',...
            'found the following exceptions:'];
    case 'Rule3ValidationFailure:Instance'
        msg = ['The following exceptions were found when both ',...
            errArgs{1},' and ',errArgs{2},' were converted to model ',...
            'space:'];
    case 'Rule4ValidationFailure'
        msg = ['Fixes made in raw observable space must be made from ',...
            'the start of the forecast horizon in a continuous ',...
            'fashion. MAPS found the following exceptions:'];
    case 'Rule4ValidationFailure:NotFromStart'
        msg = ['The following raw observables fixes did not start ',...
            'from the beginning of the forecast horizon:'];
    case 'Rule4ValidationFailure:Discontinuous'
        msg = 'The following raw observables fixes were discotinuous:';
    case 'Rule4ValidationFailure:Instance'
        msg = errArgs{1};
    case 'Rule5ValidationFailure'
        msg = ['The same shock cannot have judgement applied to ',...
            'it and be used to implement a fix in the same period. ',...
            'MAPS found the following exceptions:'];
    case 'Rule5ValidationFailure:Instance'
        msg = ['The following exceptions were found in ',errArgs{1},...
            ' and ',errArgs{2},':'];
    case 'InvalidOverlap'
        msg = ['''',errArgs{1},''' in forecast quarters: ',errArgs{2}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE LSS MODEL SOLUTION MATRICES
function msg = get_validate_LSS_model_solution_matrices_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_LSS_model_solution_matrices was not passed ',...
            'the right number of inputs: it requires 1, 2 or 3 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadB'
        msg = ['The loadings on the lagged model variables from the ',...
            'linear state space model solution (''B'' - the 1st ',...
            'input passed to the validation function) must be a ',...
            'finite, real, two-dimensional, square, numeric matrix'];
    case 'BadPHI'
        msg = ['The loadings on the shocks from the linear state ',...
            'space model solution (''PHI'' - the 2nd input passed to ',...
            'the validation function) must be a finite, real, two-',...
            'dimensional, square, numeric matrix'];
    case 'BadF'
        msg = ['The (additional) loadings on the anticipated shocks ',...
            'from the linear state space model solution (''F'' - the ',...
            '3rd input passed to the validation function) must be a ',...
            'finite, real, two-dimensional, square, numeric matrix'];
    case 'BincompatiblePHI'
        msg = ['The loadings on the lagged model variables from the ',...
            'linear state space model solution (''B'' - the 1st ',...
            'input passed to the validation function) and the ',...
            'loadings on the shocks from the linear state space model ',...
            'solution (''PHI'' - the 2nd input passed to the ',...
            'validation function) are incompatible with each other ',...
            'because they do not have the same number of rows'];
    case 'BincompatibleF'
        msg = ['The loadings on the lagged model variables from the ',...
            'linear state space model solution (''B'' - the 1st ',...
            'input passed to the validation function) and the ',...
            '(additional) loadings on the anticipated shocks from the ',...
            'linear state space model solution (''F'' - the 3rd ',...
            'input passed to the validation function) are ',...
            'incompatible with each other because they do not have ',...
            'the same number of rows'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE MAPS DATASET CONTENT
function msg = get_validate_MAPS_dataset_content_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_MAPS_dataset_content was not passed the ',...
            'right number of inputs: it requires 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_MAPS_dataset_content ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to validate_MAPS_dataset_content ',...
            'must be a complete MAPS forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to validate_MAPS_dataset_content ',...
            'must be a two-dimensional cell string of configuration ',...
            'information for the MAPS dataset structure with at least ',...
            '7 columns'];
    case 'DataMissing'
        msg = 'The following data was missing from the dataset:';
    case 'DataMissing:Instance'
        nSeriesIds = size(errArgs,2)-1;
        seriesIds = errArgs(1:nSeriesIds);
        nonEmptySeriesIds = seriesIds(~cellfun(@isempty,seriesIds));
        seriesIdsString = create_comma_separated_list(nonEmptySeriesIds);
        seriesStructureFields = strrep(seriesIdsString,', ','.');
        msg = ['''',seriesStructureFields,''' which is ',...
            errArgs{nSeriesIds+1}];
    case 'DataUnpackFailure'
        nonEmptySeriesIds = errArgs(~cellfun(@isempty,errArgs));
        seriesIdsString = create_comma_separated_list(nonEmptySeriesIds);
        seriesStructureFields = strrep(seriesIdsString,', ','.');
        msg = ['MAPS could not validate the input dataset because of ',...
            'an apparent incompatibility in the input dataset and the ',...
            'the input dataset configuration. The problem ocurred in ',...
            'attempting to unpack the data assoicated with ''',...
            seriesStructureFields,'''. MAPS'' dataset unpack helper ',...
            'returned the following error'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE MEASUREMENT EQUATIONS MATRICES
function msg = get_validate_measurement_equation_matrices_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_measurement_equation_matrices was not passed ',...
            'the right number of inputs: it requires 2 or 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadD'
        msg = ['The constants from the linear state space model ',...
            'measurement equations (''D'' - the 1st input passed to ',...
            'the validation function) must be a finite, real, two-',...
            'dimensional, numeric column vector'];
    case 'BadG'
        msg = ['The loadings on model variables from the linear state ',...
            'space model measurement equations (''G'' - the 2nd input ',...
            'passed to the validation function) must be a finite, ',...
            'real, two-dimensional, numeric matrix'];
    case 'BadV'
        msg = ['The loadings on measurement errors from the linear ',...
            'state space model measurement equations (''V'' - the 3rd ',...
            'input passed to the validation function) must be a ',...
            'finite, real, two-dimensional, numeric matrix'];
    case 'DincompatibleG'
        msg = ['The constants from the linear state space model ',...
            'measurement equations (''D'' - the 1st input passed to ',...
            'the validation function) and the loadings on model ',...
            'variables from the linear state space model measurement ',...
            'equations (''G'' - the 2nd input passed to the ',...
            'validation function) are incompatible with each other ',...
            'because they do not have the same number of rows'];
    case 'DincompatibleV'
        msg = ['The constants from the linear state space model ',...
            'measurement equations (''D'' - the 1st input passed to ',...
            'the validation function) and the loadings on measurement ',...
            'errors from the linear state space model measurement ',...
            'equations (''V'' - the 3rd input passed to the ',...
            'validation function) are incompatible with each other ',...
            'because they do not have the same number of rows'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE MODEL DATASET CONTAINS ONLY LOGICALS
function msg = get_validate_model_dataset_contains_only_logicals_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_model_dataset_contains_only_logicals was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_model_dataset_contains_only_logicals must be a ',...
            'numeric or logical two-dimensional matrix dataset'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_model_dataset_contains_only_logicals must be a ',...
            'column cell string array of model metadata'];
    case 'MetadataDimsInconsistentWithData'
        msg = ['The metadata passed in was not consistent with the ',...
            'dataset passed in. They must have the same number of ',...
            'rows representing the number of variables in the dataset'];
    case 'BadDataset'
        msg = ['The following series did not contain only logical ',...
            '(false or true) or equivalent (0 or 1) values:'];
    case 'BadDataset:BadSeries'
        msg = [errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE MODEL DATASET DOES NOT CONTAIN INF
function msg = get_validate_model_dataset_does_not_contain_inf_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_model_dataset_does_not_contain_inf was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_model_dataset_does_not_contain_inf must be a ',...
            'numeric two-dimensional matrix dataset'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_model_dataset_does_not_contain_inf must be a ',...
            'column cell string array of model metadata'];
    case 'MetadataDimsInconsistentWithData'
        msg = ['The metadata passed in was not consistent with the ',...
            'dataset passed in. They must have the same number of ',...
            'rows representing the number of variables in the dataset'];
    case 'BadDataset'
        msg = ['The following contained one or more inf (or -inf) ',...
            'values:'];
    case 'BadDataset:BadSeries'
        msg = [errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE MODEL DATASET DOES NOT CONTAIN NAN
function msg = get_validate_model_dataset_does_not_contain_nan_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_model_dataset_does_not_contain_nan was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_model_dataset_does_not_contain_nan must be a ',...
            'numeric two-dimensional matrix dataset'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_model_dataset_does_not_contain_nan must be a ',...
            'column cell string array of model metadata'];
    case 'MetadataDimsInconsistentWithData'
        msg = ['The metadata passed in was not consistent with the ',...
            'dataset passed in. They must have the same number of ',...
            'rows representing the number of variables in the dataset'];
    case 'BadDataset'
        msg = 'The following contained one or more nan values:';
    case 'BadDataset:BadSeries'
        msg = [errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE MODEL DATASET IS REAL
function msg = get_validate_model_dataset_is_real_error(errCode,errArgs)    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_model_dataset_is_real was not passed the ',...
            'right number of inputs: it requires 2 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_model_dataset_is_real ',...
            'must be a numeric two-dimensional matrix dataset'];
    case 'BadInput2'
        msg = ['2nd input passed to validate_model_dataset_is_real ',...
            'must be a column cell string array of model metadata'];
    case 'MetadataDimsInconsistentWithData'
        msg = ['The metadata passed in was not consistent with the ',...
            'dataset passed in. They must have the same number of ',...
            'rows representing the number of variables in the dataset'];
    case 'BadDataset'
        msg = ['The following contained one or more non-real ',...
            '(complex) values:'];
    case 'BadDataset:BadSeries'
        msg = [errArgs{1}];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE MODEL
function msg = get_validate_model_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_model was not passed the right number of ',...
            'inputs: it requires 2 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_model must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to validate_model must be a ',...
            'string representing the name of a .maps file to create ',...
            'as part of the validation'];
    case 'ModelClassDeterminationFailure'
        msg = ['MAPS was unable to validate the model passed in ',...
            'because it could not determine whether the input ',...
            'model was linear state space or non-linear backward-',...
            'looking. MAPS'' model unpacker returned the following ',...
            'error:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE NLBL FORECAST DATASET
function msg = get_validate_NLBL_forecast_dataset_error(errCode,errArgs)                    %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_NLBL_forecast_dataset was not passed the ',...
            'right number of inputs: it requires 3 inputs, but only ',...
            'received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to validate_NLBL_forecast_dataset ',...
            'must be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to validate_NLBL_forecast_dataset ',...
            'must be a NLBL model forecast run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to ',...
            'validate_NLBL_forecast_dataset must be an exception'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE NLBL MODEL FORECAST JUDGEMENTS
function msg = ...
    get_validate_NLBL_model_forecast_judgements_error(errCode,errArgs)     %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_NLBL_model_forecast_judgements was not ',...
            'passed the right number of inputs: it requires 3 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_NLBL_model_forecast_judgements ',...
            'must be a structure containing information about the ',...
            'forecast judgements'];
    case 'RulesValidationFailure'
        msg = ['The judgements dataset structure failed to meet the ',...
            'following rule(s) for imposing judgement on NLBL ',...
            'model projections:'];
    case 'Rule1ValidationFailure'
        msg = ['The total number of variables being fixed in any ',...
            'given quarter of the forecast must be equal to the ',...
            'number of residuals being used to achieve those fixes ',...
            'in that quarter. MAPS found the following exception(s):'];
    case 'Rule1ValidationFailure:numResUsagesExceedsFixes'
        msg = ['The number of residual usages exceeds the number of ',...
            'fixes:'];
    case 'Rule1ValidationFailure:numFixesExceedsResUsages'
        msg = ['The number of fixes exceeds the number of residual ',...
            'usages:'];
    case 'Rule1ValidationFailure:Instance'
        msg = ['In the fixes specified in the forecast ',...
            'quarter(s) ',errArgs{1},'.'];
    case 'Rule2ValidationFailure'
        msg = ['It is not possible to fix a residual that is also ',...
            'being used to fix an endogenous variable in the ',...
            'same forecast quarter.  MAPS found the following ',...
            'exceptions(s):'];
    case  'Rule2ValidationFailure:Instance'
        msg = ['In the fixes specified in the forecast ',...
            'quarter(s) ',errArgs{1},'.'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE PROVISIONAL RUN DATASET OUTPUT
function msg = get_validate_provisional_run_dataset_output_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_provisional_run_dataset_output was not ',...
            'passed the right number of inputs: it requires 5 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_provisional_run_dataset_output must be a MAPS ',...
            'model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_provisional_run_dataset_output must be a MAPS ',...
            'provisional run dataset structure'];
    case 'BadInput3'
        msg = ['3rd input passed to validate_data_in_MAPS_dataset ',...
            'must be a positive numeric integer representing the ',...
            'number of expected periods in any past data in the ',...
            'dataset'];
    case 'BadInput4'
        msg = ['4th input passed to validate_data_in_MAPS_dataset ',...
            'must be a positive numeric integer representing the ',...
            'number of expected periods in any provisional data in ',...
            'the dataset'];
    case 'BadProvRunData'
        msg = ['The provisional run dataset contained the following ',...
            'error(s):'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE RETRANSFORMED RAW OBSERVABLE DATASET
function msg = get_validate_retransformed_raw_observable_dataset_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_retransformed_raw_observable_dataset was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_retransformed_raw_observable_dataset must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_retransformed_raw_observable_dataset must be a ',...
            'numeric two-dimensional raw observable dataset'];
    case 'BadObsData'
        msg = ['The forecast dataset for the raw observables contains ',...
            'one or more non-real and/or non-finite values - see ',...
            'details below.\n\nThere are two common causes of this:',...
            '\n\n First, the raw observables may have blown up to ',...
            'infinity if, in the event of imposing judgement or ',...
            'filtering the data, the corresponding model ',...
            'observable(s) forecast became sufficently large to push ',...
            'values for raw observables on retransformation (using ',...
            'the inverted data transformation equations) above the ',...
            'largest number that can be represented in MATLAB.\n\n ',...
            'Second, a raw observable could take on NaN, -inf or ',...
            'complex (non-real) values if the associated data ',...
            'transformation equation contains the log function and ',...
            'judgements made to time-varying trends include 0 or ',...
            'negative values in one or more periods'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE RUN DATASET FOR LSS MODEL PROJECT MACROS
function msg = ...
    get_validate_run_dataset_for_LSS_model_project_macros_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_run_dataset_for_LSS_model_project_macros was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_run_dataset_for_LSS_model_project_macros must ',...
            'be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_run_dataset_for_LSS_model_project_macros must ',...
            'be a complete MAPS forecast run dataset structure'];
    case 'BadModelClass'
        msg = ['MAPS model input to any of MAPS'' linear state space ',...
            'model project macros must be of the linear state space ',...
            'class'];
    case 'BadRunData'
        msg = ['MAPS could not run the lienar state space model ',...
            'projection macro because of the following problems with ',...
            'the forecast run dataset input:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE RUN DATASET FOR LSS MODEL PROJECT MACROS
function msg = ...
    get_validate_run_dataset_for_NLBL_model_project_macros_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_run_dataset_for_NLBL_model_project_macros was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_run_dataset_for_NLBL_model_project_macros must ',...
            'be a MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_run_dataset_for_NLBL_model_project_macros must ',...
            'be a complete MAPS forecast run dataset structure'];
    case 'BadModelClass'
        msg = ['MAPS model input to any of MAPS'' non-linear backward',...
            'looking model project macros must be of the non-linear',...
            'backward looking model class'];
    case 'BadRunData'
        msg = ['MAPS could not run the non-linear backward looking ',...
            'model projection macro because of the following problems ',...
            'with the forecast run dataset input:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE RUN DATASET OUTPUTS FROM CUSTOM MACRO
function msg = get_validate_run_dataset_outputs_from_custom_macro_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_run_dataset_outputs_from_custom_macro was ',...
            'not passed the right number of inputs: it requires 5 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadForecastRunsOutput'
        msg = ['The forecast run(s) output from the custom macro ',...
            'must be an nRuns*1 cell array of MAPS forecast run ',...
            'dataset structures'];
    case 'BadProvRunsOutput'
        msg = ['The provisional run(s) output from the custom macro ',...
            '(containing the provisional run data that was used ',...
            'to execute each forecast run) must be an nRuns*1 cell ',...
            'array of MAPS provisional run dataset structures'];
    case 'InconsistentOutputDims'
        msg = ['The number of rows in the forecast run(s) output from ',...
            'the custom macro (referencing the number of forecast ',...
            'runs executed in the custom macro) must be the same as ',...
            'the number of rows in the provisional run(s) output ',...
            '(containing the provisional run data that was used to ',...
            'execute each forecast run)'];
    case 'BadCustomMacroOutputs'
        msg = ['MAPS was unable to compile the custom macro outputs ',...
            'for EASE because outputs from the following run(s) ',...
            'failed validation - please see the MAPS custom macro ',...
            'output rules for more details:'];
    case 'BadCustomMacroOutputs:Instance'
        msg = ['Run ',errArgs{1},':'];
    case 'PastDataInProvRunButNotInRun'
        msg = ['The provisional run dataset output contained a past ',...
            'data field (suggesting that the run was generated using ',...
            'new back data) but the forecast run dataset output ',...
            'did not include that new back data. If the run did not ',...
            'include new back data, please remove the past data from ',...
            'the provisional run dataset output. If it did, please ',...
            'make sure that the forecast run dataset output also ',...
            'includes the new past data'];
    case 'NewPastDataInRunButNotInProvRun'
        msg = ['The forecast run dataset output contained new past ',...
            'data (suggesting that the run was generated using ',...
            'new back data) but the provisional run dataset output ',...
            'did not include that new back data. If the run did not ',...
            'include new back data, please remove the past data from ',...
            'the forecast run dataset output. If it did, please make ',...
            'sure that the provisional run dataset output also ',...
            'includes the new past data'];
    case 'InconsistentPastData'
        msg = ['Both the forecast run and provisional run datasets ',...
            'output contained past data fields (suggesting that the ',...
            'run was generated using new back data), but the data in ',...
            'both (i.e. the overlapping data) was not identical. This ',...
            'is invalid because the data in the provisional run is ',...
            'treated as having driven the forecast run output and ',...
            'therefore should be the same'];
    case 'InconsistentPastConstraintData'
        msg = ['The data in the past and constraint fields of the ',...
            'forecast run dataset output must be consistent with ',...
            'each other in that data in overlapping periods must be ',...
            'identical'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE STRINGS BELONG TO REFERENCE SET
function msg = get_validate_strings_belong_to_reference_set_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_strings_belong_to_reference_set was not ',...
            'passed the right number of inputs: it requires 2 or ',...
            '3 inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_strings_belong_to_reference_set must be a ',...
            'string or vector cell array of strings to validate ',...
            'against a reference set'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_strings_belong_to_reference_set must be a ',...
            'vector cell array of reference strings to validate ',...
            'membership of the input strings'];   
    case 'BadInput3'
        msg = ['Optional 3rd input passed to ',...
            'validate_strings_belong_to_reference_set must be a ',...
            'MAPS exception message identifier string to construct a ',...
            'custom error message in the event that one or more of ',...
            'the input strings do not belong to the reference set'];
    case 'InvalidStrings'
        msg = ['The following strings do not belong to the reference ',...
            'set:'];
    case 'InvalidStrings:Instance'
        msg = errArgs{1};
    otherwise
        throw_missing_error_code_error(errCode);
end
end        

%% VALIDATE TRANSFORMED MODEL OBSERVABLE DATASET
function msg = get_validate_transformed_model_observable_dataset_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_transformed_model_observable_dataset was not ',...
            'passed the right number of inputs: it requires 2 inputs, ',...
            'but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_transformed_model_observable_dataset must be a ',...
            'MAPS model structure'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_transformed_model_observable_dataset must be a ',...
            'numeric two-dimensional model observable dataset'];
    case 'BadObsData'
        msg = ['The dataset for the model observables over the past ',...
            'contains one or more non-real and/or non-finite values ',...
            '- see details below.\n\nThere are three common causes of ',...
            'this:\n\n First, the transformation of a raw observable ',...
            'to model observable space generates complex (non-real) ',...
            'numbers if the corresponding data transformation ',...
            'equation contains the log transform and the raw ',...
            'observable (or any time-varying trend) data series ',...
            'contain one or more negative values.\n\n Second, the ',...
            'transformation of a raw observable to model observable ',...
            'space generates inf or -inf values if the corresponding ',...
            'data transformation equation contains the log transform ',...
            'and the raw observable (or any time-varying trend) data ',...
            'series contain one or more zero values or if the data ',...
            'transformation contains the reciprocal of a time-varying ',...
            'trend and the time-varying trend data takes on one or ',...
            'more zero values.\n\n Third, the transformation of a raw ',...
            'observable to model observable space generates one or ',...
            'more NaN values if the corresponding data transformation ',...
            'equation contains the reciprocal of a time-varying trend ',...
            'and both the raw observable and time-varying trend data ',...
            'contain zeros in the same period or if the data ',...
            'transformation equation generates an inf (or -inf) - see ',...
            'second cause above - in two consecutive time periods'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% VALIDATE TRANSFORMED MODEL OBSERVABLE JUDGEMENTS
function msg = ...
    get_validate_transformed_model_observable_judgements_error(...
    errCode,errArgs)                                                        %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['validate_transformed_model_observable_judgements was ',...
            'not passed the right number of inputs: it requires 2 ',...
            'inputs, but only received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input passed to ',...
            'validate_transformed_model_observable_judgements must be ',...
            'a numeric two-dimensional model observable dataset'];
    case 'BadInput2'
        msg = ['2nd input passed to ',...
            'validate_transformed_model_observable_judgements must be ',...
            'a column cell string array of metadata for the judgements'];
    case 'BadObsData'
        msg = ['The transformed judgement dataset for the model ',...
            'observables, which reflects judgements made to raw ',...
            'observables, contains one or more non-real and/or inf ',...
            '(or -inf) values - see details below.\n\nThere are ',...
            'three common causes of this:\n\n First, the ',...
            'transformation of a judgement made to a raw observable ',...
            'generates complex (non-real) numbers in model observable ',...
            'space if the corresponding data transformation equation ',...
            'contains the log transform and the raw observable (or ',...
            'any time-varying trend) judgements include one or more ',...
            'negative values.\n\n Second, the transformation of a raw ',...
            'observable judgement to model observable space generates ',...
            'inf or -inf values if the corresponding data ',...
            'transformation equation contains the log transform and ',...
            'the raw observable (or any time-varying trend) ',...
            'judgements include one or more zero values or if the ',...
            'data transformation contains the reciprocal of a time-',...
            'varying trend and any time-varying trend judgement ',...
            'includes one or more zero values.\n\n Third, the ',...
            'transformation of a raw observable judgement to model ',...
            'observable space generates one or more NaN values if the ',...
            'corresponding data transformation equation contains the ',...
            'reciprocal of a time-varying trend and both the raw ',...
            'observable and time-varying trend data contain zeros in ',...
            'the same period or if the data transformation equation ',...
            'generates an inf (or -inf) - see second cause above - ',...
            'in two consecutive time periods'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% WRITE TO CSV
function msg = get_write_to_CSV_error(errCode,errArgs)                      %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['write_to_CSV was not passed the right number of ',...
            'inputs: it requires 2 input, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by write_to_CSV must be a ',...
            'cell array of data to write out to a .csv file'];
    case 'BadInput2'
        msg = ['2nd input received by write_to_CSV must be a ',...
            'string representing a .csv file to write to'];
    case 'UnhandledDataType'
        msg = ['Cell array of information to write out to .csv file ',...
            'passed in as 1st input must contain either numeric or ',...
            'string data or a combination of the two'];
    case 'FileOpenFailure'
        msg = ['It was not possible to open the .csv file. On ',...
            'attempting to open the file, MATLAB returned the ',...
            'following error message:'];
    case 'FileWriteFailure'
        msg = ['For some unknown reason, it was not possible to wite ',...
            '''',errArgs{1},''' out to .csv. MATLAB returned the ',...
            'following error:'];
    case 'FileCloseFailure'
        msg = ['For some unknown reason, it was not possible to close ',...
            'the file after writing out to it'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% WRITE TO MAPS TEXT FILE
function msg = get_write_to_MAPS_text_file_error(errCode,errArgs)           %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['write_to_MAPS_text_file was not passed the right ',...
            'number of inputs: it requires 2 input, but received ',...
            errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by write_to_MAPS_text_file must ',...
            'be a column cell string array of data to write out to a ',...
            '.maps text file'];
    case 'BadInput2'
        msg = ['2nd input received by write_to_MAPS_text_file must be ',...
            'a .maps file name string'];
    case 'InvalidFileName'
        msg = ['MAPS could not write out the .maps file because ''',...
            errArgs{1},''' is not a valid .maps file name for the ',...
            'following reason:'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% WRITE TO TEXT FILE
function msg = get_write_to_text_file_error(errCode,errArgs)                %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['write_to_text_file was not passed the right number of ',...
            'inputs: it requires 2 or 3 inputs, but received ',errArgs{1}];
    case 'BadInput1'
        msg = ['1st input received by write_to_text_file must be a ',...
            'file name string'];        
    case 'BadInput2'
        msg = ['2nd input received by write_to_text_file must be a ',...
            'string or column cell string array of data to write out ',...
            'to the specified text file'];
    case 'BadInput3'
        msg = ['Optional 3rd input received by write_to_text_file ',...
            'must be a logical scalar dictating whether any existing ',...
            'content in the file should be overwritten (true) or ',...
            'added to (false)'];
    case 'BadFileNameExtension'
        msg = ['The file name passed in must have a ''.maps'' or ',...
            '''.txt'' extension'];
    case 'FileOpenFailure'
        msg = ['It was not possible to open the file for some ',...
            'unexpected reason. On attempting to open the file, ',...
            '(using fopen) MATLAB returned the following error message:'];
    case 'FileWriteFailure'
        msg = ['For some unknown reason, it was not possible to write ',...
            'the line containing ''',errArgs{1},''' out to a the text ',...
            'file. MATLAB returned the following error:'];
    case 'FileCloseFailure'
        msg = ['For some unknown reason, it was not possible to close ',...
            'the file after writing out to it'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% YTYPCT
function msg = get_ytypct_error(errCode,~)                                  %#ok<DEFNU>
switch errCode
    case 'BadNargin'
        msg = ['ytypct was not passed the right number of inputs: it '...
            'requires 1 but did not receive any'];
    case 'BadInput1'
        msg = ['1st input received by ytypct must be a real numeric ',...
            'two-dimensional matrix of time series data'];
    case 'ContainsZeros'
        msg = ['It is not possible to calculate annual percentage ',...
            'changes for at least one of the time series input ',...
            'because it/they have zero values in one or more periods'];
    case 'TooShort'
        msg = ['(Under the assumption that the time series input are ',...
            'quarterly data), it was not possible to compute annual ',...
            'growth rates for these series because they contained ',...
            'fewer than 5 data points (as measured by number of columns)'];
    otherwise
        throw_missing_error_code_error(errCode);
end
end

%% HELPER TO GENERATE ERROR IF A MESSAGE COULD NOT BE GENERATED
function throw_missing_error_code_error(errCode)
error(['MAPS:',mfilename,':UnknownErrorCode'],['MAPS was unable to ',...
    'generate the error coded as ''',errCode,''' because there is no ',...
    'message coded for that error (either it is missing altogether or ',...
    'there is a mismatch in the spelling of the error code in this ',...
    'function and the calling function)'])
end
